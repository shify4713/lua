local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local computer = require("computer")
local g = component.gpu
local me = component.me_interface
local serialization = require("serialization")

-- Paths and library
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/ultimateOC.lua"

-- Check component availability
local function checkComponents()
    if not component.isAvailable("gpu") then
        io.stderr:write("Error: GPU is not available\n")
        os.exit(1)
    end
    if not component.isAvailable("screen") then
        io.stderr:write("Error: Screen is not available\n")
        os.exit(1)
    end
    if not component.isAvailable("me_interface") then
        io.stderr:write("Error: ME Interface is not available\n")
        os.exit(1)
    end
end

-- Bind GPU to screen
local function bindGpu()
    local screen = component.list("screen")()
    if not screen then
        io.stderr:write("Error: No screen found to bind GPU\n")
        os.exit(1)
    end
    local success, err = pcall(g.bind, screen)
    if not success then
        io.stderr:write("Error: Failed to bind GPU to screen: " .. tostring(err) .. "\n")
        os.exit(1)
    end
    io.stdout:write("GPU bound to screen: " .. screen .. "\n")
    return true
end

-- Check for library
if not fs.exists(LIB_PATH) then
    io.stdout:write("ultimateOC.lua not found. Downloading...\n")
    local success, err = shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
    if not success then
        io.stderr:write("Failed to download ultimateOC.lua: " .. tostring(err) .. "\n")
        os.exit(1)
    end
end
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Failed to load ultimateOC.lua: " .. tostring(uoc) .. "\n")
    uoc = {
        drawText = function(x, y, text, color)
            g.setForeground(color or 0xFFFFFF)
            g.set(x, y, text)
        end,
        roundRect = function(x, y, w, h, borderColor, bgColor)
            g.setForeground(borderColor or 0xFFFFFF)
            g.setBackground(bgColor or 0x000000)
            g.fill(x, y, w, h, " ")
        end,
        animatedButton = function(x, y, w, h, text, hover, bgColor, activeColor, textColor)
            g.setBackground(hover and activeColor or bgColor)
            g.fill(x, y, w, h, " ")
            g.setForeground(textColor)
            local textX = x + math.floor((w - unicode.len(text)) / 2)
            local textY = y + math.floor(h / 2)
            g.set(textX, textY, text)
        end,
        drawLogs = function(x, y, logs, lines, color, offset)
            g.setForeground(color)
            for i = 1, lines do
                local logIndex = #logs - lines + i - offset
                if logIndex > 0 then
                    g.set(x, y + i - 1, logs[logIndex] or "")
                end
            end
        end,
        savef = function(path, data)
            local file = io.open(path, "w")
            if file then
                file:write(serialization.serialize(data))
                file:close()
            end
        end,
        loadf = function(path)
            local file = io.open(path, "r")
            if not file then return nil end
            local content = file:read("*a")
            file:close()
            return serialization.unserialize(content)
        end,
        progressBar = function(x, y, w, progress)
            g.setBackground(0x44475a)
            g.fill(x, y, w, 1, " ")
            g.setBackground(0x50FA7B)
            g.fill(x, y, math.floor(w * progress), 1, " ")
        end
    }
end

-- Check data file
if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {items = {}, settings = {sortCriteria = "name", sortAscending = true}})
    io.stdout:write("Created new BD.txt file\n")
end

-------------------- Settings --------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
    warning = 0xFFB86C,
    input_bg = 0x000000,
    input_text = 0xF8F8F2,
}
local WIDTH, HEIGHT = g.getResolution()
local craftStatus = "Waiting..."
local nextCraftUpdate = 0
local isCrafting = false
local logs = {}
local dataItems = {}
local settings = {sortCriteria = "name", sortAscending = true}
local search = ""
local selectedItem = nil
local currentPage = 1
local changeitem = false
local searchActive = false
local logOffset = 0
local lastRequestedItem = nil
local lastRequestTime = 0
local buttonHover = nil

-------------------- Logging --------------------
local function addLog(logs, text, lvl)
    lvl = lvl or "INFO"
    local t = string.format("%-7s %s", "[" .. lvl .. "]", text)
    table.insert(logs, t)
    while #logs > 50 do table.remove(logs, 1) end
end

-------------------- Helper functions --------------------
local function getFilteredAndSortedItems()
    local filtered = {}
    for i, item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            if not item.category then item.category = "No category" end
            table.insert(filtered, item)
        end
    end
    table.sort(filtered, function(a, b)
        local valA, valB
        if settings.sortCriteria == "name" then
            valA = unicode.lower(a.name or "")
            valB = unicode.lower(b.name or "")
        elseif settings.sortCriteria == "current" then
            valA = tonumber(a.current) or 0
            valB = tonumber(b.current) or 0
        elseif settings.sortCriteria == "count" then
            valA = tonumber(a.count) or 0
            valB = tonumber(b.count) or 0
        elseif settings.sortCriteria == "craftSize" then
            valA = tonumber(a.craftSize) or 0
            valB = tonumber(b.craftSize) or 0
        elseif settings.sortCriteria == "category" then
            valA = unicode.lower(a.category or "No category")
            valB = unicode.lower(b.category or "No category")
        end
        return settings.sortAscending and valA < valB or valA > valB
    end)
    return filtered
end

local function getItemsPerPage()
    return HEIGHT - 20
end

local function getMaxPages()
    local filteredItems = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    return math.max(1, math.ceil(#filteredItems / perPage))
end

local function clampPage()
    local maxPages = getMaxPages()
    currentPage = math.max(1, math.min(currentPage, maxPages))
end

-------------------- Visuals --------------------
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1, 1, WIDTH, HEIGHT, " ")
    g.setForeground(COLORS.text)
end

local function drawHeader()
    uoc.drawText(2, 2, "Ultimate AutoCraft", COLORS.ok)
    g.setBackground(COLORS.progress_fg)
    g.fill(1, 3, WIDTH, 1, " ")
    g.setBackground(COLORS.bg)
    uoc.drawText(2, 4, "Status: " .. craftStatus,
        (craftStatus:find("Error") and COLORS.error) or COLORS.ok)
    if uoc.progressBar then
        uoc.progressBar(2, 5, WIDTH - 20, isCrafting and 0.9 or 0)
    end
    local maxPages = getMaxPages()
    uoc.drawText(2, 6, "Page: " .. currentPage .. "/" .. maxPages, COLORS.text)
end

local function drawItems()
    local filteredAndSortedItems = getFilteredAndSortedItems()
    local x, y = 1, 8
    local totalWidth = WIDTH - 25
    local col_name = math.floor(totalWidth * 0.35)
    local col_category = math.floor(totalWidth * 0.15)
    local col_now = math.floor(totalWidth * 0.15)
    local col_hold = math.floor(totalWidth * 0.15)
    local col_once = totalWidth - col_name - col_category - col_now - col_hold

    g.setForeground(COLORS.select_active)
    g.set(x, y, "┌" .. string.rep("─", col_name) .. "┬" .. string.rep("─", col_category) .. "┬" .. string.rep("─", col_now) .. "┬" .. string.rep("─", col_hold) .. "┬" .. string.rep("─", col_once) .. "┐")
    g.set(x, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + 1, y + 1, string.format("%-" .. col_name .. "s", "Name"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + 1, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + 2, y + 1, string.format("%-" .. col_category .. "s", "Category"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + 2, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + 3, y + 1, string.format("%-" .. col_now .. "s", "In stock"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + 3, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + col_now + 4, y + 1, string.format("%-" .. col_hold .. "s", "Hold"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + col_hold + 4, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + col_now + col_hold + 5, y + 1, string.format("%-" .. col_once .. "s", "Per craft"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + col_hold + col_once + 5, y + 1, "│")
    g.set(x, y + 2, "├" .. string.rep("─", col_name) .. "┼" .. string.rep("─", col_category) .. "┼" .. string.rep("─", col_now) .. "┼" .. string.rep("─", col_hold) .. "┼" .. string.rep("─", col_once) .. "┤")

    local perPage = getItemsPerPage()
    local startIndex = (currentPage - 1) * perPage + 1
    for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
        local it = filteredAndSortedItems[i]
        local isSel = (selectedItem and dataItems[selectedItem] and it == dataItems[selectedItem])
        local row = y + 2 + (i - startIndex)
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.fill(x, row, totalWidth + 2, 1, " ")
        g.setForeground(tonumber(it.current or 0) < tonumber(it.count or 0) and COLORS.warning or COLORS.text)
        g.set(x, row, "│")
        local nameStr = tostring(it.name or "<??>")
        if unicode.len(nameStr) > col_name then
            nameStr = unicode.sub(nameStr, 1, col_name - 1) .. "…"
        end
        g.set(x + 1, row, string.format("%-" .. col_name .. "s", nameStr))
        g.set(x + col_name + 1, row, "│")
        local categoryStr = tostring(it.category or "No category")
        if unicode.len(categoryStr) > col_category then
            categoryStr = unicode.sub(categoryStr, 1, col_category - 1) .. "…"
        end
        g.set(x + col_name + 2, row, string.format("%-" .. col_category .. "s", categoryStr))
        g.set(x + col_name + col_category + 2, row, "│")
        local current_val = tonumber(it.current) or 0
        local current_str = tostring(current_val)
        if unicode.len(current_str) > col_now then
            current_str = unicode.sub(current_str, 1, col_now - 1) .. "…"
        end
        g.set(x + col_name + col_category + 3, row, string.format("%-" .. col_now .. "s", current_str))
        g.set(x + col_name + col_category + col_now + 3, row, "│")
        local hold_val = tonumber(it.count) or 0
        local hold_str = tostring(hold_val)
        if unicode.len(hold_str) > col_hold then
            hold_str = unicode.sub(hold_str, 1, col_hold - 1) .. "…"
        end
        g.set(x + col_name + col_category + col_now + 4, row, string.format("%-" .. col_hold .. "s", hold_str))
        g.set(x + col_name + col_category + col_now + col_hold + 4, row, "│")
        local craftSize_val = tonumber(it.craftSize) or 0
        local craftSize_str = tostring(craftSize_val)
        if unicode.len(craftSize_str) > col_once then
            craftSize_str = unicode.sub(craftSize_str, 1, col_once - 1) .. "…"
        end
        g.set(x + col_name + col_category + col_now + col_hold + 5, row, string.format("%-" .. col_once .. "s", craftSize_str))
        g.set(x + col_name + col_category + col_now + col_hold + col_once + 5, row, "│")
    end
    g.setForeground(COLORS.select_active)
    g.set(x, y + perPage + 2, "└" .. string.rep("─", col_name) .. "┴" .. string.rep("─", col_category) .. "┴" .. string.rep("─", col_now) .. "┴" .. string.rep("─", col_hold) .. "┴" .. string.rep("─", col_once) .. "┘")
    g.setForeground(COLORS.text)
end

local function drawSearchBar()
    local x, y = 2, HEIGHT - 10
    local w, h = WIDTH - 20, 3
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x + 1, y + 1, w - 2, h - 2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x + w - 3, y + 1, (search ~= "" and "×" or " "))
    g.setForeground(searchActive and COLORS.ok or COLORS.search_hint)
    local display = search
    if display == "" then display = "Search: type part of the name..." end
    if searchActive then display = display .. "_" end
    local maxlen = w - 7
    if unicode.len(display) > maxlen then
        display = unicode.sub(display, unicode.len(display) - maxlen + 1)
    end
    g.set(x + 2, y + 1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)
end

local function drawLogs()
    local logLines = 5
    uoc.drawLogs(2, HEIGHT - logLines, logs, logLines, COLORS.log, logOffset)
end

local function drawButtons()
    local btnWidth = 12
    local btnHeight = 3
    local btnX = WIDTH - btnWidth - 5
    local btnPadding = 2
    local btns = {
        {name = "Delete", action = "delete"},
        {name = "Edit", action = "edit"},
        {name = isCrafting and "Stop" or "Autocraft", action = "toggleCraft"},
        {name = "Add", action = "add"},
    }
    for i, btn in ipairs(btns) do
        local btnY = 10 + (i - 1) * (btnHeight + btnPadding)
        local hover = (buttonHover == btn.action)
        uoc.animatedButton(btnX, btnY, btnWidth, btnHeight, btn.name, hover, COLORS.button, COLORS.buttonActive, COLORS.text)
    end
    local arrowBtnW = 4
    local arrowBtnH = 3
    local arrowBtnY = 10 + (#btns * (btnHeight + btnPadding))
    local prevArrowBtnX = btnX
    local nextArrowBtnX = btnX + arrowBtnW + 1
    local maxPages = getMaxPages()
    local prevEnabled = (currentPage > 1)
    local prevHover = (buttonHover == "prevPage")
    uoc.animatedButton(prevArrowBtnX, arrowBtnY, arrowBtnW, arrowBtnH, "<-", prevHover,
        prevEnabled and COLORS.button or COLORS.border,
        prevEnabled and COLORS.buttonActive or COLORS.border,
        prevEnabled and COLORS.text or COLORS.search_hint)
    local nextEnabled = (currentPage < maxPages)
    local nextHover = (buttonHover == "nextPage")
    uoc.animatedButton(nextArrowBtnX, arrowBtnY, arrowBtnW, arrowBtnH, "->", nextHover,
        nextEnabled and COLORS.button or COLORS.border,
        nextEnabled and COLORS.buttonActive or COLORS.border,
        nextEnabled and COLORS.text or COLORS.search_hint)

    local sortBtnY = arrowBtnY + arrowBtnH + 2
    local sortBtnW = 12
    local sortText = "Sort:"
    local sortIndicatorText = ""
    if settings.sortCriteria == "name" then
        sortIndicatorText = "Name"
    elseif settings.sortCriteria == "current" then
        sortIndicatorText = "Stock"
    elseif settings.sortCriteria == "count" then
        sortIndicatorText = "Hold"
    elseif settings.sortCriteria == "craftSize" then
        sortIndicatorText = "Craft"
    elseif settings.sortCriteria == "category" then
        sortIndicatorText = "Cat."
    end
    sortIndicatorText = sortIndicatorText .. (settings.sortAscending and "↑" or "↓")
    local fullSortText = sortText .. " " .. sortIndicatorText
    local displaySortText = fullSortText
    if unicode.len(fullSortText) > sortBtnW then
        displaySortText = unicode.sub(fullSortText, 1, sortBtnW - 1)
    end
    local sortHover = (buttonHover == "sort")
    uoc.animatedButton(btnX, sortBtnY, sortBtnW, arrowBtnH, displaySortText, sortHover, COLORS.button, COLORS.buttonActive, COLORS.text)
end

local function draw()
    if not changeitem then
        clear()
        drawHeader()
        drawItems()
        drawSearchBar()
        drawLogs()
        drawButtons()
    end
end

-------------------- IO and actions --------------------
local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    if not ok then
        addLog(logs, "ERROR: Failed to load BD.txt: " .. tostring(res), "ERROR")
        dataItems = {}
        settings = {sortCriteria = "name", sortAscending = true}
    else
        res = res or {items = {}, settings = {sortCriteria = "name", sortAscending = true}}
        dataItems = res.items or {}
        settings = res.settings or {sortCriteria = "name", sortAscending = true}
    end
    clampPage()
    for _, item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        local ok_get, res_get = pcall(me.getItemsInNetwork, {id = item.id, damage = item.dmg})
        if ok_get then stackList = res_get or {} end
        if stackList and stackList.n and stackList.n > 0 then
            for _, stack in ipairs(stackList) do
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = qty + (stack.size or stack.qty or 0)
                end
            end
        else
            local ok_detail, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok_detail and d then
                qty = qty + (d.qty or d.size or 0)
            end
        end
        local craftingJobs_ok, craftingJobs = pcall(me.getCraftingJobs)
        if craftingJobs_ok and craftingJobs and craftingJobs.n then
            for _, job in ipairs(craftingJobs) do
                if job.output and job.output.id == item.id and
                   (item.dmg == nil or job.output.damage == item.dmg) then
                    qty = qty + (job.output.size or job.output.qty or 0)
                    if lastRequestedItem and lastRequestedItem.id == item.id and
                       (lastRequestedItem.dmg == nil or lastRequestedItem.dmg == item.dmg) then
                        lastRequestedItem = nil
                        lastRequestTime = 0
                    end
                end
            end
        end
        item.current = qty
    end
    if lastRequestedItem and computer.uptime() - lastRequestTime > 30 then
        addLog(logs, "WARN: Timeout waiting for '" .. (lastRequestedItem.id or "<??>") .. "'. Resetting lastRequestedItem.", "WARN")
        lastRequestedItem = nil
        lastRequestTime = 0
    end
end

local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, {items = dataItems, settings = settings})
    if not ok then
        addLog(logs, "ERROR: Save error: " .. tostring(err), "ERROR")
    end
end

local function resetSelection()
    search = ""
    currentPage = 1
    selectedItem = nil
end

local function cancelInput()
    changeitem = false
    draw()
end

local function simplePrompt(label, defaultValue, isNumeric, x, y)
    term.clearLine()
    g.setBackground(COLORS.input_bg)
    g.fill(1, y, WIDTH, 1, " ")
    g.setForeground(COLORS.text)
    g.set(x, y, label .. (defaultValue or ""))
    term.setCursor(x + unicode.len(label), y)
    term.cursorBlink(true)

    local input = defaultValue or ""
    while true do
        local _, _, char, code = event.pull("key_down")
        if code == 28 then -- Enter
            break
        elseif code == 14 and #input > 0 then -- Backspace
            input = unicode.sub(input, 1, -2)
            g.fill(x + unicode.len(label), y, WIDTH - x - unicode.len(label), 1, " ")
            g.set(x + unicode.len(label), y, input)
            term.setCursor(x + unicode.len(label) + unicode.len(input), y)
        elseif char >= 32 and char <= 126 then -- Printable characters
            local c = unicode.char(char)
            if (not isNumeric) or (isNumeric and c:match("%d")) then
                input = input .. c
                g.set(x + unicode.len(label), y, input)
                term.setCursor(x + unicode.len(label) + unicode.len(input), y)
            end
        end
    end
    term.cursorBlink(false)
    g.setBackground(COLORS.bg)

    if input == "" then return defaultValue or (isNumeric and 0 or "") end
    if isNumeric then
        local num = tonumber(input)
        if not num or num < 0 then
            addLog(logs, "WARN: Invalid numeric value for '" .. label .. "'. Using 0.", "WARN")
            return 0
        end
        return num
    end
    return input
end

local function addItem()
    changeitem = true
    clear()
    uoc.drawText(2, HEIGHT - 15, "Add Item", COLORS.ok)
    uoc.drawText(2, HEIGHT - 13, "Insert item into slot 1 of the ME interface.", COLORS.ok)
    local stack = nil
    local ok_stack, res_stack = pcall(me.getStackInSlot, 1)
    if ok_stack then stack = res_stack end
    if not stack then
        uoc.drawText(2, HEIGHT - 11, "Error: No item in slot 1 of the interface", COLORS.error)
        addLog(logs, "ERROR: No item in slot 1!", "ERROR")
        os.sleep(2)
        cancelInput()
        return
    end
    local defaultName = stack.label or stack.id or "Item"
    local name = simplePrompt("Name: ", defaultName, false, 2, HEIGHT - 11)
    local category = simplePrompt("Category: ", "No category", false, 2, HEIGHT - 9)
    local count = simplePrompt("Hold: ", "0", true, 2, HEIGHT - 7)
    local craftSize = simplePrompt("Craft size: ", "1", true, 2, HEIGHT - 5)
    table.insert(dataItems, {
        name = name,
        category = category,
        id = stack.id,
        dmg = stack.dmg,
        count = count,
        craftSize = craftSize
    })
    save()
    addLog(logs, "INFO: Added item: " .. name .. " (Category: " .. category .. ")", "INFO")
    currentPage = getMaxPages()
    selectedItem = nil
    changeitem = false
    draw()
end

local function editItem()
    if not selectedItem or not dataItems[selectedItem] then
        addLog(logs, "ERROR: No item selected!", "ERROR")
        draw()
        return
    end
    changeitem = true
    local item = dataItems[selectedItem]
    clear()
    uoc.drawText(2, HEIGHT - 15, "Edit: " .. (item.name or "<??>"), COLORS.ok)
    local name = simplePrompt("Name: ", item.name or "", false, 2, HEIGHT - 11)
    local category = simplePrompt("Category: ", item.category or "No category", false, 2, HEIGHT - 9)
    local count = simplePrompt("Hold: ", tostring(item.count or 0), true, 2, HEIGHT - 7)
    local craftSize = simplePrompt("Craft size: ", tostring(item.craftSize or 1), true, 2, HEIGHT - 5)
    item.name = name
    item.category = category
    item.count = count
    item.craftSize = craftSize
    save()
    addLog(logs, "INFO: Edited: " .. name .. " (Category: " .. (category or "No category") .. ")", "INFO")
    changeitem = false
    draw()
end

local function removeItem()
    if not selectedItem or not dataItems[selectedItem] then
        addLog(logs, "ERROR: No item selected!", "ERROR")
        return
    end
    addLog(logs, "WARN: Removed: " .. (dataItems[selectedItem].name or "<??>"), "WARN")
    table.remove(dataItems, selectedItem)
    selectedItem = nil
    clampPage()
    save()
    draw()
end

local function doCraft()
    isCrafting = true
    craftStatus = "Autocrafting..."
    save()
    addLog(logs, "INFO: Autocraft started", "INFO")
    draw()
end

local function stopCraft()
    isCrafting = false
    craftStatus = "Stopped"
    addLog(logs, "WARN: Autocraft stopped", "WARN")
    draw()
end

local function tryCraftItem(itemToCraft)
    local me = component.me_interface
    local count = tonumber(itemToCraft.count) or 0
    local current = tonumber(itemToCraft.current) or 0
    if current >= count then
        return false
    end

    if lastRequestedItem and lastRequestedItem.id == itemToCraft.id and
       (itemToCraft.dmg == nil or lastRequestedItem.dmg == itemToCraft.dmg) then
        addLog(logs, "INFO: Item '" .. (itemToCraft.name or "<??>") .. "' recently requested. Waiting.", "INFO")
        craftStatus = "Waiting: " .. (itemToCraft.name or "<??>")
        return false
    end

    local cpus_ok, cpus = pcall(me.getCpus)
    if not cpus_ok or not cpus then
        addLog(logs, "ERROR: Failed to get CPUs: " .. tostring(cpus), "ERROR")
        craftStatus = "Error: ME CPU"
        return false
    end

    local freeCpu = nil
    for _, cpu in ipairs(cpus) do
        if not cpu.busy then
            freeCpu = cpu.name
            break
        end
    end

    if freeCpu then
        local craftables_ok, craftables = pcall(me.getCraftables, {name = itemToCraft.id, damage = itemToCraft.dmg})
        if not craftables_ok or not craftables or craftables.n == 0 then
            addLog(logs, "ERROR: No recipe for '" .. (itemToCraft.name or "<??>") .. "'", "ERROR")
            craftStatus = "Error: No recipe"
            return false
        end

        local craftable = craftables[1]
        local quantityToRequest = tonumber(itemToCraft.craftSize) or 1
        local succ, req = pcall(function() return craftable.request(quantityToRequest, false, freeCpu) end)
        if succ and req then
            craftStatus = "Crafting: " .. (itemToCraft.name or "<??>")
            addLog(logs, "INFO: Requested craft of " .. quantityToRequest .. "x " .. (itemToCraft.name or "<??>") .. " on CPU " .. freeCpu, "INFO")
            lastRequestedItem = {id = itemToCraft.id, dmg = itemToCraft.dmg}
            lastRequestTime = computer.uptime()
            return true
        else
            craftStatus = "Error: Craft rejected"
            addLog(logs, "ERROR: Failed to craft '" .. (itemToCraft.name or "<??>") .. "': " .. tostring(req), "ERROR")
            return false
        end
    else
        craftStatus = "Error: No free CPUs"
        addLog(logs, "ERROR: No free CPUs", "ERROR")
        return false
    end
end

local function autoCraftLoop()
    while true do
        if isCrafting then
            local now = computer.uptime()
            if now >= nextCraftUpdate then
                local ok, err = pcall(reload)
                if not ok then
                    addLog(logs, "ERROR: Error in reload: " .. tostring(err), "ERROR")
                    craftStatus = "Error: Data update"
                else
                    local craftMadeThisCycle = false
                    for i, item in ipairs(dataItems) do
                        if not craftMadeThisCycle then
                            if tryCraftItem(item) then
                                craftMadeThisCycle = true
                                break
                            end
                        end
                    end
                    save()
                    nextCraftUpdate = now + 30
                end
                if not changeitem then
                    draw()
                end
            end
        end
        os.sleep(0.5)
    end
end

-------------------- Events --------------------
local function updateButtonHover(x, y)
    local btnWidth = 12
    local btnHeight = 3
    local btnX = WIDTH - btnWidth - 5
    local btnPadding = 2
    local btns = {
        {name = "Delete", action = "delete"},
        {name = "Edit", action = "edit"},
        {name = isCrafting and "Stop" or "Autocraft", action = "toggleCraft"},
        {name = "Add", action = "add"},
    }
    for i, btn in ipairs(btns) do
        local btnY = 10 + (i - 1) * (btnHeight + btnPadding)
        if x >= btnX and x <= btnX + btnWidth - 1 and y >= btnY and y <= btnY + btnHeight - 1 then
            return btn.action
        end
    end
    local arrowBtnW = 4
    local arrowBtnH = 3
    local arrowBtnY = 10 + (#btns * (btnHeight + btnPadding))
    local prevArrowBtnX = btnX
    local nextArrowBtnX = btnX + arrowBtnW + 1
    local sortBtnY = arrowBtnY + arrowBtnH + 2
    local sortBtnW = 12
    if x >= prevArrowBtnX and x <= prevArrowBtnX + arrowBtnW - 1 and y >= arrowBtnY and y <= arrowBtnY + arrowBtnH - 1 then
        return "prevPage"
    elseif x >= nextArrowBtnX and x <= nextArrowBtnX + arrowBtnW - 1 and y >= arrowBtnY and y <= arrowBtnY + arrowBtnH - 1 then
        return "nextPage"
    elseif x >= btnX and x <= btnX + sortBtnW - 1 and y >= sortBtnY and y <= sortBtnY + arrowBtnH - 1 then
        return "sort"
    end
    return nil
end

event.listen("touch", function(_, _, x, y, _, _)
    if changeitem then return end
    local btnWidth = 12
    local btnHeight = 3
    local btnX = WIDTH - btnWidth - 5
    local btnPadding = 2
    local btns = {
        {name = "Delete", action = "delete"},
        {name = "Edit", action = "edit"},
        {name = isCrafting and "Stop" or "Autocraft", action = "toggleCraft"},
        {name = "Add", action = "add"},
    }
    for i, btn in ipairs(btns) do
        local btnY = 10 + (i - 1) * (btnHeight + btnPadding)
        if x >= btnX and x <= btnX + btnWidth - 1 and y >= btnY and y <= btnY + btnHeight - 1 then
            if btn.action == "delete" then removeItem()
            elseif btn.action == "edit" then editItem()
            elseif btn.action == "toggleCraft" then if isCrafting then stopCraft() else doCraft() end
            elseif btn.action == "add" then addItem()
            end
            buttonHover = nil
            draw()
            return
        end
    end
    local arrowBtnW = 4
    local arrowBtnH = 3
    local arrowBtnY = 10 + (#btns * (btnHeight + btnPadding))
    local prevArrowBtnX = btnX
    local nextArrowBtnX = btnX + arrowBtnW + 1
    local sortBtnY = arrowBtnY + arrowBtnH + 2
    local sortBtnW = 12
    if x >= prevArrowBtnX and x <= prevArrowBtnX + arrowBtnW - 1 and y >= arrowBtnY and y <= arrowBtnY + arrowBtnH - 1 then
        if currentPage > 1 then
            currentPage = currentPage - 1
            selectedItem = nil
            buttonHover = nil
            draw()
        end
        return
    elseif x >= nextArrowBtnX and x <= nextArrowBtnX + arrowBtnW - 1 and y >= arrowBtnY and y <= arrowBtnY + arrowBtnH - 1 then
        local maxPages = getMaxPages()
        if currentPage < maxPages then
            currentPage = currentPage + 1
            selectedItem = nil
            buttonHover = nil
            draw()
        end
        return
    elseif x >= btnX and x <= btnX + sortBtnW - 1 and y >= sortBtnY and y <= sortBtnY + arrowBtnH - 1 then
        local criteriaList = {"name", "category", "current", "count", "craftSize"}
        local currentCriteriaIndex = 1
        for i, v in ipairs(criteriaList) do
            if v == settings.sortCriteria then
                currentCriteriaIndex = i
                break
            end
            if i == #criteriaList and v ~= settings.sortCriteria then
                currentCriteriaIndex = 0
            end
        end
        currentCriteriaIndex = currentCriteriaIndex + 1
        if currentCriteriaIndex > #criteriaList then
            currentCriteriaIndex = 1
            settings.sortAscending = not settings.sortAscending
        else
            settings.sortAscending = true
        end
        settings.sortCriteria = criteriaList[currentCriteriaIndex]
        currentPage = 1
        selectedItem = nil
        buttonHover = nil
        save()
        draw()
        return
    end
    if y >= HEIGHT - 10 and y <= HEIGHT - 8 then
        searchActive = false
        if x >= 2 + (WIDTH - 20) - 3 and x <= 2 + (WIDTH - 20) - 1 and search ~= "" then
            search = ""
            currentPage = 1
            selectedItem = nil
            buttonHover = nil
            draw()
            return
        end
        if x >= 2 + 1 and x <= 2 + (WIDTH - 20) - 4 then
            searchActive = true
            buttonHover = nil
            draw()
            return
        end
    else
        searchActive = false
    end
    local filteredAndSortedItems = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    local startIndex = (currentPage - 1) * perPage + 1
    local itemsStartY = 10
    local itemsEndY = itemsStartY + perPage - 1
    if y >= itemsStartY and y <= itemsEndY then
        local idxOnPage = y - itemsStartY
        local actualIndexInFiltered = startIndex + idxOnPage
        if filteredAndSortedItems[actualIndexInFiltered] then
            for k, v in ipairs(dataItems) do
                if v == filteredAndSortedItems[actualIndexInFiltered] then
                    selectedItem = k
                    break
                end
            end
        end
        buttonHover = nil
        draw()
        return
    end
    buttonHover = nil
    draw()
end)

event.listen("mouse_move", function(_, _, x, y)
    if changeitem then return end
    local newHover = updateButtonHover(x, y)
    if newHover ~= buttonHover then
        buttonHover = newHover
        draw()
    end
end)

event.listen("key_down", function(_, _, key, _, _)
    if not changeitem then
        local filteredAndSortedItems = getFilteredAndSortedItems()
        local perPage = getItemsPerPage()
        local maxPages = getMaxPages()
        if searchActive then
            if key == 14 then -- Backspace
                search = unicode.sub(search, 1, -2)
            elseif key == 211 then -- Delete
                search = ""
            elseif key == 28 then -- Enter
                searchActive = false
            else
                local char = unicode.char(key)
                if unicode.len(char) > 0 and not char:find("[\x00-\x1F\x7F]") then
                    if unicode.len(search) < WIDTH - 25 then
                        search = search .. char
                    end
                end
            end
            currentPage = 1
            selectedItem = nil
            buttonHover = nil
        else
            if key == 200 then
                local currentSelectedItemInFiltered = nil
                local startIndex = (currentPage - 1) * perPage + 1
                local visibleItems = {}
                for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
                    table.insert(visibleItems, filteredAndSortedItems[i])
                end
                if selectedItem then
                    for i, v in ipairs(visibleItems) do
                        if v == dataItems[selectedItem] then
                            currentSelectedItemInFiltered = i
                            break
                        end
                    end
                end
                if #visibleItems == 0 then
                    selectedItem = nil
                elseif currentSelectedItemInFiltered and currentSelectedItemInFiltered > 1 then
                    selectedItem = nil
                    for k, v in ipairs(dataItems) do
                        if v == visibleItems[currentSelectedItemInFiltered - 1] then
                            selectedItem = k
                            break
                        end
                    end
                elseif #visibleItems > 0 then
                    selectedItem = nil
                    for k, v in ipairs(dataItems) do
                        if v == visibleItems[#visibleItems] then
                            selectedItem = k
                            break
                        end
                    end
                end
            elseif key == 208 then
                local currentSelectedItemInFiltered = nil
                local startIndex = (currentPage - 1) * perPage + 1
                local visibleItems = {}
                for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
                    table.insert(visibleItems, filteredAndSortedItems[i])
                end
                if selectedItem then
                    for i, v in ipairs(visibleItems) do
                        if v == dataItems[selectedItem] then
                            currentSelectedItemInFiltered = i
                            break
                        end
                    end
                end
                if #visibleItems == 0 then
                    selectedItem = nil
                elseif currentSelectedItemInFiltered and currentSelectedItemInFiltered < #visibleItems then
                    selectedItem = nil
                    for k, v in ipairs(dataItems) do
                        if v == visibleItems[currentSelectedItemInFiltered + 1] then
                            selectedItem = k
                            break
                        end
                    end
                elseif #visibleItems > 0 then
                    selectedItem = nil
                    for k, v in ipairs(dataItems) do
                        if v == visibleItems[1] then
                            selectedItem = k
                            break
                        end
                    end
                end
            elseif key == 203 then
                if currentPage > 1 then
                    currentPage = currentPage - 1
                    selectedItem = nil
                end
            elseif key == 205 then
                if currentPage < maxPages then
                    currentPage = currentPage + 1
                    selectedItem = nil
                end
            elseif key == 200 and arg.shift then
                logOffset = math.min(logOffset + 1, #logs - 5)
            elseif key == 208 and arg.shift then
                logOffset = math.max(logOffset - 1, 0)
            end
        end
        buttonHover = nil
        draw()
    end
end)

-------------------- Start --------------------
checkComponents()
bindGpu()
WIDTH, HEIGHT = g.getResolution()
g.setResolution(WIDTH, HEIGHT)
addLog(logs, "INFO: Program started", "INFO")
local ok, err = pcall(reload)
if not ok then
    addLog(logs, "ERROR: Error on initial load: " .. tostring(err), "ERROR")
    draw()
    while true do os.sleep(1) end
end
draw()
local ok, err = pcall(autoCraftLoop)
if not ok then
    addLog(logs, "ERROR: Fatal error in autoCraftLoop: " .. tostring(err), "ERROR")
    draw()
    while true do os.sleep(1) end
end
