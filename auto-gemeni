local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local computer = require("computer")
local g = component.gpu
local me = component.me_interface
local serialization = require("serialization")

-- Пути и библиотека
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/ultimateOC.lua"

-- Проверка доступности компонентов
local function checkComponents()
    if not component.isAvailable("gpu") or not component.isAvailable("screen") or not component.isAvailable("me_interface") then
        io.stderr:write("Ошибка: Необходимые компоненты (GPU, Screen, ME Interface) отсутствуют\n")
        os.exit(1)
    end
end

-- Привязка GPU к экрану
local function bindGpu()
    local screen = component.list("screen")()
    if not screen then io.stderr:write("Ошибка: Экран не найден\n") os.exit(1) end
    g.bind(screen)
    io.stdout:write("GPU привязан к экрану: " .. screen .. "\n")
end

-- Загрузка библиотеки
if not fs.exists(LIB_PATH) then
    io.stdout:write("Скачиваю ultimateOC.lua...\n")
    shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
end
local uoc = require("ultimateOC")

-- Инициализация файла данных
if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {items = {}, settings = {sortCriteria = "name", sortAscending = true}})
end

-- Цвета и настройки
local COLORS = {
    button = 0x00BFFF, buttonActive = 0x1E90FF, border = 0x44475a, text = 0xF8F8F2,
    bg = 0x23242b, error = 0xFF5555, ok = 0x50FA7B, input_bg = 0x282A36, input_text = 0xF8F8F2,
    log = 0x8BE9FD, progress_bg = 0x44475a, progress_fg = 0x50FA7B, select = 0x31313A,
    select_active = 0x44B3FF, search_bg = 0x282B36, search_border = 0x00BFFF, search_cross = 0xFF5555,
    search_hint = 0x888888, bar_shadow = 0x181920, warning = 0xFFB86C
}
local WIDTH, HEIGHT = g.getResolution()
local craftStatus, isCrafting = "Ожидание...", false
local logs, dataItems, settings = {}, {}, {sortCriteria = "name", sortAscending = true}
local search, selectedItem, currentPage, changeitem = "", nil, 1, false
local searchActive, logOffset, lastRequestedItem, lastRequestTime, buttonHover = false, 0, nil, 0, nil

-- Логирование
local function addLog(text, lvl) uoc.addLog(logs, text, lvl) end

-- Фильтрация и сортировка предметов
local function getFilteredAndSortedItems()
    local filtered = uoc.filterItems(dataItems, search)
    table.sort(filtered, function(a, b)
        local valA = settings.sortCriteria == "name" and unicode.lower(a.name or "") or tonumber(a[settings.sortCriteria] or 0)
        local valB = settings.sortCriteria == "name" and unicode.lower(b.name or "") or tonumber(b[settings.sortCriteria] or 0)
        return settings.sortAscending and valA < valB or valA > valB
    end)
    return filtered
end

-- Пагинация
local function getItemsPerPage() return HEIGHT - 20 end
local function getMaxPages() return math.max(1, math.ceil(#getFilteredAndSortedItems() / getItemsPerPage())) end

-- Очистка экрана
local function clear() g.setBackground(COLORS.bg) g.fill(1, 1, WIDTH, HEIGHT, " ") g.setForeground(COLORS.text) end

-- Отрисовка заголовка
local function drawHeader()
    uoc.drawText(2, 2, "Ultimate AutoCraft", COLORS.ok, true)
    uoc.progressBar(2, 5, WIDTH - 20, isCrafting and 0.9 or 0, COLORS.progress_fg, COLORS.progress_bg)
    uoc.drawText(2, 6, "Страница: " .. currentPage .. "/" .. getMaxPages() .. " | Статус: " .. craftStatus, COLORS.text, true)
end

-- Отрисовка списка предметов
local function drawItems()
    local items = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    local start = (currentPage - 1) * perPage + 1
    for i = start, math.min(#items, start + perPage - 1) do
        local item = items[i]
        local y = 8 + (i - start)
        local color = (tonumber(item.current or 0) < tonumber(item.count or 0)) and COLORS.warning or COLORS.text
        uoc.selectLine(1, y, WIDTH - 25, string.format("%-30s %-15s %-10s %-10s", item.name or "??", item.category or "Без категории", item.current or 0, item.count or 0), selectedItem and dataItems[selectedItem] == item, COLORS.select, COLORS.select_active, color)
    end
end

-- Отрисовка кнопок
local function drawButtons()
    local btns = {{"Добавить", "add"}, {"Редактировать", "edit"}, {"Удалить", "delete"}, {isCrafting and "Стоп" or "Автокрафт", "toggleCraft"}}
    for i, btn in ipairs(btns) do
        uoc.animatedButton(WIDTH - 15, 10 + (i-1)*4, 12, 3, btn[1], buttonHover == btn[2], COLORS.button, COLORS.buttonActive, COLORS.text)
    end
end

-- Отрисовка интерфейса
local function draw()
    if not changeitem then
        clear()
        drawHeader()
        drawItems()
        drawButtons()
        uoc.drawLogs(2, HEIGHT - 5, logs, 5, COLORS.log)
    end
end

-- Улучшенный ввод данных
local function simplePrompt(label, default, x, y)
    g.setBackground(COLORS.input_bg)
    g.fill(1, y, WIDTH, 1, " ")
    uoc.drawText(x, y, label, COLORS.text)
    local input = default or ""
    g.setForeground(COLORS.input_text)
    g.set(x + unicode.len(label), y, input)
    term.setCursor(x + unicode.len(label), y)
    term.cursorBlink(true)
    
    while true do
        local _, _, char, code = event.pull("key_down")
        if code == 28 then break -- Enter
        elseif code == 14 and #input > 0 then -- Backspace
            input = unicode.sub(input, 1, -2)
        elseif char >= 32 and char <= 126 then -- Печатные символы
            input = input .. unicode.char(char)
        end
        g.setBackground(COLORS.input_bg)
        g.fill(x + unicode.len(label), y, WIDTH - x - unicode.len(label), 1, " ")
        g.setForeground(COLORS.input_text)
        g.set(x + unicode.len(label), y, input)
        term.setCursor(x + unicode.len(label) + unicode.len(input), y)
    end
    term.cursorBlink(false)
    g.setBackground(COLORS.bg)
    return input ~= "" and input or default
end

-- Добавление предмета
local function addItem()
    changeitem = true
    clear()
    uoc.roundRect(5, HEIGHT-15, WIDTH-10, 12, COLORS.border, COLORS.input_bg)
    uoc.drawText(6, HEIGHT-14, "Добавить предмет", COLORS.ok)
    uoc.drawText(6, HEIGHT-13, "Вставьте предмет в слот 1 ME интерфейса", COLORS.text)
    
    local stack = me.getStackInSlot(1)
    if not stack then
        uoc.drawText(6, HEIGHT-11, "Ошибка: Нет предмета в слоте 1", COLORS.error)
        os.sleep(2)
        changeitem = false
        draw()
        return
    end
    
    local name = simplePrompt("Имя: ", stack.label or stack.id, 6, HEIGHT-11)
    local category = simplePrompt("Категория: ", "Без категории", 6, HEIGHT-9)
    local count = tonumber(simplePrompt("Хранить: ", "0", 6, HEIGHT-7)) or 0
    local craftSize = tonumber(simplePrompt("Размер крафта: ", "1", 6, HEIGHT-5)) or 1
    
    table.insert(dataItems, {name = name, category = category, id = stack.id, dmg = stack.dmg, count = count, craftSize = craftSize, current = 0})
    uoc.savef(DATA_FILE, {items = dataItems, settings = settings})
    addLog("Добавлен предмет: " .. name, "INFO")
    changeitem = false
    draw()
end

-- Редактирование предмета
local function editItem()
    if not selectedItem then return end
    changeitem = true
    clear()
    uoc.roundRect(5, HEIGHT-15, WIDTH-10, 12, COLORS.border, COLORS.input_bg)
    uoc.drawText(6, HEIGHT-14, "Редактировать предмет", COLORS.ok)
    
    local item = dataItems[selectedItem]
    local name = simplePrompt("Имя: ", item.name, 6, HEIGHT-11)
    local category = simplePrompt("Категория: ", item.category, 6, HEIGHT-9)
    local count = tonumber(simplePrompt("Хранить: ", tostring(item.count), 6, HEIGHT-7)) or item.count
    local craftSize = tonumber(simplePrompt("Размер крафта: ", tostring(item.craftSize), 6, HEIGHT-5)) or item.craftSize
    
    item.name, item.category, item.count, item.craftSize = name, category, count, craftSize
    uoc.savef(DATA_FILE, {items = dataItems, settings = settings})
    addLog("Изменён предмет: " .. name, "INFO")
    changeitem = false
    draw()
end

-- Удаление предмета
local function deleteItem()
    if selectedItem then
        local itemName = dataItems[selectedItem].name
        table.remove(dataItems, selectedItem)
        selectedItem = nil
        uoc.savef(DATA_FILE, {items = dataItems, settings = settings})
        addLog("Удалён предмет: " .. itemName, "WARN")
        draw()
    end
end

-- Логика автокрафта
local function tryCraftItem(item)
    local count = tonumber(item.count) or 0
    local current = tonumber(item.current) or 0
    if current >= count then return false end
    
    local cpus = me.getCpus() or {}
    local freeCpu = nil
    for _, cpu in ipairs(cpus) do
        if not cpu.busy then freeCpu = cpu.name break end
    end
    
    if freeCpu then
        local craftables = me.getCraftables({name = item.id, damage = item.dmg}) or {n = 0}
        if craftables.n >= 1 then
            local craftSize = tonumber(item.craftSize) or 1
            local success, req = pcall(function() return craftables[1].request(craftSize, false, freeCpu) end)
            if success and req then
                craftStatus = "Крафт: " .. item.name
                addLog("Запрошено " .. craftSize .. "x " .. item.name, "INFO")
                lastRequestedItem = {id = item.id, dmg = item.dmg}
                lastRequestTime = computer.uptime()
                return true
            else
                craftStatus = "Ошибка крафта: " .. item.name
                addLog("Не удалось крафтить " .. item.name, "ERROR")
            end
        else
            craftStatus = "Нет рецепта: " .. item.name
            addLog("Нет рецепта для " .. item.name, "ERROR")
        end
    else
        craftStatus = "Нет свободных CPU"
        addLog("Нет свободных CPU", "ERROR")
    end
    return false
end

-- Цикл автокрафта
local function autoCraftLoop()
    while true do
        if isCrafting then
            for _, item in ipairs(dataItems) do
                local qty = 0
                local stacks = me.getItemsInNetwork({id = item.id, damage = item.dmg}) or {}
                for _, stack in ipairs(stacks) do
                    if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                        qty = qty + (stack.size or 0)
                    end
                end
                item.current = qty
                if tryCraftItem(item) then break end
            end
            uoc.savef(DATA_FILE, {items = dataItems, settings = settings})
            draw()
        end
        os.sleep(1)
    end
end

-- Обработка событий
event.listen("touch", function(_, _, x, y)
    if changeitem then return end
    if x >= WIDTH-15 and x <= WIDTH-3 then
        if y >= 10 and y < 13 then addItem()
        elseif y >= 14 and y < 17 then editItem()
        elseif y >= 18 and y < 21 then deleteItem()
        elseif y >= 22 and y < 25 then isCrafting = not isCrafting craftStatus = isCrafting and "Автокрафт..." or "Остановлено" draw()
        end
    elseif y >= 8 and y <= HEIGHT-20 then
        local perPage = getItemsPerPage()
        local idx = math.floor((y-8) / 1) + (currentPage-1) * perPage + 1
        local items = getFilteredAndSortedItems()
        if items[idx] then
            for i, item in ipairs(dataItems) do
                if item == items[idx] then selectedItem = i break end
            end
            draw()
        end
    end
end)

-- Инициализация и запуск
checkComponents()
bindGpu()
local data = uoc.loadf(DATA_FILE) or {items = {}, settings = {sortCriteria = "name", sortAscending = true}}
dataItems, settings = data.items, data.settings
draw()

-- Запуск автокрафта в отдельном потоке
event.timer(1, autoCraftLoop, math.huge)

while true do
    os.sleep(0.1)
end
