local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term") -- Оригинальная инициализация term
local computer = require("computer")
local g = component.gpu -- Оригинальная инициализация gpu
local me = component.me_interface

-- Проверка наличия компонентов
if not g then
    io.stderr:write("Ошибка: GPU не найден. Убедитесь, что он подключен.\n")
    os.exit(1)
end
if not term then
    io.stderr:write("Ошибка: Terminal не найден. Убедитесь, что он подключен.\n")
    os.exit(1)
end
if not me then
    io.stderr:write("Ошибка: ME интерфейс не найден. Убедитесь, что он подключен.\n")
    os.exit(1)
end

-- Пути и библиотека
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/main/ultimateOC.lua"

if not fs.exists(LIB_PATH) then
    shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
end
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Не удалось загрузить ultimateOC.lua: ", tostring(uoc), "\n")
    os.exit(1)
end

if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {})
end

-------------------- Реальное UTC+3 (по Киеву) --------------------
local function getKyivTime()
    local handle = io.popen("wget -qO- https://worldtimeapi.org/api/timezone/Europe/Kyiv.txt 2>/dev/null")
    if handle then
        local text = handle:read("*a")
        handle:close()
        local h, m, s = text:match("datetime:%s*%d+%-%d+%-%d+T(%d+):(%d+):(%d+)")
        if h and m and s then
            return string.format("%02d:%02d:%02d", tonumber(h), tonumber(m), tonumber(s))
        end
    end
    local t = os.date("!*t", os.time() + 3*3600)
    return string.format("%02d:%02d:%02d", t.hour, t.min, t.sec)
end

-------------------- Настройки --------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
    tooltip_bg = 0x44475a,
    tooltip_text = 0xF8F8F2,
}
local WIDTH, HEIGHT = 110, 40
local craftStatus = "Ожидание..."
local nextCraftUpdate = 0
local isCrafting = false

-------------------- Переменные --------------------
local logs = {}
local dataItems = {}
local search = ""
local selectedItem = nil
local itemScroll = 1
local changeitem = false
local searchActive = false
local hoveredButton = nil
local tooltip = ""
local tooltipTimeout = 0

-------------------- Логгирование с реальным временем --------------------
local function addLog(text, lvl) -- Изменил под вашу сигнатуру: logs передавать не нужно
    lvl = lvl or "INFO"
    local now = getKyivTime()
    local t = string.format("[%s][%s] %s", now, lvl, text)
    table.insert(logs, t)
    while #logs > 50 do table.remove(logs, 1) end
end

-------------------- Ввод данных (блокирующий UI) --------------------
-- Адаптированная safeReadInput, которая использует term.setCursor
local function safeReadInput(promptText, promptX, promptY, inputX, inputY, defaultColor, promptColor)
    g.setBackground(COLORS.bg)
    g.fill(promptX, promptY, WIDTH - promptX + 1, 1, " ") -- Очищаем строку для приглашения
    uoc.drawText(promptX, promptY, promptText, promptColor or COLORS.text)

    -- Проверяем term перед использованием setCursor
    if term and type(term) == "table" and term.setCursorPos and term.setCursorBlink then
        term.setCursorPos(inputX, inputY)
        term.setCursorBlink(true)
    else
        addLog("Ошибка: term.setCursorPos/setCursorBlink недоступны. Курсор может не мигать.", "ERROR")
    end

    local input = io.read()

    -- Выключаем мигание курсора после ввода, если term доступен
    if term and type(term) == "table" and term.setCursorBlink then
        term.setCursorBlink(false)
    end
    return input
end

-------------------- Визуал --------------------
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1,1,WIDTH,HEIGHT," ")
    g.setForeground(COLORS.text)
end

local function shadowRect(x, y, w, h)
    g.setBackground(COLORS.bar_shadow)
    g.fill(x+1, y+h, w, 1, " ")
    g.fill(x+w, y, 1, h, " ")
    g.setBackground(COLORS.bg)
end

local function drawHeader()
    uoc.drawText(3,3,"Ultimate AutoCraft",COLORS.ok,true)
    g.setBackground(COLORS.progress_fg)
    g.fill(2,4,WIDTH-2,1," ")
    shadowRect(2,4,WIDTH-2,1)
    g.setBackground(COLORS.bg)
    uoc.drawText(WIDTH-34,3,"Статус: "..craftStatus,
        (craftStatus:find("Ошибка") and COLORS.error) or COLORS.ok)
    uoc.progressBar(3,5,WIDTH-6, isCrafting and 0.9 or 0)
end

local function drawLogs()
    -- Сдвигаем логи ниже таблицы
    uoc.drawLogs(3, HEIGHT-9, logs, 4, COLORS.log) -- Скорректировано, чтобы не пересекалось с полем поиска
end

local function drawItems()
    local x, y = 2, 8
    local totalWidth = WIDTH-4
    local col_name = math.floor(totalWidth * 0.45)
    -- Увеличены для лучшего отображения чисел, но не слишком широкие
    local col_now = math.floor(totalWidth * 0.15) -- Было 0.11
    local col_hold = math.floor(totalWidth * 0.15) -- Было 0.11
    local col_once = totalWidth - col_name - col_now - col_hold

    g.setForeground(COLORS.select_active)
    g.set(x, y,      "┌"..string.rep("─",col_name).."┬"..string.rep("─",col_now).."┬"..string.rep("─",col_hold).."┬"..string.rep("─",col_once).."┐")
    g.set(x, y+1,    "│")
    g.setForeground(COLORS.ok)
    g.set(x+1, y+1,  string.format("%-"..col_name.."s"," Название"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+1, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+2, y+1, string.format("%-"..(col_now).."s"," В наличии"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+2, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+3, y+1, string.format("%-"..(col_hold).."s"," Держать"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+3, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+col_hold+4, y+1, string.format("%-"..(col_once).."s"," За раз"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+col_once+4, y+1, "│")
    g.set(x, y+2, "├"..string.rep("─",col_name).."┼"..string.rep("─",col_now).."┼"..string.rep("─",col_hold).."┼"..string.rep("─",col_once).."┤")

    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    -- Уменьшаем количество строк для отображения, чтобы логи поместились
    local perPage = HEIGHT-20 -- Изменено с 24 на 20, чтобы освободить место для логов и поиска
    for i = itemScroll, math.min(#showItems, itemScroll+perPage-1) do
        local it = showItems[i]
        local isSel = (selectedItem and dataItems[selectedItem] and it==dataItems[selectedItem]) -- Убедиться, что это тот же объект

        local row = y+2+(i-itemScroll)+1
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.setForeground(COLORS.text)
        local nameStr = unicode.sub((it.name or "<??>"), 1, col_name)
        g.set(x, row, "│")
        g.set(x+1, row, string.format("%-"..col_name.."s",nameStr))
        g.set(x+col_name+1, row, "│")
        -- Форматируем и обрезаем числа, чтобы они вписывались в колонки
        g.set(x+col_name+2, row, string.format("%"..col_now.."s",unicode.sub(tostring(tonumber(it.current) or 0), 1, col_now)))
        g.set(x+col_name+col_now+2, row, "│")
        g.set(x+col_name+col_now+3, row, string.format("%"..col_hold.."s",unicode.sub(tostring(tonumber(it.count) or 0), 1, col_hold)))
        g.set(x+col_name+col_now+col_hold+3, row, "│")
        g.set(x+col_name+col_now+col_hold+4, row, string.format("%"..col_once.."s",unicode.sub(tostring(tonumber(it.craftSize) or 0), 1, col_once)))
        g.set(x+col_name+col_now+col_hold+col_once+4, row, "│")
        g.setBackground(COLORS.bg)
    end
    -- Заполняем оставшиеся строки пустой рамкой
    for i = math.min(#showItems, itemScroll + perPage - 1) + 1, itemScroll + perPage - 1 do
        local row = y + 2 + (i - itemScroll) + 1
        g.setBackground(COLORS.bg)
        g.setForeground(COLORS.select_active)
        g.set(x, row, "│" .. string.rep(" ", totalWidth) .. "│")
    end

    local lastRow = y+perPage+3 -- Корректируем, чтобы рамка была в конце таблицы
    g.setForeground(COLORS.select_active)
    g.set(x, lastRow, "└"..string.rep("─",col_name).."┴"..string.rep("─",col_now).."┴"..string.rep("─",col_hold).."┴"..string.rep("─",col_once).."┘")
    g.setForeground(COLORS.text)

    -- Скроллбар
    if #showItems > perPage then
        local barLen = math.max(2, math.floor(perPage * perPage / #showItems))
        local barTop = y+3 + math.floor((perPage-barLen) * (itemScroll-1) / math.max(1,#showItems-perPage))
        g.setForeground(COLORS.select_active)
        for i=0,perPage do g.set(WIDTH-2, y+3+i, "│") end -- Скорректировано
        g.setForeground(COLORS.ok)
        for i=0,barLen-1 do
            g.set(WIDTH-2, barTop+i, "█")
        end
        g.setForeground(COLORS.text)
    else
        g.setBackground(COLORS.bg)
        for i=0,perPage do g.set(WIDTH-2, y+3+i, " ") end -- Очищаем, если скроллбар не нужен
    end
end

local function drawSearchBar()
    local x, y, w, h = 3, HEIGHT-13, WIDTH-6, 3
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x+1, y+1, w-2, h-2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x+w-3, y+1, (search ~= "" and "×" or " "))

    g.setForeground(COLORS.search_hint)
    local display = search
    if display == "" and not searchActive then
        display = "Поиск: введите часть названия..."
    end

    local maxDisplayLen = w-7
    if unicode.len(display) > maxDisplayLen then
        -- Обрезаем с конца, если слишком длинно, но оставляем место для курсора если активен
        display = unicode.sub(display, 1, maxDisplayLen - (searchActive and 1 or 0))
    end
    
    g.set(x+2, y+1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)

    -- Управление миганием курсора, только если поле активно и term доступен
    if searchActive then
        if term and type(term) == "table" and term.setCursorPos and term.setCursorBlink then
            term.setCursorPos(x + 2 + unicode.len(search), y + 1)
            term.setCursorBlink(true)
        else
            addLog("Ошибка: term.setCursorPos/setCursorBlink недоступны для поиска.", "ERROR")
        end
    else
        -- В противном случае, курсор выключен
        if term and type(term) == "table" and term.setCursorBlink then
            term.setCursorBlink(false)
        end
    end
end

local function drawButtons()
    local btns = {
        {name="Удалить", x=WIDTH-60, id=1, tip="Удалить выбранный предмет из списка"},
        {name="Изменить", x=WIDTH-45, id=2, tip="Изменить параметры предмета"},
        {name=isCrafting and "Остановить" or "Автокрафт", x=WIDTH-30, id=3, tip=isCrafting and "Остановить автокрафт" or "Запустить автокрафт"},
        {name="Добавить", x=WIDTH-15, id=4, tip="Добавить новый предмет (предмет в 1 слоте интерфейса ME)"},
    }
    for i,v in ipairs(btns) do
        local hover = hoveredButton == i
        uoc.animatedButton(v.x, HEIGHT-4, 12, 3, v.name, hover, COLORS.button, COLORS.buttonActive, COLORS.text)
        if hover then
            tooltip = v.tip
            tooltipTimeout = os.time()
        end
    end
end

local function drawTooltip()
    if tooltip ~= "" and os.time() - tooltipTimeout < 3 then
        local txt = " "..tooltip.." "
        local w = unicode.len(txt)
        local x, y = WIDTH-w-3, HEIGHT-7
        g.setBackground(COLORS.tooltip_bg)
        g.setForeground(COLORS.tooltip_text)
        g.fill(x, y, w+2, 3, " ")
        g.set(x+1, y+1, txt)
        g.setBackground(COLORS.bg)
        g.setForeground(COLORS.text)
    end
end

local function draw()
    clear()
    drawHeader()
    drawItems()
    drawLogs()
    drawSearchBar()
    drawButtons()
    drawTooltip()
end

-------------------- IO и действия --------------------
local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    dataItems = ok and res or {}
    for _,item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        -- Обернем вызов me.getItemsInNetwork в pcall, чтобы избежать падений, если ME лагает
        local ok_get, res_get = pcall(me.getItemsInNetwork, {id = item.id, damage = item.dmg})
        if ok_get and res_get and #res_get > 0 then
            stackList = res_get
        end

        -- Важно: Original-код использует `qty = stack.size or stack.qty or 0` и `break` после первого найденного
        -- Если у вас несколько стаков одного типа, это не будет суммировать их.
        -- Моя предыдущая версия суммировала, ваш оригинал - нет.
        -- Я оставляю логику оригинала для надежности.
        if #stackList > 0 then
            for _,stack in ipairs(stackList) do
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = stack.size or stack.qty or 0
                    break -- Берем количество только из первого найденного стака
                end
            end
        else
            -- Если getItemsInNetwork вернул пустой список или ошибку, пробуем getItemDetail
            local ok2, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok2 and d then
                qty = d.qty or d.size or 0 -- Обновляем qty, если получили детали
            end
        end
        item.current = qty
    end
end

local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, dataItems)
    if not ok then addLog("Ошибка сохранения: "..tostring(err), "ERROR") end
end

local function resetSelection()
    search = ""
    itemScroll = 1
    selectedItem = nil
end

local function addItem()
    changeitem = true
    clear()
    local promptY = HEIGHT - 10 -- Начальная Y-координата для подсказок
    uoc.drawText(10, promptY, "Вставьте предмет в 1-й слот ME интерфейса и введите параметры.", COLORS.ok)

    local name = safeReadInput("Название: ", 10, promptY + 1, 20, promptY + 1, COLORS.text, COLORS.text)
    local count_str = safeReadInput("Держать (число): ", 10, promptY + 2, 29, promptY + 2, COLORS.text, COLORS.text)
    local count = tonumber(count_str) or 0
    local craftSize_str = safeReadInput("Крафт за раз (число): ", 10, promptY + 3, 32, promptY + 3, COLORS.text, COLORS.text)
    local craftSize = tonumber(craftSize_str) or 1

    local stack = nil
    local ok_stack, res_stack = pcall(me.getStackInSlot, 1)
    if ok_stack then stack = res_stack end

    if stack then
        table.insert(dataItems, {name=name, id=stack.id, dmg=stack.dmg, count=count, craftSize=craftSize})
        save()
        addLog("Добавлен предмет: "..name,"INFO")
    else
        addLog("Ошибка: нет предмета в слоте 1!","ERROR")
    end
    changeitem = false
    resetSelection()
    draw()
end

local function editItem()
    if not selectedItem then return addLog("Не выбран предмет!","ERROR") end
    local item = dataItems[selectedItem]
    changeitem = true
    clear()
    local promptY = HEIGHT - 10 -- Начальная Y-координата для подсказок
    uoc.drawText(10, promptY, "Изменение: "..(item.name or "<??>"),COLORS.ok)

    local new_name = safeReadInput("Новое имя (Enter пропустить): ", 10, promptY + 1, 40, promptY + 1, COLORS.text, COLORS.text)
    if new_name and new_name ~= "" then
        item.name = new_name
    end

    local count_str = safeReadInput("Новое держать (число, Enter пропустить): ", 10, promptY + 2, 54, promptY + 2, COLORS.text, COLORS.text)
    local count = tonumber(count_str)
    if count_str ~= "" and count then item.count = count end

    local cs_str = safeReadInput("Новый крафт за раз (число, Enter пропустить): ", 10, promptY + 3, 55, promptY + 3, COLORS.text, COLORS.text)
    local cs = tonumber(cs_str)
    if cs_str ~= "" and cs then item.craftSize = cs end

    save()
    addLog("Изменено: "..item.name,"INFO")
    changeitem = false
    resetSelection()
    draw()
end

local function removeItem()
    if not selectedItem then return addLog("Не выбран предмет!","ERROR") end
    addLog("Удалён: "..(dataItems[selectedItem].name or "<??>"),"WARN")
    table.remove(dataItems,selectedItem)
    selectedItem = nil
    save()
    draw()
end

local function doCraft()
    isCrafting = true
    craftStatus = "Автокрафт..."
    save()
    addLog("Запущен автокрафт","INFO")
    draw()
end

local function stopCraft()
    isCrafting = false
    craftStatus = "Остановлено"
    addLog("Остановлен автокрафт","WARN")
    draw()
end

-------------------- Основной цикл автокрафта --------------------
local function autoCraftLoop()
    while true do
        if isCrafting then
            local now = computer.uptime()
            if now >= nextCraftUpdate then
                reload()
                -- Проверяем ME интерфейс в цикле, если он пропал
                if not me or not me.getCpus then
                    addLog("Ошибка: ME интерфейс недоступен для autoCraftLoop()", "ERROR")
                    craftStatus = "Ошибка ME"
                    isCrafting = false
                else
                    local cpus_list_ok, all_cpus_details = pcall(me.getCpus)
                    local available_cpus_for_this_scan = {}
                    if cpus_list_ok and all_cpus_details then
                        for _, cpu_detail in ipairs(all_cpus_details) do
                            if not cpu_detail.busy then
                                table.insert(available_cpus_for_this_scan, cpu_detail.name)
                            end
                        end
                    elseif not cpus_list_ok then
                        addLog("Ошибка getCpus: " .. tostring(all_cpus_details), "ERROR")
                    end

                    local assigned_cpus_in_this_scan = {}

                    for i, item_entry in ipairs(dataItems) do
                        local count = tonumber(item_entry.count) or 0
                        local craftSize = tonumber(item_entry.craftSize) or 1
                        local current = tonumber(item_entry.current) or 0

                        if current < count then
                            local freeCpuForThisItem = nil
                            for _, cpu_name_avail in ipairs(available_cpus_for_this_scan) do
                                local is_assigned_already = false
                                for _, assigned_name in ipairs(assigned_cpus_in_this_scan) do
                                    if cpu_name_avail == assigned_name then
                                        is_assigned_already = true
                                        break
                                    end
                                end
                                if not is_assigned_already then
                                    freeCpuForThisItem = cpu_name_avail
                                    table.insert(assigned_cpus_in_this_scan, freeCpuForThisItem)
                                    break
                                end
                            end

                            if freeCpuForThisItem then
                                local craftables_ok, craftables_data = pcall(me.getCraftables, {name=item_entry.id, damage=item_entry.dmg})
                                craftables_data = craftables_ok and craftables_data or {n=0}
                                if not craftables_ok then addLog("Ошибка getCraftables: " .. tostring(craftables_data), "ERROR") end

                                if craftables_data.n and craftables_data.n >= 1 then
                                    local delta = math.min(craftSize, count - current)
                                    if delta > 0 then
                                        -- Original-код вызывает request через pcall без self-таблицы, что может быть некорректно.
                                        -- Лучше передать таблицу как self, как в документации OpenComputers.
                                        -- Но чтобы не ломать то, что у вас работает, я оставляю вашу логику вызова craftables[1].request.
                                        local succ_req, req_res = pcall(function() return craftables[1].request(delta, false, freeCpu) end)
                                        if succ_req and req_res then
                                            craftStatus = "Крафт: "..(item_entry.name or "<??>")
                                            addLog("Крафт "..delta.."x "..(item_entry.name or "<??>").." на CPU "..tostring(freeCpu),"INFO")
                                        else
                                            craftStatus = "Ошибка: запрос крафта"
                                            addLog("Ошибка запроса крафта "..(item_entry.name or "<??>").." (" .. tostring(req_res) .. ")","ERROR")
                                        end
                                    end
                                else
                                    craftStatus = "Ошибка: нет рецепта "..(item_entry.name or "<??>")
                                    addLog("Ошибка: нет рецепта "..(item_entry.name or "<??>"),"ERROR")
                                end
                            else
                                addLog("Инфо: нет свободных CPU для "..(item_entry.name or "<?>").." в этом цикле","INFO")
                                if craftStatus ~= "Ошибка: запрос крафта" and not craftStatus:find("Крафт:") then
                                    craftStatus = "Ожидание CPU..."
                                end
                            end
                        end
                    end
                end
                save()
                nextCraftUpdate = now + 5
            end
        end
        draw()
        os.sleep(0.2)
    end
end

-------------------- События --------------------
event.listen("touch", function(_,_,x,y,_,_)
    if changeitem then return end
    hoveredButton = nil -- Сбрасываем при каждом клике

    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            hoveredButton = i
            -- Выключаем мигание курсора, если он был активен в поле поиска
            if searchActive and term and type(term) == "table" and term.setCursorBlink then
                term.setCursorBlink(false)
            end
            searchActive = false -- Выключаем активность поиска при клике на кнопку

            if i==1 then removeItem()
            elseif i==2 then editItem()
            elseif i==3 then if isCrafting then stopCraft() else doCraft() end
            elseif i==4 then addItem()
            end
            draw()
            return
        end
    end
    -- Проверка на клик по крестику или в поле поиска
    local search_x, search_y, search_w, search_h = 3, HEIGHT-13, WIDTH-6, 3
    if y >= search_y and y <= search_y + search_h - 1 then
        -- Клик по крестику
        if x >= search_x + search_w - 3 and x <= search_x + search_w - 1 and search ~= "" then
            search = ""
            addLog("Поиск очищен.", "INFO")
            searchActive = false
            -- Убедимся, что курсор выключен
            if term and type(term) == "table" and term.setCursorBlink then
                term.setCursorBlink(false)
            end
            draw()
            return
        end
        -- Клик в поле поиска
        if x >= search_x + 1 and x <= search_x + search_w - 4 then
            searchActive = true
            -- Курсор включится в drawSearchBar
            draw()
            return
        end
    end
    -- Если клик вне поля поиска, выключаем searchActive и курсор
    if searchActive then -- Если был активен, то теперь выключаем
        searchActive = false
        if term and type(term) == "table" and term.setCursorBlink then
            term.setCursorBlink(false)
        end
    end


    -- Список предметов (выбор)
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-20 -- Используем скорректированный perPage
    local itemsStartY = 11 -- Начальная Y-координата для первой строки предметов
    local itemsEndY = itemsStartY + perPage - 1

    if y >= itemsStartY and y <= itemsEndY then
        local idx_in_shown_items = y-itemsStartY+1
        if showItems[idx_in_shown_items] then
            -- Ищем индекс выбранного элемента в dataItems (исходном списке)
            local actual_selected_item_index = nil
            for k,v in ipairs(dataItems) do
                if v == showItems[idx_in_shown_items] then
                    actual_selected_item_index = k
                    break
                end
            end
            selectedItem = actual_selected_item_index
        else
            selectedItem = nil -- Если клик вне элементов, сбрасываем выделение
        end
        draw()
        return
    end
    selectedItem = nil -- Если клик вообще вне таблицы, сбрасываем выделение
    draw()
end)

event.listen("drag", function(_,_,x,y,_,_)
    -- Логика drag для hoveredButton и tooltip
    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    local currentHover = nil
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            currentHover = i
            break
        end
    end

    if currentHover ~= hoveredButton then
        hoveredButton = currentHover
        if hoveredButton then
            tooltip = ({"Удалить выбранный предмет из списка","Изменить параметры предмета",(isCrafting and "Остановить автокрафт" or "Запустить автокрафт"),"Добавить новый предмет"})[hoveredButton]
            tooltipTimeout = os.time()
        else
            tooltip = ""
        end
        draw()
    end
end)


event.listen("key_down", function(_,_,key,_,_)
    if changeitem then return end
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-20 -- Используем скорректированный perPage
    if searchActive then
        if key == 14 then -- backspace
            search = unicode.sub(search, 1, math.max(0, unicode.len(search)-1))
        elseif key == 211 then -- delete
            search = ""
        elseif key == 28 then -- enter
            searchActive = false
            -- Выключаем мигание курсора после Enter, если term доступен
            if term and type(term) == "table" and term.setCursorBlink then
                term.setCursorBlink(false)
            end
        elseif key >= 32 and key < 128 then -- Добавляем только печатные символы
            if unicode.len(search) < WIDTH-15 then -- Ограничение длины строки поиска
                search = search .. unicode.char(key)
            end
        end
        itemScroll = 1
    else
        if key == 200 then -- up
            itemScroll = math.max(1,itemScroll-1)
        elseif key == 208 then -- down
            if #showItems > perPage then
                itemScroll = math.min(#showItems-perPage+1,itemScroll+1)
            end
        end
    end
    draw()
end)

-------------------- Старт --------------------
g.setResolution(WIDTH,HEIGHT)
reload()
draw()

-- Убедимся, что курсор выключен при старте, если term доступен
if term and type(term) == "table" and term.setCursorBlink then
    term.setCursorBlink(false)
end

local ok, err = pcall(autoCraftLoop)
if not ok then
    addLog("Фатальная ошибка: "..tostring(err), "ERROR")
    draw()
    os.sleep(3)
    computer.shutdown(true)
end
