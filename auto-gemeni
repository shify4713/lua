local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local computer = require("computer")
local g = component.gpu
local me = component.me_interface
local serialization = require("serialization")

-- Пути и библиотека
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/ultimateOC.lua"

-- Проверка доступности компонентов
local function checkComponents()
    if not component.isAvailable("gpu") then
        io.stderr:write("Ошибка: GPU недоступен\n")
        os.exit(1)
    end
    if not component.isAvailable("screen") then
        io.stderr:write("Ошибка: Экран недоступен\n")
        os.exit(1)
    end
    if not component.isAvailable("me_interface") then
        io.stderr:write("Ошибка: ME-интерфейс недоступен\n")
        os.exit(1)
    end
end

-- Привязка GPU к экрану
local function bindGpu()
    local screen = component.list("screen")()
    if not screen then
        io.stderr:write("Ошибка: Не найден экран для привязки GPU\n")
        os.exit(1)
    end
    local success, err = pcall(g.bind, screen)
    if not success then
        io.stderr:write("Ошибка: Не удалось привязать GPU к экрану: " .. tostring(err) .. "\n")
        os.exit(1)
    end
    io.stdout:write("GPU привязан к экрану: " .. screen .. "\n")
    return true
end

-- Загрузка библиотеки
if not fs.exists(LIB_PATH) then
    io.stdout:write("ultimateOC.lua не найден. Скачивание...\n")
    local success, err = shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
    if not success then
        io.stderr:write("Не удалось скачать ultimateOC.lua: " .. tostring(err) .. "\n")
        os.exit(1)
    end
end
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Не удалось загрузить ultimateOC.lua: " .. tostring(uoc) .. "\n")
    uoc = {
        drawText = function(x, y, text, color)
            g.setForeground(color or 0xFFFFFF)
            g.set(x, y, text)
        end,
        roundRect = function(x, y, w, h, borderColor, bgColor)
            g.setForeground(borderColor or 0xFFFFFF)
            g.setBackground(bgColor or 0x000000)
            g.fill(x, y, w, h, " ")
        end,
        animatedButton = function(x, y, w, h, text, hover, bgColor, activeColor, textColor)
            g.setBackground(hover and activeColor or bgColor)
            g.fill(x, y, w, h, " ")
            g.setForeground(textColor)
            local textX = x + math.floor((w - unicode.len(text)) / 2)
            local textY = y + math.floor(h / 2)
            g.set(textX, textY, text)
        end,
        drawLogs = function(x, y, logs, lines, color, offset)
            g.setForeground(color)
            for i = 1, lines do
                local logIndex = #logs - lines + i - offset
                if logIndex > 0 then
                    g.set(x, y + i - 1, logs[logIndex] or "")
                end
            end
        end,
        savef = function(path, data)
            local file = io.open(path, "w")
            if file then
                file:write(serialization.serialize(data))
                file:close()
            end
        end,
        loadf = function(path)
            local file = io.open(path, "r")
            if not file then return nil end
            local content = file:read("*a")
            file:close()
            return serialization.unserialize(content)
        end,
        progressBar = function(x, y, w, progress)
            g.setBackground(0x44475a)
            g.fill(x, y, w, 1, " ")
            g.setBackground(0x50FA7B)
            g.fill(x, y, math.floor(w * progress), 1, " ")
        end
    }
end

-- Проверяем файл данных
if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {items = {}, settings = {sortCriteria = "name", sortAscending = true}})
    io.stdout:write("Создан новый файл BD.txt\n")
end

-------------------- Настройки --------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
    warning = 0xFFB86C,
}
local debug = true
local WIDTH, HEIGHT = debug and 160 or 80, 50
local ADM = {['KReaTlVNuY'] = true, ['4ertik_'] = true}
local craftStatus = "Ожидание..."
local nextCraftUpdate = 0
local isCrafting = false
local logs = {}
local debugLog1 = {}
local debugLog2 = {}
local dataItems = {}
local settings = {sortCriteria = "name", sortAscending = true}
local search = ""
local selectedItem = nil
local currentPage = 1
local changeitem = false
local guiPath = {"start"}
local posSelect = nil
local scroll = 1
local maxscroll = 1
local lastRequestedItem = nil
local lastRequestTime = 0
local buttonHover = nil

-------------------- Логгирование --------------------
local function addLog(nameTable, text, lvl)
    lvl = lvl or "INFO"
    local t = string.format("%-7s %s", "[" .. lvl .. "]", text)
    if nameTable == "ore" then
        if #debugLog1 > 19 then table.remove(debugLog1, 1) end
        table.insert(debugLog1, t)
    elseif nameTable == "recipe" then
        if #debugLog2 > 19 then table.remove(debugLog2, 1) end
        table.insert(debugLog2, t)
    else
        table.insert(logs, t)
        while #logs > 50 do table.remove(logs, 1) end
    end
end

-------------------- Вспомогательные функции --------------------
local function getFilteredAndSortedItems()
    local filtered = {}
    for i, item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            if not item.category then item.category = "Без категории" end
            table.insert(filtered, item)
        end
    end
    table.sort(filtered, function(a, b)
        local valA, valB
        if settings.sortCriteria == "name" then
            valA = unicode.lower(a.name or "")
            valB = unicode.lower(b.name or "")
        elseif settings.sortCriteria == "current" then
            valA = tonumber(a.current) or 0
            valB = tonumber(b.current) or 0
        elseif settings.sortCriteria == "count" then
            valA = tonumber(a.count) or 0
            valB = tonumber(b.count) or 0
        elseif settings.sortCriteria == "craftSize" then
            valA = tonumber(a.craftSize) or 0
            valB = tonumber(b.craftSize) or 0
        elseif settings.sortCriteria == "category" then
            valA = unicode.lower(a.category or "Без категории")
            valB = unicode.lower(b.category or "Без категории")
        end
        return settings.sortAscending and valA < valB or valA > valB
    end)
    return filtered
end

local function getItemsPerPage()
    return HEIGHT - 15
end

local function getMaxPages()
    local filteredItems = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    return math.max(1, math.ceil(#filteredItems / perPage))
end

local function clampPage()
    local maxPages = getMaxPages()
    currentPage = math.max(1, math.min(currentPage, maxPages))
end

-------------------- Визуал --------------------
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1, 1, WIDTH, HEIGHT, " ")
    g.setForeground(COLORS.text)
end

local function drawHeader()
    uoc.drawText(2, 1, "Ultimate AutoCraft", COLORS.ok)
    g.setBackground(COLORS.progress_fg)
    g.fill(1, 2, WIDTH, 1, " ")
    g.setBackground(COLORS.bg)
    uoc.drawText(2, 3, "Статус: " .. craftStatus,
        (craftStatus:find("Ошибка") and COLORS.error) or COLORS.ok)
    uoc.progressBar(2, 4, WIDTH - 4, isCrafting and 0.9 or 0)
    local maxPages = getMaxPages()
    uoc.drawText(2, 5, "Страница: " .. currentPage .. "/" .. maxPages, COLORS.text)
    if debug then
        uoc.drawLogs(WIDTH - 50, 2, debugLog1, 10, COLORS.log, 0)
        uoc.drawLogs(WIDTH - 50, 14, debugLog2, 10, COLORS.log, 0)
    end
end

local function drawItems()
    local filteredAndSortedItems = getFilteredAndSortedItems()
    local x, y = 2, 7
    local totalWidth = WIDTH - (debug and 55 or 4)
    local col_name = math.floor(totalWidth * 0.40)
    local col_category = math.floor(totalWidth * 0.20)
    local col_now = math.floor(totalWidth * 0.15)
    local col_hold = math.floor(totalWidth * 0.15)
    local col_once = totalWidth - col_name - col_category - col_now - col_hold

    g.setForeground(COLORS.select_active)
    g.set(x, y, "┌" .. string.rep("─", col_name) .. "┬" .. string.rep("─", col_category) .. "┬" .. string.rep("─", col_now) .. "┬" .. string.rep("─", col_hold) .. "┬" .. string.rep("─", col_once) .. "┐")
    g.set(x, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + 1, y + 1, string.format("%-" .. col_name .. "s", "Название"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + 1, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + 2, y + 1, string.format("%-" .. col_category .. "s", "Категория"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + 2, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + 3, y + 1, string.format("%-" .. col_now .. "s", "В наличии"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + 3, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + col_now + 4, y + 1, string.format("%-" .. col_hold .. "s", "Держать"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + col_hold + 4, y + 1, "│")
    g.setForeground(COLORS.ok)
    g.set(x + col_name + col_category + col_now + col_hold + 5, y + 1, string.format("%-" .. col_once .. "s", "За раз"))
    g.setForeground(COLORS.select_active)
    g.set(x + col_name + col_category + col_now + col_hold + col_once + 5, y + 1, "│")
    g.set(x, y + 2, "├" .. string.rep("─", col_name) .. "┼" .. string.rep("─", col_category) .. "┼" .. string.rep("─", col_now) .. "┼" .. string.rep("─", col_hold) .. "┼" .. string.rep("─", col_once) .. "┤")

    local perPage = getItemsPerPage()
    local startIndex = (currentPage - 1) * perPage + 1
    for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
        local it = filteredAndSortedItems[i]
        local isSel = (posSelect and dataItems[posSelect] and it == dataItems[posSelect])
        local row = y + 2 + (i - startIndex)
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.fill(x, row, totalWidth + 2, 1, " ")
        g.setForeground(tonumber(it.current or 0) < tonumber(it.count or 0) and COLORS.warning or COLORS.text)
        g.set(x, row, "│")
        local nameStr = tostring(it.name or "<??>")
        if unicode.len(nameStr) > col_name then
            nameStr = unicode.sub(nameStr, 1, col_name - 1) .. "…"
        end
        g.set(x + 1, row, string.format("%-" .. col_name .. "s", nameStr))
        g.set(x + col_name + 1, row, "│")
        local categoryStr = tostring(it.category or "Без категории")
        if unicode.len(categoryStr) > col_category then
            categoryStr = unicode.sub(categoryStr, 1, col_category - 1) .. "…"
        end
        g.set(x + col_name + 2, row, string.format("%-" .. col_category .. "s", categoryStr))
        g.set(x + col_name + col_category + 2, row, "│")
        local current_val = tonumber(it.current) or 0
        local current_str = tostring(current_val)
        if unicode.len(current_str) > col_now then
            current_str = unicode.sub(current_str, 1, col_now - 1) .. "…"
        end
        g.set(x + col_name + col_category + 3, row, string.format("%-" .. col_now .. "s", current_str))
        g.set(x + col_name + col_category + col_now + 3, row, "│")
        local hold_val = tonumber(it.count) or 0
        local hold_str = tostring(hold_val)
        if unicode.len(hold_str) > col_hold then
            hold_str = unicode.sub(hold_str, 1, col_hold - 1) .. "…"
        end
        g.set(x + col_name + col_category + col_now + 4, row, string.format("%-" .. col_hold .. "s", hold_str))
        g.set(x + col_name + col_category + col_now + col_hold + 4, row, "│")
        local craftSize_val = tonumber(it.craftSize) or 0
        local craftSize_str = tostring(craftSize_val)
        if unicode.len(craftSize_str) > col_once then
            craftSize_str = unicode.sub(craftSize_str, 1, col_once - 1) .. "…"
        end
        g.set(x + col_name + col_category + col_now + col_hold + 5, row, string.format("%-" .. col_once .. "s", craftSize_str))
        g.set(x + col_name + col_category + col_now + col_hold + col_once + 5, row, "│")
    end
    g.setForeground(COLORS.select_active)
    g.set(x, y + perPage + 2, "└" .. string.rep("─", col_name) .. "┴" .. string.rep("─", col_category) .. "┴" .. string.rep("─", col_now) .. "┴" .. string.rep("─", col_hold) .. "┴" .. string.rep("─", col_once) .. "┘")
    g.setForeground(COLORS.text)
end

local function drawSearchBar()
    local x, y = 2, HEIGHT - 7
    local w, h = WIDTH - (debug and 55 or 4), 3
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x + 1, y + 1, w - 2, h - 2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x + w - 3, y + 1, (search ~= "" and "×" or " "))
    g.setForeground(COLORS.search_hint)
    local display = search == "" and "Поиск: введите часть названия..." or search
    local maxlen = w - 7
    if unicode.len(display) > maxlen then
        display = unicode.sub(display, unicode.len(display) - maxlen + 1)
    end
    g.set(x + 2, y + 1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)
end

local function drawLogs()
    local logLines = 5
    uoc.drawLogs(2, HEIGHT - 4, logs, logLines, COLORS.log, 0)
end

local buttons = {
    LOGO = {ButtonIn = {"start", "go", "stop", "change"}, visible = true, x = 2, y = 1, w = 20, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Ultimate AutoCraft", action = function() end},
    GoTrue = {ButtonIn = {"start", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 24, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Автокрафт", action = function() toGui("go"); isCrafting = true; craftStatus = "Автокрафт..."; addLog("main", "INFO: Запущен автокрафт", "INFO") end},
    StopTrue = {ButtonIn = {"go"}, visible = true, x = WIDTH - 14, y = HEIGHT - 24, w = 12, h = 3, cbutton = COLORS.error, ctext = COLORS.text, text = "Остановить", action = function() toGui("stop"); isCrafting = false; craftStatus = "Остановлено"; addLog("main", "WARN: Остановлен автокрафт", "WARN") end},
    Add = {ButtonIn = {"start", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 20, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Добавить", action = function() toGui("add"); addItem() end},
    Change = {ButtonIn = {"start", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 16, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Изменить", action = function() if posSelect then toGui("change") else addLog("main", "ERROR: Не выбран предмет!", "ERROR") end end},
    Remove = {ButtonIn = {"start", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 12, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Удалить", action = function() removeItem() end},
    PrevPage = {ButtonIn = {"start", "go", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 28, w = 5, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "<-", action = function() if currentPage > 1 then currentPage = currentPage - 1; posSelect = nil end end},
    NextPage = {ButtonIn = {"start", "go", "stop"}, visible = true, x = WIDTH - 8, y = HEIGHT - 28, w = 5, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "->", action = function() if currentPage < getMaxPages() then currentPage = currentPage + 1; posSelect = nil end end},
    Sort = {ButtonIn = {"start", "go", "stop"}, visible = true, x = WIDTH - 14, y = HEIGHT - 32, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Сорт", action = function()
        local criteriaList = {"name", "category", "current", "count", "craftSize"}
        local currentCriteriaIndex = 1
        for i, v in ipairs(criteriaList) do
            if v == settings.sortCriteria then currentCriteriaIndex = i; break end
            if i == #criteriaList then currentCriteriaIndex = 0 end
        end
        currentCriteriaIndex = currentCriteriaIndex + 1
        if currentCriteriaIndex > #criteriaList then
            currentCriteriaIndex = 1
            settings.sortAscending = not settings.sortAscending
        else
            settings.sortAscending = true
        end
        settings.sortCriteria = criteriaList[currentCriteriaIndex]
        currentPage = 1
        posSelect = nil
        uoc.savef(DATA_FILE, {items = dataItems, settings = settings})
    end},
    changeName = {ButtonIn = {"change"}, visible = true, x = WIDTH - 14, y = HEIGHT - 20, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Название", action = function() changeItem("changeName") end},
    changeCategory = {ButtonIn = {"change"}, visible = true, x = WIDTH - 14, y = HEIGHT - 16, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Категория", action = function() changeItem("changeCategory") end},
    changeCount = {ButtonIn = {"change"}, visible = true, x = WIDTH - 14, y = HEIGHT - 12, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Количество", action = function() changeItem("changeCount") end},
    changeCraftSize = {ButtonIn = {"change"}, visible = true, x = WIDTH - 14, y = HEIGHT - 8, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Крафт", action = function() changeItem("changeCraftSize") end},
    changeBack = {ButtonIn = {"change"}, visible = true, x = WIDTH - 14, y = HEIGHT - 24, w = 12, h = 3, cbutton = COLORS.button, ctext = COLORS.text, text = "Назад", action = function() toGui("stop") end},
}

local function drawButtons()
    for button, btn in pairs(buttons) do
        for _, gui in ipairs(btn.ButtonIn) do
            if gui == guiPath[#guiPath] and btn.visible then
                local hover = (buttonHover == button)
                uoc.animatedButton(btn.x, btn.y, btn.w, btn.h, btn.text, hover, btn.cbutton, COLORS.buttonActive, btn.ctext)
            end
        end
    end
end

local function draw()
    if not changeitem then
        clear()
        drawHeader()
        drawItems()
        drawSearchBar()
        drawLogs()
        drawButtons()
    end
end

-------------------- IO и действия --------------------
local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    if not ok then
        addLog("main", "ERROR: Ошибка загрузки BD.txt: " .. tostring(res), "ERROR")
        dataItems = {}
        settings = {sortCriteria = "name", sortAscending = true}
    else
        res = res or {items = {}, settings = {sortCriteria = "name", sortAscending = true}}
        dataItems = res.items or {}
        settings = res.settings or {sortCriteria = "name", sortAscending = true}
    end
    clampPage()
    for _, item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        local ok_get, res_get = pcall(me.getItemsInNetwork, {id = item.id, damage = item.dmg})
        if ok_get then stackList = res_get or {} end
        if stackList and stackList.n and stackList.n > 0 then
            for _, stack in ipairs(stackList) do
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = qty + (stack.size or stack.qty or 0)
                end
            end
        else
            local ok_detail, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok_detail and d then
                qty = qty + (d.qty or d.size or 0)
            end
        end
        item.current = qty
    end
    if lastRequestedItem and computer.uptime() - lastRequestTime > 30 then
        addLog("main", "WARN: Таймаут ожидания для '" .. (lastRequestedItem.id or "<??>") .. "'. Сброс lastRequestedItem.", "WARN")
        lastRequestedItem = nil
        lastRequestTime = 0
    end
end

local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, {items = dataItems, settings = settings})
    if not ok then
        addLog("main", "ERROR: Ошибка сохранения: " .. tostring(err), "ERROR")
    end
end

local function toGui(gui, clear)
    if clear then
        guiPath[#guiPath] = nil
    end
    if guiPath[#guiPath] ~= gui then
        guiPath[#guiPath + 1] = gui
    end
    posSelect = nil
    draw()
end

local function addItem()
    changeitem = true
    clear()
    local stack = nil
    local ok_stack, res_stack = pcall(me.getStackInSlot, 1)
    if ok_stack then stack = res_stack end
    if stack then
        g.set(2, HEIGHT - 10, "Введите название предмета:")
        term.setCursor(30, HEIGHT - 10)
        local name = tostring(io.read()) or (stack.label or stack.id)
        g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
        g.set(2, HEIGHT - 10, "Введите категорию:")
        term.setCursor(30, HEIGHT - 10)
        local category = tostring(io.read()) or "Без категории"
        g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
        g.set(2, HEIGHT - 10, "Введите кол-во поддержания:")
        term.setCursor(30, HEIGHT - 10)
        local count = tonumber(io.read()) or 0
        g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
        g.set(2, HEIGHT - 10, "Введите макс. объём крафта:")
        term.setCursor(30, HEIGHT - 10)
        local craftSize = tonumber(io.read()) or 1
        g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
        table.insert(dataItems, {
            name = name,
            category = category,
            id = stack.id,
            dmg = stack.dmg,
            count = count,
            craftSize = craftSize,
            cpu = 65536
        })
        save()
        addLog("main", "INFO: Добавлен предмет: " .. name .. " (Категория: " .. category .. ")", "INFO")
        currentPage = getMaxPages()
        posSelect = nil
    else
        g.set(2, HEIGHT - 10, "Предмет не установлен в 1-й слот интерфейса")
        os.sleep(2)
        g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
    end
    changeitem = false
    toGui("stop")
end

local function changeItem(action)
    if not posSelect or not dataItems[posSelect] then
        addLog("main", "ERROR: Не выбран предмет!", "ERROR")
        changeitem = false
        toGui("stop")
        return
    end
    changeitem = true
    clear()
    local item = dataItems[posSelect]
    if action == "changeName" then
        g.set(2, HEIGHT - 10, "Введите название предмета:")
        term.setCursor(30, HEIGHT - 10)
        item.name = tostring(io.read()) or item.name
    elseif action == "changeCategory" then
        g.set(2, HEIGHT - 10, "Введите категорию:")
        term.setCursor(30, HEIGHT - 10)
        item.category = tostring(io.read()) or item.category
    elseif action == "changeCount" then
        g.set(2, HEIGHT - 10, "Введите кол-во поддержания:")
        term.setCursor(30, HEIGHT - 10)
        item.count = tonumber(io.read()) or item.count
    elseif action == "changeCraftSize" then
        g.set(2, HEIGHT - 10, "Введите макс. объём крафта:")
        term.setCursor(30, HEIGHT - 10)
        item.craftSize = tonumber(io.read()) or item.craftSize
    end
    g.fill(2, HEIGHT - 10, WIDTH, 1, " ")
    save()
    addLog("main", "INFO: Изменено: " .. item.name .. " (Категория: " .. (item.category or "Без категории") .. ")", "INFO")
    changeitem = false
    toGui("stop")
end

local function removeItem()
    if not posSelect or not dataItems[posSelect] then
        addLog("main", "ERROR: Не выбран предмет!", "ERROR")
        return
    end
    addLog("main", "WARN: Удалён: " .. (dataItems[posSelect].name or "<??>"), "WARN")
    table.remove(dataItems, posSelect)
    posSelect = nil
    clampPage()
    save()
    draw()
end

local function tryCraftItem(item)
    local count = tonumber(item.count) or 0
    local current = tonumber(item.current) or 0
    if current >= count then
        return false
    end
    if lastRequestedItem and lastRequestedItem.id == item.id and
       (item.dmg == nil or lastRequestedItem.dmg == item.dmg) then
        addLog("main", "INFO: Предмет '" .. (item.name or "<??>") .. "' недавно запрошен. Ожидание.", "INFO")
        craftStatus = "Ожидание: " .. (item.name or "<??>")
        return false
    end
    local cpus_ok, cpus = pcall(me.getCpus)
    if not cpus_ok then
        addLog("main", "ERROR: Ошибка получения CPU: " .. tostring(cpus), "ERROR")
        craftStatus = "Ошибка: ME CPU"
        return false
    end
    cpus = cpus or {}
    local freeCpu = nil
    for _, cpu in ipairs(cpus) do
        if not cpu.busy then freeCpu = cpu.name; break end
    end
    if freeCpu then
        local craftables_ok, craftables = pcall(me.getCraftables, {name = item.id, damage = item.dmg})
        if not craftables_ok then
            addLog("main", "ERROR: Ошибка получения рецептов: " .. tostring(craftables), "ERROR")
            craftStatus = "Ошибка: ME Рецепты"
            return false
        end
        craftables = craftables or {n = 0}
        if craftables.n and craftables.n >= 1 then
            local actualAE2RecipeOutput = (craftables[1].output and craftables[1].output.size) or 1
            if actualAE2RecipeOutput == 0 then actualAE2RecipeOutput = 1 end
            local quantityToRequest = tonumber(item.craftSize) or 1
            if quantityToRequest == 0 then quantityToRequest = 1 end
            local estimatedActualOutputFromAE2 = math.ceil(quantityToRequest / actualAE2RecipeOutput) * actualAE2RecipeOutput
            if current + estimatedActualOutputFromAE2 >= count then
                addLog("main", "INFO: Предмет '" .. (item.name or "<??>") .. "' достигнет цели (" .. estimatedActualOutputFromAE2 .. "x).", "INFO")
                craftStatus = "Достаточно: " .. (item.name or "<??>")
                return false
            end
            if quantityToRequest > 0 then
                local succ, req = pcall(function() return craftables[1].request(quantityToRequest, false, freeCpu) end)
                if succ and req then
                    local actualCommittedAmount = req.size or req.qty or quantityToRequest
                    craftStatus = "Крафт: " .. (item.name or "<??>")
                    addLog("main", "INFO: Запрос крафта " .. quantityToRequest .. "x " .. (item.name or "<??>") .. " на CPU " .. tostring(freeCpu), "INFO")
                    lastRequestedItem = {id = item.id, dmg = item.dmg, expectedOutput = actualCommittedAmount}
                    lastRequestTime = computer.uptime()
                    if debug then
                        local cancel, cancelmsg = req.isCanceled()
                        if not cancel and cancelmsg then
                            addLog("ore", item.name .. " не хватает ресурсов: " .. tostring(cancelmsg))
                        elseif cancelmsg then
                            addLog("ore", item.name .. " " .. tostring(cancelmsg))
                        end
                    end
                    return true
                else
                    craftStatus = "Ошибка: крафт отклонен"
                    addLog("main", "ERROR: Не удалось крафтить " .. (item.name or "<??>") .. ": " .. tostring(req), "ERROR")
                    if debug then addLog("ore", item.name .. " не хватает ресурсов: request failed") end
                    return false
                end
            else
                return false
            end
        else
            craftStatus = "Ошибка: нет рецепта " .. (item.name or "<??>")
            addLog("main", "ERROR: Нет рецепта для " .. (item.name or "<??>"), "ERROR")
            if debug then addLog("recipe", item.name .. " не имеет рецепта") end
            return false
        end
    else
        craftStatus = "Ошибка: нет свободных CPU"
        addLog("main", "ERROR: Нет свободных CPU", "ERROR")
        return false
    end
end

local function autoCraftLoop()
    while true do
        if isCrafting then
            local now = computer.uptime()
            if now >= nextCraftUpdate then
                local ok, err = pcall(reload)
                if not ok then
                    addLog("main", "ERROR: Ошибка в reload: " .. tostring(err), "ERROR")
                    craftStatus = "Ошибка: обновление данных"
                else
                    local craftMadeThisCycle = false
                    for i, item in ipairs(dataItems) do
                        if not craftMadeThisCycle then
                            if tryCraftItem(item) then
                                craftMadeThisCycle = true
                                break
                            end
                        end
                    end
                    save()
                    nextCraftUpdate = now + 30
                end
                if not changeitem then
                    draw()
                end
            end
        end
        os.sleep(0.5)
    end
end

-------------------- События --------------------
local function updateButtonHover(x, y)
    for button, btn in pairs(buttons) do
        for _, gui in ipairs(btn.ButtonIn) do
            if gui == guiPath[#guiPath] and btn.visible then
                local endX = btn.x + btn.w - 1
                local endY = btn.y + btn.h - 1
                if x >= btn.x and x <= endX and y >= btn.y and y <= endY then
                    return button
                end
            end
        end
    end
    return nil
end

event.listen("touch", function(_, _, x, y, _, nick)
    if changeitem or not ADM[nick] then return end
    -- Handle button clicks
    for button, btn in pairs(buttons) do
        for _, gui in ipairs(btn.ButtonIn) do
            if gui == guiPath[#guiPath] and btn.visible then
                local endX = btn.x + btn.w - 1
                local endY = btn.y + btn.h - 1
                if x >= btn.x and x <= endX and y >= btn.y and y <= endY then
                    addLog("main", "INFO: Клик на кнопку: " .. btn.text, "INFO")
                    btn.action()
                    buttonHover = nil
                    draw()
                    return
                end
            end
        end
    end
    -- Handle search bar clear button
    local searchX, searchY = 2, HEIGHT - 7
    local searchW, searchH = WIDTH - (debug and 55 or 4), 3
    if x >= searchX and x <= searchX + searchW - 1 and y >= searchY and y <= searchY + searchH - 1 then
        if x >= searchX + searchW - 3 and search ~= "" then
            addLog("main", "INFO: Очищен поиск", "INFO")
            search = ""
            currentPage = 1
            posSelect = nil
            buttonHover = nil
            draw()
            return
        end
    end
    -- Handle item selection
    local filteredAndSortedItems = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    local startIndex = (currentPage - 1) * perPage + 1
    local itemsStartY = 7 + 3
    local itemsEndY = itemsStartY + perPage - 1
    if x >= 2 and x <= WIDTH - (debug and 55 or 4) + 1 and y >= itemsStartY and y <= itemsEndY then
        local idxOnPage = y - itemsStartY
        local actualIndexInFiltered = startIndex + idxOnPage
        if filteredAndSortedItems[actualIndexInFiltered] then
            for k, v in ipairs(dataItems) do
                if v == filteredAndSortedItems[actualIndexInFiltered] then
                    posSelect = k
                    addLog("main", "INFO: Выбран предмет: " .. (v.name or "<??>"), "INFO")
                    break
                end
            end
        end
        buttonHover = nil
        draw()
        return
    end
    -- Clear selection if clicking outside valid areas
    posSelect = nil
    buttonHover = nil
    draw()
end)

event.listen("mouse_move", function(_, _, x, y)
    if changeitem then return end
    local newHover = updateButtonHover(x, y)
    if newHover ~= buttonHover then
        buttonHover = newHover
        draw()
    end
end)

event.listen("key_down", function(_, _, key, char, nick)
    if not ADM[nick] or changeitem then return end
    local filteredAndSortedItems = getFilteredAndSortedItems()
    local perPage = getItemsPerPage()
    local maxPages = getMaxPages()
    if key == 8 then -- Backspace
        search = unicode.sub(search, 1, -2)
    elseif key == 211 then -- Delete
        search = ""
    elseif char ~= 0 then
        local c = unicode.char(char)
        if unicode.len(c) > 0 and not c:find("[\x00-\x1F\x7F]") then
            if unicode.len(search) < WIDTH - (debug and 55 or 4) then
                search = search .. c
            end
        end
    elseif key == 200 then -- Up
        local startIndex = (currentPage - 1) * perPage + 1
        local visibleItems = {}
        for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
            table.insert(visibleItems, filteredAndSortedItems[i])
        end
        local currentSelectedItemInFiltered = nil
        if posSelect then
            for i, v in ipairs(visibleItems) do
                if v == dataItems[posSelect] then
                    currentSelectedItemInFiltered = i
                    break
                end
            end
        end
        if #visibleItems == 0 then
            posSelect = nil
        elseif currentSelectedItemInFiltered and currentSelectedItemInFiltered > 1 then
            posSelect = nil
            for k, v in ipairs(dataItems) do
                if v == visibleItems[currentSelectedItemInFiltered - 1] then
                    posSelect = k
                    break
                end
            end
        elseif #visibleItems > 0 then
            posSelect = nil
            for k, v in ipairs(dataItems) do
                if v == visibleItems[#visibleItems] then
                    posSelect = k
                    break
                end
            end
        end
    elseif key == 208 then -- Down
        local startIndex = (currentPage - 1) * perPage + 1
        local visibleItems = {}
        for i = startIndex, math.min(#filteredAndSortedItems, startIndex + perPage - 1) do
            table.insert(visibleItems, filteredAndSortedItems[i])
        end
        local currentSelectedItemInFiltered = nil
        if posSelect then
            for i, v in ipairs(visibleItems) do
                if v == dataItems[posSelect] then
                    currentSelectedItemInFiltered = i
                    break
                end
            end
        end
        if #visibleItems == 0 then
            posSelect = nil
        elseif currentSelectedItemInFiltered and currentSelectedItemInFiltered < #visibleItems then
            posSelect = nil
            for k, v in ipairs(dataItems) do
                if v == visibleItems[currentSelectedItemInFiltered + 1] then
                    posSelect = k
                    break
                end
            end
        elseif #visibleItems > 0 then
            posSelect = nil
            for k, v in ipairs(dataItems) do
                if v == visibleItems[1] then
                    posSelect = k
                    break
                end
            end
        end
    elseif key == 203 then -- Left
        if currentPage > 1 then
            currentPage = currentPage - 1
            posSelect = nil
        end
    elseif key == 205 then -- Right
        if currentPage < maxPages then
            currentPage = currentPage + 1
            posSelect = nil
        end
    end
    buttonHover = nil
    draw()
end)

-------------------- Старт --------------------
checkComponents()
bindGpu()
g.setResolution(WIDTH, HEIGHT)
addLog("main", "INFO: Программа запущена", "INFO")
local ok, err = pcall(reload)
if not ok then
    addLog("main", "ERROR: Ошибка при начальной загрузке: " .. tostring(err), "ERROR")
    draw()
    while true do os.sleep(1) end
end
draw()
local ok, err = pcall(autoCraftLoop)
if not ok then
    addLog("main", "ERROR: Фатальная ошибка в autoCraftLoop: " .. tostring(err), "ERROR")
    draw()
    while true do os.sleep(1) end
end
