local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local computer = require("computer")
local g = component.gpu
local me = component.me_interface

-- Paths and library
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/main/ultimateOC.lua"

-- Check for ultimateOC.lua library and download if not present
if not fs.exists(LIB_PATH) then
    shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
end
-- Try to load the ultimateOC.lua library
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Failed to load ultimateOC.lua: ", tostring(uoc), "\n")
    os.exit(1)
end

-- Check for data file and create if not present
if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {})
end

-------------------- Settings --------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
}
local WIDTH, HEIGHT = 110, 40 -- Window dimensions
local craftStatus = "Waiting..." -- Current crafting status
local nextCraftUpdate = 0 -- Time for next craft status update
local isCrafting = false -- Flag indicating if autocraft is active

-------------------- Variables --------------------
local logs = {} -- Array for storing logs
local dataItems = {} -- Array for storing item data
local search = "" -- Search string
local selectedItem = nil -- Index of selected item
local itemScroll = 1 -- Item list scroll position
local changeitem = false -- Flag indicating if user is in item modification mode
local searchActive = false -- Flag indicating if search field is active

-- Global variables to control the last requested craft (to prevent duplication)
local lastRequestedItem = nil -- Stores {id, dmg, expectedOutput} of the last item successfully requested for craft
local lastRequestTime = 0    -- Stores computer.uptime() when lastRequestedItem was set

-------------------- Logging --------------------
-- Function for adding logs. Time has been completely removed.
local function addLog(logs, text, lvl)
    lvl = lvl or "INFO"
    local t = string.format("[%s] %s", lvl, text) -- Removed time
    table.insert(logs, t)
    while #logs > 50 do table.remove(logs, 1) end
end

-------------------- Visuals --------------------
-- Clears the screen
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1,1,WIDTH,HEIGHT," ")
    g.setForeground(COLORS.text)
end

-- Draws a shadow for a rectangle
local function shadowRect(x, y, w, h)
    g.setBackground(COLORS.bar_shadow)
    g.fill(x+1, y+h, w, 1, " ")
    g.fill(x+w, y, 1, h, " ")
    g.setBackground(COLORS.bg)
end

-- Draws the application header
local function drawHeader()
    uoc.drawText(3,3,"Ultimate AutoCraft",COLORS.ok,true)
    g.setBackground(COLORS.progress_fg)
    g.fill(2,4,WIDTH-2,1," ")
    shadowRect(2,4,WIDTH-2,1)
    g.setBackground(COLORS.bg)
    uoc.drawText(WIDTH-34,3,"Status: "..craftStatus,
        (craftStatus:find("Error") and COLORS.error) or COLORS.ok)
    uoc.progressBar(3,5,WIDTH-6, isCrafting and 0.9 or 0)
end

-- Draws logs at the bottom of the screen, below the search bar
local function drawLogs()
    uoc.drawLogs(3, HEIGHT-9, logs, 4, COLORS.log)
end

-- Draws the item list
local function drawItems()
    local x, y = 2, 8
    local totalWidth = WIDTH-4
    local col_name = math.floor(totalWidth * 0.45)
    local col_now = math.floor(totalWidth * 0.17)
    local col_hold = math.floor(totalWidth * 0.17)
    local col_once = totalWidth - col_name - col_now - col_hold

    -- Top border of the table
    g.setForeground(COLORS.select_active)
    g.set(x, y,      "┌"..string.rep("─",col_name).."┬"..string.rep("─",col_now).."┬"..string.rep("─",col_hold).."┬"..string.rep("─",col_once).."┐")
    -- Column headers
    g.set(x, y+1,    "│")
    g.setForeground(COLORS.ok)
    g.set(x+1, y+1,  string.format("%-"..col_name.."s"," Name"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+1, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+2, y+1, string.format("%-"..(col_now).."s"," In Stock"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+2, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+3, y+1, string.format("%-"..(col_hold).."s"," Keep"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+3, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+col_hold+4, y+1, string.format("%-"..(col_once).."s"," Per Craft"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+col_once+4, y+1, "│")
    -- Header and row separator
    g.set(x, y+2, "├"..string.rep("─",col_name).."┼"..string.rep("─",col_now).."┼"..string.rep("─",col_hold).."┼"..string.rep("─",col_once).."┤")

    -- Display item rows
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24 - 7 -- Account for search bar and logs
    for i = itemScroll, math.min(#showItems, itemScroll+perPage-1) do
        local it = showItems[i]
        local isSel = (selectedItem and dataItems[selectedItem] and it==dataItems[selectedItem])
        local row = y+2+(i-itemScroll)+1
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.setForeground(COLORS.text)
        
        -- Truncate item name if too long
        local nameStr = tostring(it.name or "<??>")
        if unicode.len(nameStr) > col_name then
            nameStr = unicode.sub(nameStr, 1, col_name - 1) .. "…"
        end
        g.set(x, row, "│")
        g.set(x+1, row, string.format("%-"..col_name.."s",nameStr)) -- Name left-aligned
        g.set(x+col_name+1, row, "│")

        -- Format and truncate "In Stock"
        local current_val = tonumber(it.current) or 0
        local current_str = tostring(current_val)
        if unicode.len(current_str) > col_now then
            current_str = unicode.sub(current_str, 1, col_now - 1) .. "…"
        end
        g.set(x+col_name+2, row, string.format("%-"..(col_now).."s", current_str)) -- In Stock left-aligned
        g.set(x+col_name+col_now+2, row, "│")

        -- Format and truncate "Keep"
        local hold_val = tonumber(it.count) or 0
        local hold_str = tostring(hold_val)
        if unicode.len(hold_str) > col_hold then
            hold_str = unicode.sub(hold_str, 1, col_hold - 1) .. "…"
        end
        g.set(x+col_name+col_now+3, row, string.format("%-"..(col_hold).."s", hold_str)) -- Keep left-aligned
        g.set(x+col_name+col_now+col_hold+3, row, "│")

        -- Format and truncate "Per Craft"
        local craftSize_val = tonumber(it.craftSize) or 0
        local craftSize_str = tostring(craftSize_val)
        if unicode.len(craftSize_str) > col_once then
            craftSize_str = unicode.sub(craftSize_str, 1, col_once - 1) .. "…"
        end
        g.set(x+col_name+col_now+col_hold+4, row, string.format("%-"..(col_once).."s", craftSize_str)) -- Per Craft left-aligned
        g.set(x+col_name+col_now+col_hold+col_once+4, row, "│")
        g.setBackground(COLORS.bg)
    end

    -- Bottom border of the table
    local lastRow = y+perPage+3
    g.setForeground(COLORS.select_active)
    g.set(x, lastRow, "└"..string.rep("─",col_name).."┴"..string.rep("─",col_now).."┴"..string.rep("─",col_hold).."┴"..string.rep("─",col_once).."┘")
    g.setForeground(COLORS.text)

    -- Scrollbar
    if #showItems > perPage then
        local barLen = math.max(2, math.floor(perPage * perPage / #showItems))
        local barTop = y+3 + math.floor((perPage-barLen) * (itemScroll-1) / math.max(1,#showItems-perPage))
        g.setForeground(COLORS.select_active)
        g.set(WIDTH-2, y+3, "│")
        for i=1,perPage do
            g.set(WIDTH-2, y+2+i, "│")
        end
        g.setForeground(COLORS.ok)
        for i=0,barLen-1 do
            g.set(WIDTH-2, barTop+i, "█")
        end
        g.setForeground(COLORS.text)
    end
end

-- Draws the search bar
local function drawSearchBar()
    local x, y, w, h = 3, HEIGHT-17, WIDTH-6, 3 -- Search bar position
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x+1, y+1, w-2, h-2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x+w-3, y+1, (search ~= "" and "×" or " "))
    g.setForeground(searchActive and COLORS.ok or COLORS.search_hint)
    local display = search
    if display=="" then display = "Search: enter part of name..." end
    if searchActive then display = display .. "_" end
    local maxlen = w-7
    if unicode.len(display) > maxlen then
        display = unicode.sub(display, unicode.len(display)-maxlen+2)
    end
    g.set(x+2, y+1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)
end

-- Draws control buttons
local function drawButtons()
    local btns = {
        {name="Delete", x=WIDTH-60},
        {name="Edit", x=WIDTH-45},
        {name=isCrafting and "Stop" or "Autocraft", x=WIDTH-30},
        {name="Add", x=WIDTH-15},
    }
    for i,v in ipairs(btns) do
        local hover = false -- Tooltips removed, so hover is always false for display
        uoc.animatedButton(v.x, HEIGHT-4, 12, 3, v.name, hover, COLORS.button, COLORS.buttonActive, COLORS.text)
    end
end

-- drawTooltip() function completely removed

local function draw()
    clear()
    drawHeader()
    drawItems()
    drawSearchBar()
    drawLogs()
    drawButtons()
    -- drawTooltip() call removed
end

-------------------- IO and Actions --------------------
-- Reloads item data from file and updates their current quantity
local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    dataItems = ok and res or {}
    for _,item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        -- Try to get items from ME network by ID and Damage
        pcall(function() stackList = me.getItemsInNetwork({id = item.id, damage = item.dmg}) end)
        if stackList and stackList.n and stackList.n > 0 then
            for _,stack in ipairs(stackList) do
                -- Check if it's the specific item we need
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = qty + (stack.size or stack.qty or 0) -- Accumulate quantity
                end
            end
        else
            -- If not found in network, try to get item details directly
            local ok2, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok2 and d then
                qty = qty + (d.qty or d.size or 0)
            end
        end

        -- Account for items currently in crafting process
        local craftingJobs_ok, craftingJobs = pcall(me.getCraftingJobs)
        if craftingJobs_ok and craftingJobs and craftingJobs.n then
            for _, job in ipairs(craftingJobs) do
                -- Compare ID and Damage of the crafting job's output item with our item
                if job.output and job.output.id == item.id and
                   (item.dmg == nil or job.output.damage == item.dmg) then
                    qty = qty + (job.output.size or job.output.qty or 0) -- Add quantity being crafted
                    -- If this item was the last requested by our script, and now it's in AE2's jobs, reset the flag
                    if lastRequestedItem and lastRequestedItem.id == item.id and
                       (lastRequestedItem.dmg == nil or lastRequestedItem.dmg == item.dmg) then
                        addLog(logs, "DEBUG: Item '"..(item.name or "<??>").."' found in active ME network crafts. Resetting lastRequestedItem flag.")
                        lastRequestedItem = nil
                        lastRequestTime = 0
                    end
                end
            end
        end
        item.current = qty
    end
    -- If lastRequestedItem is still set, but enough time has passed, reset it
    -- This is for cases where a craft might have been cancelled or didn't start for some reason,
    -- and AE2 didn't add it to craftingJobs.
    if lastRequestedItem and computer.uptime() - lastRequestTime > 20 then -- 20 second timeout
        addLog(logs, "WARN: Timeout waiting for status of '"..(lastRequestedItem.id or "<??>").."'. Resetting lastRequestedItem flag.")
        lastRequestedItem = nil
        lastRequestTime = 0
    end
end

-- Saves current item data to file
local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, dataItems)
    if not ok then addLog(logs, "ERROR: Save error: "..tostring(err)) end
end

-- Resets selected item and search
local function resetSelection()
    search = ""
    itemScroll = 1
    selectedItem = nil
end

-- Adds a new item to the autocraft list
local function addItem()
    changeitem = true
    clear()
    uoc.drawText(10,HEIGHT-7,"Insert item into ME interface slot 1 and enter parameters.",COLORS.ok)
    uoc.drawText(10,HEIGHT-6,"Name: ",COLORS.text)
    term.setCursor(20,HEIGHT-6)
    local name = tostring(io.read())
    uoc.drawText(10,HEIGHT-5,"Keep (number): ",COLORS.text)
    term.setCursor(29,HEIGHT-5)
    local count = tonumber(io.read()) or 0
    uoc.drawText(10,HEIGHT-4,"Craft per batch (number): ",COLORS.text)
    term.setCursor(32,HEIGHT-4)
    local craftSize = tonumber(io.read()) or 1
    local stack = nil
    local ok, res = pcall(me.getStackInSlot, 1)
    if ok then stack = res end
    if stack then
        table.insert(dataItems, {name=name, id=stack.id, dmg=stack.dmg, count=count, craftSize=craftSize})
        save()
        addLog(logs, "INFO: Item added: "..name)
    else
        addLog(logs, "ERROR: Error: No item in slot 1!")
    end
    changeitem = false
    resetSelection()
    draw()
end

-- Edits the selected item
local function editItem()
    if not selectedItem then return addLog(logs,"ERROR: No item selected!") end
    local item = dataItems[selectedItem]
    changeitem = true
    clear()
    uoc.drawText(10,HEIGHT-7,"Editing: "..(item.name or "<??>"),COLORS.ok)
    -- Name
    uoc.drawText(10,HEIGHT-6,"New name (Enter to skip): ",COLORS.text)
    term.setCursor(40,HEIGHT-6)
    local name = tostring(io.read())
    if name and name ~= "" then
        item.name = name
    end
    -- Quantity
    uoc.drawText(10,HEIGHT-5,"New keep quantity (number, Enter to skip): ",COLORS.text)
    term.setCursor(54,HEIGHT-5)
    local countstr = tostring(io.read())
    local count = tonumber(countstr)
    if countstr ~= "" and count then item.count = count end
    -- Craft per batch
    uoc.drawText(10,HEIGHT-4,"New craft batch size (number, Enter to skip): ",COLORS.text)
    term.setCursor(55,HEIGHT-4)
    local csstr = tostring(io.read())
    local cs = tonumber(csstr)
    if csstr ~= "" and cs then item.craftSize = cs end
    save()
    addLog(logs, "INFO: Edited: "..item.name)
    changeitem = false
    resetSelection()
    draw()
end

-- Removes the selected item from the list
local function removeItem()
    if not selectedItem then return addLog(logs,"ERROR: No item selected!") end
    addLog(logs, "WARN: Removed: "..(dataItems[selectedItem].name or "<??>"))
    table.remove(dataItems,selectedItem)
    selectedItem = nil
    save()
    draw()
end

-- Starts autocraft
local function doCraft()
    isCrafting = true
    craftStatus = "Autocrafting..."
    save()
    addLog(logs,"INFO: Autocraft started")
    draw()
end

-- Stops autocraft
local function stopCraft()
    isCrafting = false
    craftStatus = "Stopped"
    addLog(logs, "WARN: Autocraft stopped")
    draw()
end

-------------------- Helper function for crafting --------------------
-- This function attempts to order a craft for a single item
local function tryCraftItem(itemToCraft)
    local count = tonumber(itemToCraft.count) or 0
    local current = tonumber(itemToCraft.current) or 0

    -- If current quantity is already sufficient (including what's being crafted), do nothing
    if current >= count then
        addLog(logs, "DEBUG: Item '"..(itemToCraft.name or "<??>").."' is already in sufficient quantity ("..current.." >= "..count..").")
        return false
    end

    addLog(logs, "DEBUG: Item needs crafting: "..(itemToCraft.name or "<??>").." (Current: "..current..", Needed: "..count..")")

    -- PRIMARY CHECK: If this item was just requested by our script, wait for confirmation
    if lastRequestedItem and lastRequestedItem.id == itemToCraft.id and
       (itemToCraft.dmg == nil or lastRequestedItem.dmg == itemToCraft.dmg) then
        addLog(logs, "INFO: Item '"..(itemToCraft.name or "<??>").."' was just requested. Waiting for ME network confirmation.")
        craftStatus = "Waiting for confirmation: "..(itemToCraft.name or "<??>")
        return false -- Do not send another request for this item yet
    end

    local cpus_ok, cpus = pcall(me.getCpus)
    if not cpus_ok then
        addLog(logs, "ERROR: Error getting CPU list: "..tostring(cpus))
        craftStatus = "Error: ME CPU"
        return false -- Craft not performed
    end
    cpus = cpus or {}

    -- Check if this specific item is already being crafted in the ME network (from any source)
    local isThisItemBeingCrafted = false
    local craftingJobs_ok, craftingJobs = pcall(me.getCraftingJobs)
    if craftingJobs_ok and craftingJobs and craftingJobs.n then
        for _, job in ipairs(craftingJobs) do
            -- Compare ID and Damage of the crafting job's output item with our item
            if job.output and job.output.id == itemToCraft.id and
               (itemToCraft.dmg == nil or job.output.damage == itemToCraft.dmg) then
                isThisItemBeingCrafted = true
                break
            end
        end
    end

    if isThisItemBeingCrafted then
        addLog(logs, "INFO: Item '"..(itemToCraft.name or "<??>").."' is already being crafted in ME network. Waiting for completion.")
        craftStatus = "Crafting in progress: "..(itemToCraft.name or "<??>")
        return false -- Do not send a new request as this item is already being crafted
    end

    local freeCpu = nil
    -- Find a free CPU
    for _,cpu in ipairs(cpus) do
        if not cpu.busy then freeCpu = cpu.name break end
    end

    if freeCpu then
        addLog(logs, "DEBUG: Found free CPU: "..tostring(freeCpu))

        local craftables_ok, craftables = pcall(me.getCraftables, {name=itemToCraft.id, damage=itemToCraft.dmg})
        if not craftables_ok then
            addLog(logs, "ERROR: Error getting recipes for ".. (itemToCraft.name or "<??>") ..": "..tostring(craftables))
            craftStatus = "Error: ME Recipes"
            return false -- Craft not performed
        end
        craftables = craftables or {n=0}

        -- Check if a recipe exists for the item
        if craftables.n and craftables.n >= 1 then
            addLog(logs, "DEBUG: Recipe found for: "..(itemToCraft.name or "<??>"))
            
            -- Get the actual output batch size from the AE2 recipe
            local actualAE2OutputBatch = (craftables[1].output and craftables[1].output.size) or 1
            if actualAE2OutputBatch == 0 then actualAE2OutputBatch = 1 end -- Avoid division by zero or strange behavior

            -- CRITICAL CHECK: If current quantity + actual AE2 batch output >= target quantity, then no craft is needed
            if current + actualAE2OutputBatch >= count then
                addLog(logs, "INFO: Item '"..(itemToCraft.name or "<??>").."' (target: "..count..", current: "..current..") will reach or exceed target quantity after next craft ("..actualAE2OutputBatch.."x). Cancelling request.")
                craftStatus = "Sufficient: "..(itemToCraft.name or "<??>")
                return false
            end

            -- Request craft with quantity equal to the actual AE2 batch output
            local deltaToRequest = actualAE2OutputBatch
            
            if deltaToRequest > 0 then
                -- Request the craft with 'deltaToRequest' quantity
                local succ, req = pcall(function() return craftables[1].request(deltaToRequest, false, freeCpu) end)
                if succ then -- Request was sent without Lua error
                    if req then -- ME system confirmed the craft (returned IItemInfo)
                        craftStatus = "Crafting: "..(itemToCraft.name or "<??>")
                        addLog(logs, "INFO: Successfully requested craft of " .. deltaToRequest .. "x " .. (itemToCraft.name or "<??>") .. " on CPU " .. tostring(freeCpu) .. ". (AE2 expected output: "..(req.size or req.qty or "??").."x)")
                        
                        -- Store the last requested item and expected output to prevent duplication
                        lastRequestedItem = {id = itemToCraft.id, dmg = itemToCraft.dmg, expectedOutput = (req.size or req.qty or deltaToRequest)}
                        lastRequestTime = computer.uptime()
                        
                        -- Immediately update current quantity to account for the expected craft
                        itemToCraft.current = itemToCraft.current + (req.size or req.qty or deltaToRequest)
                        
                        return true -- Craft successfully requested
                    else -- ME system rejected the craft (e.g., missing resources)
                        craftStatus = "Error: Craft rejected by ME"
                        addLog(logs, "ERROR: ME rejected craft of " .. deltaToRequest .. "x " .. (itemToCraft.name or "<??>") .. " (missing resources/other reason).")
                        return false -- Craft not performed
                    end
                else -- pcall error occurred when sending the request
                    craftStatus = "Error: Craft request"
                    addLog(logs, "ERROR: Failed to send craft for " .. (itemToCraft.name or "<??>") .. " (pcall error: " .. tostring(req) .. ").")
                    return false -- Craft not performed
                end
            else
                addLog(logs, "DEBUG: Delta (quantity to craft) <= 0 for: "..(itemToCraft.name or "<??>"))
                return false -- Craft not performed
            end
        else
            craftStatus = "Error: No recipe "..(itemToCraft.name or "<??>")
            addLog(logs, "ERROR: No recipe for "..(itemToCraft.name or "<??>").." (craftables.n: "..tostring(craftables.n)..")")
            return false -- Craft not performed
        end
    else
        craftStatus = "Error: No free CPU"
        addLog(logs, "ERROR: No free CPU")
        return false -- Craft not performed
    end
end

-------------------- Main autocraft loop --------------------
local function autoCraftLoop()
    while true do
        if isCrafting then
            local now = computer.uptime()
            -- Check if it's time for the next craft status update
            if now >= nextCraftUpdate then
                addLog(logs, "DEBUG: Starting autocraft cycle...")
                reload() -- Update current item quantities
                local craftMadeThisCycle = false -- Flag to craft only 1 item per cycle
                for i, item in ipairs(dataItems) do
                    -- If no craft has been made in this cycle yet
                    if not craftMadeThisCycle then
                        if tryCraftItem(item) then
                            craftMadeThisCycle = true -- Set flag that a craft was made
                            break -- Break the item loop to process only one craft at a time
                        end
                    end
                end
                save() -- Save updated data
                nextCraftUpdate = now + 15 -- Set time for next update (15 seconds)
                addLog(logs, "DEBUG: End of autocraft cycle. Craft made this cycle: " .. tostring(craftMadeThisCycle))
            end
        end
        draw() -- Redraw the interface
        os.sleep(0.2) -- Small delay to avoid CPU overload
    end
end

-------------------- Events --------------------
-- Touch (click) event handler
event.listen("touch", function(_,_,x,y,_,_)
    if changeitem then return end -- If item modification is in progress, ignore touches
    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            if i==1 then removeItem()
            elseif i==2 then editItem()
            elseif i==3 then if isCrafting then stopCraft() else doCraft() end
            elseif i==4 then addItem()
            end
            draw()
            return
        end
    end
    -- Search bar touch handling
    if y >= HEIGHT-17 and y <= HEIGHT-15 then
        searchActive = false
        -- Clear search button (cross)
        if x >= 3+(WIDTH-6)-3 and x <= 3+(WIDTH-6)-1 and search ~= "" then
            search = ""
            draw()
            return
        end
        -- Activate search field
        if x >= 3+1 and x <= 3+(WIDTH-6)-4 then
            searchActive = true
            draw()
            return
        end
    else
        searchActive = false
    end
    -- Item list selection handling
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24 - 7
    local itemsStartY = 11
    local itemsEndY = itemsStartY + perPage - 1
    if y >= itemsStartY and y <= itemsEndY then
        local idx = itemScroll + (y-itemsStartY)
        if showItems[idx] then
            for k,v in ipairs(dataItems) do
                if v == showItems[idx] then selectedItem = k break end
            end
        end
        draw()
        return
    end
    draw()
end)

-- Drag event handler (for button tooltips)
event.listen("drag", function(_,_,x,y,_,_)
    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            draw()
            return
        end
    end
    draw()
end)

-- Key press event handler
event.listen("key_down", function(_,_,key,_,_)
    if changeitem then return end -- If item modification is in progress, ignore key presses
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24 - 7
    if searchActive then
        if key == 14 then -- backspace
            search = search:sub(1,-2)
        elseif key == 211 then -- delete
            search = ""
        elseif key == 28 then -- enter
            searchActive = false
        elseif key >= 32 and key < 128 then -- Character input
            if unicode.len(search) < WIDTH-15 then
                search = search .. unicode.char(key)
            end
        end
        itemScroll = 1
    else
        if key == 200 then -- up arrow
            itemScroll = math.max(1,itemScroll-1)
        elseif key == 208 then -- down arrow
            if #showItems > perPage then
                itemScroll = math.min(#showItems-perPage+1,itemScroll+1)
            end
        end
    end
    draw()
end)

-------------------- Start --------------------
g.setResolution(WIDTH,HEIGHT) -- Set GPU resolution
reload() -- Load initial data
draw() -- Draw the interface
local ok, err = pcall(autoCraftLoop) -- Start the main autocraft loop
if not ok then
    addLog(logs, "ERROR: Fatal error: "..tostring(err))
    draw()
    os.sleep(3)
    computer.shutdown(true)
end
