local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local computer = require("computer")

-- Пути и библиотека
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/lib-gemeni"

-- Инициализация GPU и Terminal с обработкой ошибок
local g = component.gpu -- Получаем компонент GPU напрямую
local terminal          -- Эта переменная будет содержать либо реальный компонент term, либо заглушка

-- Проверяем, существует ли GPU компонент
if not g then
    (io.stderr or io.output()):write("КРИТИЧЕСКАЯ ОШИБКА: Компонент GPU (видеокарта) не найден!\n")
    (io.stderr or io.output()):write("Программа не может работать без GPU. Убедитесь, что видеокарта установлена и подключена.\n")
    -- Создаем заглушку для g, чтобы избежать дальнейших ошибок, хотя UI не будет работать
    g = {
        setBackground = function() end, fill = function() end, setForeground = function() end,
        set = function() end, setResolution = function() end, getResolution = function() return 1,1 end,
        isAvailable = function() return false end -- Заглушка всегда возвращает false
    }
    -- Также создаем заглушку для terminal, так как без GPU он точно не будет работать
    terminal = {
        setCursorPos = function(x, y) end,
        setCursorBlink = function(blink) end,
        isAvailable = function() return false end, -- Заглушка всегда возвращает false
        write = function() end,
        read = function() return "" end,
        getCursorPos = function() return 1,1 end,
        getCursorBlink = function() return false end,
        getSize = function() return 1,1 end,
        clear = function() end,
        clearLine = function() end,
        scroll = function() end
    }
else
    -- GPU есть, пытаемся загрузить терминал
    local term_load_ok, term_instance_or_error = pcall(require, "term")

    if term_load_ok and term_instance_or_error then
        if type(term_instance_or_error) == "table" and term_instance_or_error.isAvailable and term_instance_or_error:isAvailable() then
            terminal = term_instance_or_error
        else
            local err_out = io.stderr or io.output()
            err_out:write("ПРЕДУПРЕЖДЕНИЕ: Компонент terminal не удалось загрузить или он недоступен.\n")
            if not term_load_ok then
                err_out:write("Причина ошибки при загрузке: " .. tostring(term_instance_or_error) .. "\n")
            elseif type(term_instance_or_error) ~= "table" then
                 err_out:write("Причина: require('term') вернул не таблицу (тип: " .. type(term_instance_or_error) .. ").\n")
            elseif not term_instance_or_error.isAvailable then
                err_out:write("Причина: у компонента terminal отсутствует функция isAvailable().\n")
            else -- not term_instance_or_error:isAvailable()
                err_out:write("Причина: terminal:isAvailable() вернул false.\n")
            end
            err_out:write("Пользовательский интерфейс программы может быть нарушен. Проверьте настройки OpenComputers (экран, GPU).\n")

            terminal = {
                setCursorPos = function(x, y) end,
                setCursorBlink = function(blink) end,
                isAvailable = function() return false end,
                write = function() end, read = function() return "" end,
                getCursorPos = function() return 1,1 end, getCursorBlink = function() return false end,
                getSize = function() return 1,1 end, clear = function() end,
                clearLine = function() end, scroll = function() end
            }
        end
    else
        local err_out = io.stderr or io.output()
        err_out:write("ПРЕДУПРЕЖДЕНИЕ: Компонент terminal не удалось загрузить.\n")
        err_out:write("Причина ошибки при загрузке: " .. tostring(term_instance_or_error) .. "\n")
        err_out:write("Пользовательский интерфейс программы может быть нарушен. Проверьте настройки OpenComputers (экран, GPU).\n")

        terminal = {
            setCursorPos = function(x, y) end,
            setCursorBlink = function(blink) end,
            isAvailable = function() return false end,
            write = function() end, read = function() return "" end,
            getCursorPos = function() return 1,1 end, getCursorBlink = function() return false end,
            getSize = function() return 1,1 end, clear = function() end,
            clearLine = function() end, scroll = function() end
        }
    end
end


-- Загрузка или скачивание библиотеки
if not fs.exists(LIB_PATH) then
    shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
end
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Не удалось загрузить ultimateOC.lua: ", tostring(uoc), "\n")
    os.exit(1)
end

-- Инициализация ME интерфейса
local me = component.me_interface
if not me then
    io.stderr:write("Ошибка: ME интерфейс не найден. Убедитесь, что он подключен.\n")
    os.exit(1)
end

-- Создание файла данных, если он не существует
if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {})
end

-------------------- Настройки --------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
    tooltip_bg = 0x44475a,
    tooltip_text = 0xF8F8F2,
}
local WIDTH, HEIGHT = 110, 40
local craftStatus = "Ожидание..."
local nextCraftUpdate = 0 -- Используем computer.uptime()
local isCrafting = false

-------------------- Переменные --------------------
local logs = {}
local dataItems = {}
local search = ""
local selectedItem = nil
local itemScroll = 1
local changeitem = false -- Флаг для блокировки UI во время ввода
local searchActive = false
local hoveredButton = nil
local tooltip = ""
local tooltipTimeout = 0 -- Используем computer.uptime()

-------------------- Логгирование --------------------
local function addLog(text, lvl)
    uoc.addLog(logs, text, lvl)
end

-------------------- Ввод данных (блокирующий UI) --------------------
local function safeReadInput(promptText, x, y, defaultColor, promptColor)
    if terminal.isAvailable and terminal:isAvailable() then
        g.setBackground(COLORS.bg)
        g.fill(x, y, WIDTH - x + 1, 1, " ") -- Очищаем строку для нового приглашения (+1 для точной очистки)
        uoc.drawText(x, y, promptText, promptColor or COLORS.text)
        terminal.setCursorPos(x + unicode.len(promptText) + 1, y)
        terminal.setCursorBlink(true)
        io.write("\027[?25h") -- ANSI показать курсор

        local input = ""
        while true do
            g.setBackground(COLORS.bg)
            g.fill(x + unicode.len(promptText) + 1, y, WIDTH - (x + unicode.len(promptText) + 1) + 1, 1, " ") -- Очищаем область ввода
            uoc.drawText(x + unicode.len(promptText) + 1, y, input, defaultColor or COLORS.text)
            terminal.setCursorPos(x + unicode.len(promptText) + 1 + unicode.len(input), y)

            local _, _, keyCode, charStr = event.pull("key_down")
            if keyCode == 28 then -- Enter
                break
            elseif keyCode == 14 then -- Backspace
                input = unicode.sub(input, 1, math.max(0, unicode.len(input) - 1))
            elseif charStr and unicode.len(charStr) == 1 then
                input = input .. charStr
            end
        end

        io.write("\027[?25l") -- ANSI спрятать курсор
        terminal.setCursorBlink(false)
        return input
    else
        addLog("Ввод невозможен: терминал недоступен.", "WARN")
        return ""
    end
end

-------------------- Визуал --------------------
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1,1,WIDTH,HEIGHT," ")
    g.setForeground(COLORS.text)
end

local function shadowRect(x, y, w, h)
    g.setBackground(COLORS.bar_shadow)
    g.fill(x+1, y+h, w, 1, " ")
    g.fill(x+w, y, 1, h, " ")
    g.setBackground(COLORS.bg)
end

local function drawHeader()
    uoc.drawText(3,3,"Ultimate AutoCraft",COLORS.ok,true)
    g.setBackground(COLORS.progress_fg)
    g.fill(2,4,WIDTH-2,1," ")
    shadowRect(2,4,WIDTH-2,1)
    g.setBackground(COLORS.bg)
    uoc.drawText(WIDTH-34,3,"Статус: "..craftStatus,
        (craftStatus:find("Ошибка") and COLORS.error) or COLORS.ok)
    uoc.progressBar(3,5,WIDTH-6, isCrafting and 0.9 or 0)
end

local function drawLogs()
    -- Логи под строкой поиска (строка поиска занимает HEIGHT-13, HEIGHT-12, HEIGHT-11)
    -- Начинаем логи с HEIGHT-10, оставляем 4 строки для логов
    uoc.drawLogs(3, HEIGHT-10, logs, 4, COLORS.log)
end

local function drawItems()
    -- Динамически растянутая таблица
    local x, y = 2, 8 -- чуть ниже заголовка
    local totalWidth = WIDTH-4
    local col_name = math.floor(totalWidth * 0.45)
    local col_now = math.floor(totalWidth * 0.17)
    local col_hold = math.floor(totalWidth * 0.17)
    local col_once = totalWidth - col_name - col_now - col_hold

    -- Верх рамки
    g.setForeground(COLORS.select_active)
    g.set(x, y,      "┌"..string.rep("─",col_name).."┬"..string.rep("─",col_now).."┬"..string.rep("─",col_hold).."┬"..string.rep("─",col_once).."┐")
    -- Заголовки
    g.set(x, y+1,    "│")
    g.setForeground(COLORS.ok)
    g.set(x+1, y+1,  string.format("%-"..col_name.."s"," Название"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+1, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+2, y+1, string.format("%-"..(col_now).."s"," В наличии"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+2, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+3, y+1, string.format("%-"..(col_hold).."s"," Держать"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+3, y+1, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_now+col_hold+4, y+1, string.format("%-"..(col_once).."s"," За раз"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_now+col_hold+col_once+4, y+1, "│")
    -- Разделитель
    g.set(x, y+2, "├"..string.rep("─",col_name).."┼"..string.rep("─",col_now).."┼"..string.rep("─",col_hold).."┼"..string.rep("─",col_once).."┤")

    -- Строки предметов
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24 -- Количество строк, которые помещаются в таблице
    for i = itemScroll, math.min(#showItems, itemScroll+perPage-1) do
        local it = showItems[i]
        local isSel = (selectedItem and dataItems[selectedItem] and it==dataItems[selectedItem])
        local row = y+2+(i-itemScroll)+1
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.setForeground(COLORS.text)
        -- аккуратно обрезаем строку если длинная
        local nameStr = unicode.sub((it.name or "<??>"), 1, col_name)
        g.set(x, row, "│")
        g.set(x+1, row, string.format("%-"..col_name.."s",nameStr))
        g.set(x+col_name+1, row, "│")
        g.set(x+col_name+2, row, string.format("%"..col_now.."s",tonumber(it.current) or 0))
        g.set(x+col_name+col_now+2, row, "│")
        g.set(x+col_name+col_now+3, row, string.format("%"..col_hold.."s",tonumber(it.count) or 0))
        g.set(x+col_name+col_now+col_hold+3, row, "│")
        g.set(x+col_name+col_now+col_hold+4, row, string.format("%"..col_once.."s",tonumber(it.craftSize) or 0))
        g.set(x+col_name+col_now+col_hold+col_once+4, row, "│")
        g.setBackground(COLORS.bg)
    end
    -- Заполняем оставшиеся строки пустыми, если элементов меньше perPage
    for i = math.min(#showItems, itemScroll + perPage - 1) + 1, itemScroll + perPage - 1 do
        local row = y + 2 + (i - itemScroll) + 1
        g.setBackground(COLORS.bg)
        g.setForeground(COLORS.select_active)
        g.set(x, row, "│" .. string.rep(" ", totalWidth) .. "│")
    end


    -- Низ рамки
    local lastRow = y+perPage+3
    g.setForeground(COLORS.select_active)
    g.set(x, lastRow, "└"..string.rep("─",col_name).."┴"..string.rep("─",col_now).."┴"..string.rep("─",col_hold).."┴"..string.rep("─",col_once).."┘")
    g.setForeground(COLORS.text)

    -- Скроллбар если нужно
    if #showItems > perPage then
        local barLen = math.max(2, math.floor(perPage * perPage / #showItems))
        local barTop = y+3 + math.floor((perPage-barLen) * (itemScroll-1) / math.max(1,#showItems-perPage))
        g.setForeground(COLORS.select_active)
        -- Очищаем область скроллбара
        for i=0,perPage do g.set(WIDTH-2, y+3+i, "│") end
        g.setForeground(COLORS.ok)
        for i=0,barLen-1 do
            g.set(WIDTH-2, barTop+i, "█")
        end
        g.setForeground(COLORS.text)
    else -- Если скроллбар не нужен, очищаем его область
        g.setBackground(COLORS.bg)
        for i=0,perPage do g.set(WIDTH-2, y+3+i, " ") end
    end
end


local function drawSearchBar()
    local x, y, w, h = 3, HEIGHT-13, WIDTH-6, 3
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x+1, y+1, w-2, h-2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x+w-3, y+1, (search ~= "" and "×" or " ")) -- Кнопка очистки
    g.setForeground(searchActive and COLORS.ok or COLORS.search_hint)

    local display = search
    if display == "" then display = "Поиск: введите часть названия..." end

    local maxDisplayLen = w-7 -- Максимальная длина отображаемого текста
    if unicode.len(display) > maxDisplayLen then
        -- Обрезаем текст с началом в виде "..."
        display = "..." .. unicode.sub(display, unicode.len(display) - maxDisplayLen + 4)
    end

    g.set(x+2, y+1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)

    -- Устанавливаем курсор только если activeSearch и терминал доступен
    if searchActive and terminal.isAvailable() then
        terminal.setCursorPos(x + 2 + unicode.len(search), y + 1)
        terminal.setCursorBlink(true)
        io.write("\027[?25h") -- ANSI показать курсор
    else
        terminal.setCursorBlink(false)
        io.write("\027[?25l") -- ANSI спрятать курсор
    end
end

local function drawButtons()
    local btns = {
        {name="Удалить", x=WIDTH-60, tip="Удалить выбранный предмет из списка"},
        {name="Изменить", x=WIDTH-45, tip="Изменить параметры предмета"},
        {name=isCrafting and "Остановить" or "Автокрафт", x=WIDTH-30, tip=isCrafting and "Остановить автокрафт" or "Запустить автокрафт"},
        {name="Добавить", x=WIDTH-15, tip="Добавить новый предмет (предмет в 1 слоте интерфейса ME)"},
    }
    for i,v in ipairs(btns) do
        local hover = hoveredButton == i
        uoc.animatedButton(v.x, HEIGHT-4, 12, 3, v.name, hover, COLORS.button, COLORS.buttonActive, COLORS.text)
        if hover then
            tooltip = v.tip
            tooltipTimeout = computer.uptime() -- Используем computer.uptime()
        end
    end
end

local function drawTooltip()
    if tooltip ~= "" and computer.uptime() - tooltipTimeout < 3 then -- Используем computer.uptime()
        local txt = " "..tooltip.." "
        local w = unicode.len(txt)
        local x, y = WIDTH-w-3, HEIGHT-7
        g.setBackground(COLORS.tooltip_bg)
        g.setForeground(COLORS.tooltip_text)
        g.fill(x, y, w+2, 3, " ")
        g.set(x+1, y+1, txt)
        g.setBackground(COLORS.bg)
        g.setForeground(COLORS.text)
    end
end

local function draw()
    clear()
    drawHeader()
    drawItems()
    drawSearchBar() -- Отрисовываем поиск перед логами
    drawLogs()      -- Отрисовываем логи после поиска
    drawButtons()
    drawTooltip()
end

-------------------- IO и действия --------------------
local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    dataItems = ok and res or {}
    for _,item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        -- Используем getItemsInNetwork для более точного подсчета
        pcall(function() stackList = me.getItemsInNetwork({id = item.id, damage = item.dmg}) end)
        if stackList and #stackList > 0 then -- Проверяем количество элементов в таблице
            for _,stack in ipairs(stackList) do
                -- Убеждаемся, что id и damage совпадают, если damage указан
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = qty + (stack.size or stack.qty or 0) -- Суммируем количество из всех стаков
                end
            end
        else -- Если getItemsInNetwork не вернул ничего, пробуем getItemDetail (для одного стака)
            local ok2, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok2 and d then
                qty = d.qty or d.size or 0
            end
        end
        item.current = qty
    end
end

local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, dataItems)
    if not ok then addLog("Ошибка сохранения: "..tostring(err), "ERROR") end
end

local function resetSelection()
    search = ""
    itemScroll = 1
    selectedItem = nil
end

local function addItem()
    changeitem = true
    clear()
    uoc.drawText(10,HEIGHT-7,"Вставьте предмет в 1-й слот ME интерфейса и введите параметры.",COLORS.ok)
    
    local name = safeReadInput("Название: ", 10, HEIGHT-6, COLORS.text, COLORS.text)
    local count_str = safeReadInput("Держать (число): ", 10, HEIGHT-5, COLORS.text, COLORS.text)
    local count = tonumber(count_str) or 0
    local craftSize_str = safeReadInput("Крафт за раз (число): ", 10, HEIGHT-4, COLORS.text, COLORS.text)
    local craftSize = tonumber(craftSize_str) or 1
    
    local stack = nil
    local ok_stack, res_stack = pcall(me.getStackInSlot, 1)
    if ok_stack then stack = res_stack end

    if stack then
        table.insert(dataItems, {name=name, id=stack.id, dmg=stack.dmg, count=count, craftSize=craftSize})
        save()
        addLog("Добавлен предмет: "..name,"INFO")
    else
        addLog("Ошибка: нет предмета в слоте 1!","ERROR")
    end
    changeitem = false
    resetSelection()
    draw()
end

local function editItem()
    if not selectedItem then return addLog("Не выбран предмет!","ERROR") end
    local item = dataItems[selectedItem]
    changeitem = true
    clear()
    uoc.drawText(10,HEIGHT-7,"Изменение: "..(item.name or "<??>"),COLORS.ok)
    
    local new_name = safeReadInput("Новое имя (Enter пропустить): ", 10, HEIGHT-6, COLORS.text, COLORS.text)
    if new_name and new_name ~= "" then
        item.name = new_name
    end
    
    local count_str = safeReadInput("Новое держать (число, Enter пропустить): ", 10, HEIGHT-5, COLORS.text, COLORS.text)
    local count = tonumber(count_str)
    if count_str ~= "" and count then item.count = count end
    
    local cs_str = safeReadInput("Новый крафт за раз (число, Enter пропустить): ", 10, HEIGHT-4, COLORS.text, COLORS.text)
    local cs = tonumber(cs_str)
    if cs_str ~= "" and cs then item.craftSize = cs end
    
    save()
    addLog("Изменено: "..item.name,"INFO")
    changeitem = false
    resetSelection()
    draw()
end

local function removeItem()
    if not selectedItem then return addLog("Не выбран предмет!","ERROR") end
    addLog("Удалён: "..(dataItems[selectedItem].name or "<??>"),"WARN")
    table.remove(dataItems,selectedItem)
    selectedItem = nil
    save()
    draw()
end

local function doCraft()
    isCrafting = true
    craftStatus = "Автокрафт..."
    save()
    addLog("Запущен автокрафт","INFO")
    draw()
end

local function stopCraft()
    isCrafting = false
    craftStatus = "Остановлено"
    addLog("Остановлен автокрафт","WARN")
    draw()
end

-------------------- Основной цикл автокрафта --------------------
local function autoCraftLoop()
    while true do
        if isCrafting then
            local now_time = computer.uptime()
            if now_time >= nextCraftUpdate then
                reload() -- Обновляем текущие количества
                if not me or not me.getCpus then
                    addLog("Ошибка: ME интерфейс недоступен для autoCraftLoop()", "ERROR")
                    craftStatus = "Ошибка ME"
                    isCrafting = false -- Остановить крафт, если интерфейс отвалился
                else
                    local cpus_list_ok, all_cpus_details = pcall(me.getCpus) -- Получаем список CPU
                    local available_cpus_for_this_scan = {} -- Список свободных CPU для текущего сканирования
                    if cpus_list_ok and all_cpus_details then
                        for _, cpu_detail in ipairs(all_cpus_details) do
                            if not cpu_detail.busy then -- Если CPU не занят
                                table.insert(available_cpus_for_this_scan, cpu_detail.name)
                            end
                        end
                    elseif not cpus_list_ok then
                        addLog("Ошибка getCpus: " .. tostring(all_cpus_details), "ERROR")
                    end

                    local assigned_cpus_in_this_scan = {} -- CPU, которые уже были назначены в этом цикле

                    for i, item_entry in ipairs(dataItems) do
                        local count = tonumber(item_entry.count) or 0
                        local craftSize = tonumber(item_entry.craftSize) or 1
                        local current = tonumber(item_entry.current) or 0

                        if current < count then -- Если текущее количество меньше желаемого
                            local freeCpuForThisItem = nil
                            -- Ищем свободный CPU для текущего предмета
                            for _, cpu_name_avail in ipairs(available_cpus_for_this_scan) do
                                local is_assigned_already = false
                                for _, assigned_name in ipairs(assigned_cpus_in_this_scan) do
                                    if cpu_name_avail == assigned_name then
                                        is_assigned_already = true
                                        break
                                    end
                                end
                                if not is_assigned_already then
                                    freeCpuForThisItem = cpu_name_avail
                                    table.insert(assigned_cpus_in_this_scan, freeCpuForThisItem)
                                    break
                                end
                            end

                            if freeCpuForThisItem then
                                -- Пытаемся получить рецепты для крафта
                                local craftables_ok, craftables_data = pcall(me.getCraftables, {name=item_entry.id, damage=item_entry.dmg})
                                craftables_data = craftables_ok and craftables_data or {n=0}
                                if not craftables_ok then addLog("Ошибка getCraftables: " .. tostring(craftables_data), "ERROR") end

                                if craftables_data.n and craftables_data.n >= 1 then
                                    local delta = math.min(craftSize, count - current) -- Сколько нужно скрафтить
                                    if delta > 0 then
                                        if craftables_data[1] and type(craftables_data[1].request) == "function" then
                                            -- Запрашиваем крафт
                                            local succ_req, req_res = pcall(craftables_data[1].request, craftables_data[1], delta, false, freeCpuForThisItem)
                                            if succ_req and req_res then
                                                craftStatus = "Крафт: "..(item_entry.name or "<??>")
                                                addLog("Крафт "..delta.."x "..(item_entry.name or "<??>").." на CPU "..tostring(freeCpuForThisItem),"INFO")
                                                -- НЕ используем break здесь, чтобы дать шанс другим предметам в этом же цикле найти СВОБОДНЫЙ CPU.
                                                -- Logic '1 craft per 1 CPU' is handled by `assigned_cpus_in_this_scan`.
                                            else
                                                craftStatus = "Ошибка: запрос крафта"
                                                addLog("Ошибка запроса крафта "..(item_entry.name or "<??>").." (" .. tostring(req_res) .. ")","ERROR")
                                            end
                                        else
                                            craftStatus = "Ошибка: нет метода request"
                                            addLog("Ошибка: нет метода request у рецепта для "..(item_entry.name or "<??>"),"ERROR")
                                        end
                                    end
                                else
                                    craftStatus = "Ошибка: нет рецепта "..(item_entry.name or "<??>")
                                    addLog("Ошибка: нет рецепта "..(item_entry.name or "<??>"),"ERROR")
                                end
                            else
                                -- Если нет свободного CPU для этого предмета
                                addLog("Инфо: нет свободных CPU для "..(item_entry.name or "<?>").." в этом цикле","INFO")
                                -- Не переписываем статус ошибки крафта или активного крафта
                                if craftStatus ~= "Ошибка: запрос крафта" and not craftStatus:find("Крафт:") then
                                    craftStatus = "Ожидание CPU..."
                                end
                            end
                        end
                    end
                end
                save() -- Сохраняем изменения (текущие количества)
                nextCraftUpdate = now_time + 5 -- Следующая проверка через 5 секунд
            end
        end
        draw()
        os.sleep(0.2)
    end
end

-------------------- События --------------------
event.listen("touch", function(_,_,x,y,_,_)
    if changeitem then return end -- Блокируем ввод пока идет редактирование/добавление
    hoveredButton = nil -- Сбрасываем активную кнопку при клике
    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            hoveredButton = i
            if i==1 then removeItem()
            elseif i==2 then editItem()
            elseif i==3 then if isCrafting then stopCraft() else doCraft() end
            elseif i==4 then addItem()
            end
            draw()
            return
        end
    end
    -- Поле поиска (WIDTH-6 x 3, левый верхний угол 3,HEIGHT-13)
    local search_x, search_y, search_w, search_h = 3, HEIGHT-13, WIDTH-6, 3
    if y >= search_y and y <= search_y + search_h - 1 then
        -- Проверяем клик по крестику очистки
        if x >= search_x + search_w - 3 and x <= search_x + search_w - 1 and search ~= "" then
            search = ""
            addLog("Поиск очищен.", "INFO")
            draw()
            return
        end
        -- Активируем поле поиска при клике внутри него (исключая крестик)
        if x >= search_x + 1 and x <= search_x + search_w - 4 then
            searchActive = true
            draw()
            return
        end
    else
        searchActive = false -- Деактивируем поиск при клике вне поля
    end
    -- Список предметов (выбор)
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24
    local itemsStartY = 11
    local itemsEndY = itemsStartY + perPage - 1
    if y >= itemsStartY and y <= itemsEndY then
        local idx = itemScroll + (y-itemsStartY)
        if showItems[idx] then
            for k,v in ipairs(dataItems) do
                if v == showItems[idx] then selectedItem = k break end
            end
        end
        draw()
        return
    end
    draw()
end)

event.listen("drag", function(_,_,x,y,_,_)
    local btns = {
        {x=WIDTH-60, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-45, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-30, y=HEIGHT-4, w=12, h=3},
        {x=WIDTH-15, y=HEIGHT-4, w=12, h=3},
    }
    for i,btn in ipairs(btns) do
        if x >= btn.x and x <= btn.x+btn.w-1 and y >= btn.y and y <= btn.y+btn.h-1 then
            hoveredButton = i
            tooltipTimeout = computer.uptime()
            tooltip = ({"Удалить выбранный предмет из списка","Изменить параметры предмета",(isCrafting and "Остановить автокрафт" or "Запустить автокрафт"),"Добавить новый предмет"})[i]
            draw()
            return
        end
    end
    hoveredButton = nil
    tooltip = ""
    draw()
end)

event.listen("key_down", function(_,_,key,_,_)
    if changeitem then return end -- Блокируем ввод пока идет редактирование/добавление
    local showItems = {}
    for i,item in ipairs(dataItems) do
        if search == "" or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true) then
            table.insert(showItems, item)
        end
    end
    local perPage = HEIGHT-24
    if searchActive then
        if key == 14 then -- backspace
            search = unicode.sub(search, 1, math.max(0, unicode.len(search)-1))
        elseif key == 211 then -- delete
            search = ""
        elseif key == 28 then -- enter
            searchActive = false
        elseif key >= 32 and key < 128 then -- Только печатаемые символы
            if unicode.len(search) < WIDTH-15 then -- Ограничение по длине ввода в строке поиска
                search = search .. unicode.char(key)
            end
        end
        itemScroll = 1 -- Сбрасываем скролл при изменении поиска
    else
        if key == 200 then -- up
            itemScroll = math.max(1,itemScroll-1)
        elseif key == 208 then -- down
            if #showItems > perPage then
                itemScroll = math.min(#showItems-perPage+1,itemScroll+1)
            end
        end
    end
    draw()
end)

-------------------- Старт --------------------
g.setResolution(WIDTH,HEIGHT)
reload()
draw()
local ok, err = pcall(autoCraftLoop)
if not ok then
    addLog("Фатальная ошибка: "..tostring(err), "ERROR")
    draw()
    os.sleep(3)
    computer.shutdown(true)
end
