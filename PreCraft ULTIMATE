local component = require("component")
local event = require("event")
local unicode = require("unicode")
local fs = require("filesystem")
local serialization = require("serialization")

local gpu = assert(component.gpu, "GPU не найден")
local me = assert(component.me_interface, "ME интерфейс не найден")
local WIDTH, HEIGHT = 160, 50
gpu.setResolution(WIDTH, HEIGHT)

local COLOR = {
    BG = 0x232c42, FG = 0xA4FFFA, BORDER = 0x00ffff, ERROR = 0xFF4444,
    BTN_BG = 0x00AADD, BTN_TXT = 0x181824, BTN_ACTIVE = 0x26d6ff,
    SELECT_BG = 0x444477, SELECT_TXT = 0xFFFFFF, TEXT = 0xD38FFE,
    LABEL = 0xFFD580, LOG_BG = 0x222233, LOG_TXT = 0xB2B2FF,
    TAB_ON = 0x00AADD, TAB_OFF = 0x232c42, TAB_TXT = 0xFFFFFF,
    SEARCH_BG = 0x003355, SEARCH_TXT = 0xA4FFFA
}
local ADM = {['LiwMorgan']=true}
local DATA_PATH = "/home/BD.txt"
local LOG_PATH = "/home/PCU.log"

local function safeLoadTable(path)
    if not fs.exists(path) then return {} end
    local f = io.open(path, "r")
    if not f then return {} end
    local data = f:read("*a")
    f:close()
    local ok, t = pcall(function() return load("return " .. data)() end)
    return ok and t or {}
end

local function safeSaveTable(path, tbl)
    local f = io.open(path, "w")
    if not f then return end
    f:write("return " .. serialization.serialize(tbl))
    f:close()
end

local function getMoscowTime()
    local t = os.time()
    local utc = os.date("!*t", t)
    local hour = (utc.hour + 3) % 24
    return string.format("%02d:%02d:%02d", hour, utc.min, utc.sec)
end

local function addLog(logs, msg)
    logs = logs or {}
    local line = ("[%s] %s"):format(getMoscowTime(), tostring(msg))
    table.insert(logs, line)
    if #logs > 200 then table.remove(logs, 1) end
    local f = io.open(LOG_PATH, "a")
    if f then f:write(line.."\n") f:close() end
end

local function clamp(val, min, max)
    if val < min then return min end
    if val > max then return max end
    return val
end

local state = {
    tab = "main", -- main/change/log
    data = {},
    logs = {},
    redraw = true,
    select = 1,
    scroll = 1,
    filtered = {},
    maxscroll = 1,
    input = {active=false, value="", prompt="", action=nil},
    search = "",
    go = false,
    error = nil,
    buttons = {},
    tabs = {
        {label="Главная", key="main"},
        {label="Изменить", key="change"},
        {label="Логи", key="log"}
    }
}

if not fs.exists(DATA_PATH) then safeSaveTable(DATA_PATH, {}) end
if not fs.exists(LOG_PATH) then
    local f = io.open(LOG_PATH, "w") if f then f:close() end
end
state.data = safeLoadTable(DATA_PATH)
state.logs = safeLoadTable(LOG_PATH)

local function clear()
    gpu.setBackground(COLOR.BG)
    gpu.fill(1, 1, WIDTH, HEIGHT, " ")
end

local function drawBorder()
    gpu.setForeground(COLOR.BORDER)
    gpu.set(1, 1, "+"..string.rep("-", WIDTH-2).."+")
    gpu.set(1, HEIGHT, "+"..string.rep("-", WIDTH-2).."+")
    for y=2,HEIGHT-1 do
        gpu.set(1,y,"|")
        gpu.set(WIDTH,y,"|")
    end
end

local function drawTabs()
    local x = 5
    state.tabHitboxes = {}
    for i,tab in ipairs(state.tabs) do
        local active = (tab.key==state.tab)
        gpu.setBackground(active and COLOR.TAB_ON or COLOR.TAB_OFF)
        gpu.setForeground(COLOR.TAB_TXT)
        local label = "["..tab.label.."]"
        gpu.set(x,3,label)
        state.tabHitboxes[i] = {x1=x, x2=x+unicode.len(label)-1, y=3, key=tab.key}
        x = x + unicode.len(label)+3
    end
    gpu.setBackground(COLOR.BG)
end

local function drawHeader()
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.FG)
    local title = "PreCraft ULTIMATE"
    gpu.set(math.floor(WIDTH/2-unicode.len(title)/2),2,title)
end

local function drawMainTable()
    local xName, wName = 8, 40
    local xCount, wCount = xName + wName + 3, 10
    local xCraft, wCraft = xCount + wCount + 3, 10
    local xSel = xCraft + wCraft + 3
    gpu.setForeground(COLOR.LABEL)
    gpu.set(xName,6,"Название предмета")
    gpu.set(xCount,6,"Кол-во")
    gpu.set(xCraft,6,"Крафт")
    gpu.set(xSel,6,"Выбрать")
    gpu.setForeground(COLOR.TEXT)
    local filtered = {}
    for i,v in ipairs(state.data) do
        if state.search=="" or unicode.lower(v.name or ""):find(unicode.lower(state.search)) then
            table.insert(filtered, v)
        end
    end
    state.filtered = filtered
    local maxshow = 25
    state.maxscroll = math.max(1, #filtered-maxshow+1)
    state.select = clamp(state.select, 1, #filtered)
    state.scroll = clamp(state.scroll, 1, state.maxscroll)
    state.itemHitboxes = {}
    for i=state.scroll,math.min(#filtered,state.scroll+maxshow-1) do
        local v = filtered[i]
        local y = 7 + (i-state.scroll)
        gpu.setForeground(i==state.select and COLOR.SELECT_TXT or COLOR.TEXT)
        gpu.setBackground(i==state.select and COLOR.SELECT_BG or COLOR.BG)
        gpu.set(xName, y, v.name or "")
        gpu.set(xCount, y, tostring(v.count or ""))
        gpu.set(xCraft, y, tostring(v.craftSize or ""))
        gpu.set(xSel, y, i==state.select and "<--" or "")
        state.itemHitboxes[#state.itemHitboxes+1] = {x1=xName, x2=xSel+8, y=y, index=i}
    end
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.TEXT)
end

local function drawSearch()
    local w = 40
    local x = math.floor((WIDTH-w)/2)
    local y = 36
    gpu.setBackground(COLOR.SEARCH_BG)
    gpu.setForeground(COLOR.SEARCH_TXT)
    gpu.fill(x, y, w, 1, " ")
    local msg = "Поиск: "..(state.search=="" and "Для поиска введите название.." or state.search)
    if unicode.len(msg) > w-2 then msg = unicode.sub(msg, 1, w-2) end
    gpu.set(x+1, y, msg)
    state.searchBox = {x1=x, x2=x+w-1, y=y}
    gpu.setBackground(COLOR.BG)
end

local function drawButtons()
    local btns = {
        {x=10, w=18, label="[Добавить]", action="add"},
        {x=36, w=18, label="[Изменить]", action="edit"},
        {x=62, w=18, label="[Удалить]", action="del"},
        {x=WIDTH-42, w=24, label="[РЕЖИМ: "..(state.go and "GO" or "STOP").."]", action="toggleGo"},
    }
    state.buttons = btns
    for _,btn in ipairs(btns) do
        gpu.setBackground(COLOR.BTN_BG)
        gpu.setForeground(COLOR.BTN_TXT)
        gpu.fill(btn.x, 40, btn.w, 1, " ")
        gpu.set(btn.x+math.floor((btn.w-unicode.len(btn.label))/2), 40, btn.label)
        btn.y = 40
        btn.x2 = btn.x + btn.w - 1
    end
    gpu.setBackground(COLOR.BG)
end

local function drawError()
    if state.error then
        local w = math.floor(WIDTH*0.8)
        local x = math.floor((WIDTH-w)/2)
        local y = 45
        gpu.setBackground(COLOR.BG)
        gpu.setForeground(COLOR.ERROR)
        gpu.fill(x, y, w, 1, " ")
        gpu.set(x+1, y, tostring(state.error))
        gpu.setForeground(COLOR.TEXT)
    end
end

local function drawLog()
    gpu.setBackground(COLOR.LOG_BG)
    gpu.setForeground(COLOR.LOG_TXT)
    local show = 25
    local first = math.max(1, #state.logs-show+1)
    for i=first,#state.logs do
        gpu.set(8, 7+i-first, tostring(state.logs[i]))
    end
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.TEXT)
end

local function drawInput()
    if not state.input.active then return end
    local w = 50
    local x = math.floor((WIDTH-w)/2)
    local y = 30
    gpu.setBackground(COLOR.SEARCH_BG)
    gpu.fill(x, y, w, 1, " ")
    gpu.setForeground(COLOR.SEARCH_TXT)
    local msg = state.input.prompt .. " " .. state.input.value
    if unicode.len(msg) > w-2 then msg = unicode.sub(msg, 1, w-2) end
    gpu.set(x+1, y, msg)
    gpu.setBackground(COLOR.BG)
end

local function render()
    clear()
    drawBorder()
    drawHeader()
    drawTabs()
    if state.tab=="main" then
        drawMainTable()
        drawSearch()
        drawButtons()
        drawError()
        gpu.set(WIDTH-25,HEIGHT,"Всего: "..#state.data)
    elseif state.tab == "log" then
        drawLog()
    elseif state.tab == "change" and state.filtered[state.select] then
        local v = state.filtered[state.select]
        gpu.setForeground(COLOR.LABEL)
        gpu.set(30,12,"Название: "..(v.name or "?"))
        gpu.set(30,14,"Кол-во: "..tostring(v.count or "?"))
        gpu.set(30,16,"Размер крафта: "..tostring(v.craftSize or "?"))
        gpu.setForeground(COLOR.TEXT)
    end
    drawInput()
    state.redraw = false
end

local function saveAll()
    safeSaveTable(DATA_PATH, state.data)
end

local function refresh()
    state.data = safeLoadTable(DATA_PATH)
    state.redraw = true
end

local function resetInput()
    state.input = {active=false, value="", prompt="", action=nil}
end

local function askInput(prompt, action, default)
    state.input.active = true
    state.input.value = default or ""
    state.input.prompt = prompt
    state.input.action = action
end

local function commitInput()
    if not state.input.action then resetInput() return end
    local idx = state.select
    local v = state.filtered and state.filtered[idx]
    if state.input.action=="add" then
        local item = me.getStackInSlot(1)
        if not item then state.error="Положите предмет в 1-й слот интерфейса!"; resetInput(); return end
        table.insert(state.data, {name=state.input.value, id=item.id, dmg=item.dmg, count=1, craftSize=1})
        addLog(state.logs, "Добавлен предмет: "..state.input.value)
        refresh()
    elseif state.input.action=="edit" then
        if v then v.name = state.input.value end
        addLog(state.logs, "Изменено имя: "..(v and v.name or "?"))
    elseif state.input.action=="del" then
        if v then
            for i,dat in ipairs(state.data) do
                if dat==v then table.remove(state.data,i); break end
            end
            addLog(state.logs, "Удалён: "..(v.name or "?"))
        end
    elseif state.input.action=="search" then
        state.search = state.input.value
    end
    saveAll()
    resetInput()
    refresh()
end

local function handleKeyDown(_, _, _, key, chr)
    if state.input.active then
        if key==13 then commitInput()
        elseif key==8 then
            if #state.input.value > 0 then
                state.input.value = unicode.sub(state.input.value,1,unicode.len(state.input.value)-1)
            end
        elseif chr and type(chr)=="string" and unicode.len(state.input.value)<48 then
            state.input.value = state.input.value .. chr
        end
        state.redraw = true
        return
    end
    if state.tab=="main" then
        if key==200 then state.select=clamp(state.select-1,1,#state.filtered) state.redraw=true end
        if key==208 then state.select=clamp(state.select+1,1,#state.filtered) state.redraw=true end
        if key==203 and state.scroll>1 then state.scroll=state.scroll-1 state.redraw=true end
        if key==205 and state.scroll<state.maxscroll then state.scroll=state.scroll+1 state.redraw=true end
        if key==8 and #state.search > 0 then
            state.search = unicode.sub(state.search,1,unicode.len(state.search)-1)
            state.redraw=true
        elseif chr and type(chr)=="string" then
            state.search = state.search .. chr
            state.redraw=true
        end
        if key==13 then state.tab="change" state.redraw=true end
    end
    if key==27 then
        if state.tab~="main" then state.tab="main" state.redraw=true end
        resetInput()
    end
end

local function handleTouch(_, _, x, y, _, playerName)
    if not ADM[playerName] then return end
    -- Вкладки
    for _,tab in ipairs(state.tabHitboxes or {}) do
        if y == tab.y and x >= tab.x1 and x <= tab.x2 then
            state.tab = tab.key
            state.redraw = true
            return
        end
    end
    -- Поиск
    if state.tab == "main" and state.searchBox and y == state.searchBox.y and x >= state.searchBox.x1 and x <= state.searchBox.x2 then
        askInput("Поиск:", "search", state.search)
        state.redraw = true
        return
    end
    -- Кнопки
    for _,btn in ipairs(state.buttons or {}) do
        if y == btn.y and x >= btn.x and x <= btn.x2 then
            if btn.action=="add" then
                askInput("Название нового предмета:", "add", "")
            elseif btn.action=="edit" then
                askInput("Новое имя:", "edit", state.filtered[state.select] and state.filtered[state.select].name or "")
            elseif btn.action=="del" then
                askInput("Введите имя для удаления:", "del", state.filtered[state.select] and state.filtered[state.select].name or "")
            elseif btn.action=="toggleGo" then
                state.go = not state.go
                addLog(state.logs, "Режим: "..(state.go and "GO" or "STOP"))
                state.redraw=true
            end
            return
        end
    end
    -- Клик по предмету — выбор
    if state.tab == "main" then
        for _,box in ipairs(state.itemHitboxes or {}) do
            if y == box.y and x >= box.x1 and x <= box.x2 then
                state.select = box.index
                state.redraw = true
                return
            end
        end
    end
end

local function mainloop()
    event.listen("touch", handleTouch)
    event.listen("key_down", function(_, _, _, key, chr)
        if chr and type(chr)~="string" then chr = nil end
        handleKeyDown(nil, nil, nil, key, chr)
    end)
    while true do
        if state.redraw then render() end
        os.sleep(0.05)
    end
end

local ok, err = pcall(mainloop)
if not ok then
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.ERROR)
    gpu.set(2, HEIGHT-1, "Ошибка: "..tostring(err))
end
