--[[
  PreCraft ULTIMATE (2025, –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π)
  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π UI –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞ –¥–ª—è OpenComputers
  –ë–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OC
  –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤—Å—ë —Ü–≤–µ—Ç–Ω–æ–µ, –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫, –Ω–æ–ª—å –±–∞–≥–æ–≤
  –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ 1 —Ñ–∞–π–ª–µ
--]]

local component = require("component")
local event = require("event")
local fs = require("filesystem")
local serialization = require("serialization")
local unicode = require("unicode")
local term = require("term")

-- === –ú–∏–Ω–∏-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è UI ===
local UI = {}
do
  local gpu = assert(component.gpu, "GPU not found")
  UI.gpu = gpu
  function UI.setBg(bg) gpu.setBackground(bg or 0x232c42) end
  function UI.setFg(fg) gpu.setForeground(fg or 0xA4FFFA) end
  function UI.fill(x, y, w, h, char) gpu.fill(x, y, w, h, char or " ") end
  function UI.text(x, y, str, fg, bg)
    if bg then UI.setBg(bg) end
    if fg then UI.setFg(fg) end
    gpu.set(x, y, str)
    UI.setBg()
    UI.setFg()
  end
  function UI.btn(x, y, w, str, active)
    local btnBg, btnFg = active and 0x26d6ff or 0x00AADD, 0x181824
    UI.setBg(btnBg)
    UI.setFg(btnFg)
    UI.fill(x, y, w, 1)
    UI.text(x + math.floor((w-unicode.len(str))/2), y, str)
    UI.setBg()
    UI.setFg()
    return {x1=x, x2=x+w-1, y=y}
  end
  function UI.border(x, y, w, h, col)
    UI.setFg(col or 0x00ffff)
    gpu.set(x, y, "+"..string.rep("-",w-2).."+")
    gpu.set(x, y+h-1, "+"..string.rep("-",w-2).."+")
    for i=1,h-2 do
      gpu.set(x,y+i,"|")
      gpu.set(x+w-1,y+i,"|")
    end
    UI.setFg()
  end
end

-- === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
local WIDTH, HEIGHT = 160, 50
local ADM = {["shify4713"]=true, ["LiwMorgan"]=true, ["KReaTlVNuY"]=true, ["4ertik_"]=true}
local PATH = "/home/BD.txt"

-- === –¶–≤–µ—Ç–∞ ===
local COLORS = {
  bg = 0x232c42,
  fg = 0xA4FFFA,
  border = 0x00ffff,
  err = 0xFF4444,
  label = 0xFFD580,
  logbg = 0x222233,
  logtxt = 0xB2B2FF,
  tab_on = 0x00AADD, tab_off = 0x232c42, tab_txt = 0xFFFFFF,
  select_bg = 0x444477, select_fg = 0xFFFFFF,
  btn_bg = 0x00AADD, btn_fg = 0x181824, btn_act = 0x26d6ff,
  search_bg = 0x003355, search_fg = 0xA4FFFA,
  text = 0xD38FFE,
  ok = 0x00FF00, warn = 0xFFA000, bad = 0xFF4444, cpu = 0xA4FFFA, info = 0xB2B2FF
}

-- === –•—Ä–∞–Ω–∏–ª–∏—â–µ ===
local function save(tbl)
  local f = io.open(PATH, "w")
  if f then f:write("return "..serialization.serialize(tbl)); f:close() end
end
local function load()
  if not fs.exists(PATH) then return {} end
  local f = io.open(PATH, "r")
  if not f then return {} end
  local dat = f:read("*a"); f:close()
  local ok, t = pcall(function() return load("return "..dat)() end)
  return ok and t or {}
end

-- === –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
local gpu = UI.gpu
gpu.setResolution(WIDTH, HEIGHT)
local me = assert(component.me_interface, "me_interface not found")
local state = {
  tab = "main",
  data = {},
  logs = {ok={}, nores={}, norecipe={}, nocpu={}, other={}},
  redraw = true, select=1, scroll=1, search="", error=nil,
  filtered = {}, maxscroll=1,
  input = {active=false, value="", prompt="", action=nil},
  go = false,
  hitboxes = {tabs={}, items={}, btns={}, search={}}
}

-- === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
local function now()
  local t=os.date("*t")
  return string.format("%02d:%02d:%02d",t.hour,t.min,t.sec)
end
local function log(tbl,msg)
  local arr=state.logs[tbl]
  table.insert(arr, "["..now().."] "..msg)
  if #arr>8 then table.remove(arr,1) end
  state.redraw=true
end

-- === UI-–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ===
local function render()
  UI.setBg(COLORS.bg); UI.setFg(); UI.fill(1,1,WIDTH,HEIGHT)
  UI.border(1,1,WIDTH,HEIGHT,COLORS.border)
  -- Header
  UI.text(math.floor(WIDTH/2-10),2,"PreCraft ULTIMATE",COLORS.fg)
  -- Tabs
  local x=4; local tabs={{"–ì–ª–∞–≤–Ω–∞—è","main"},{"–ò–∑–º–µ–Ω–∏—Ç—å","change"},{"–õ–æ–≥–∏","log"}}
  state.hitboxes.tabs={}
  for i,tab in ipairs(tabs) do
    local active=(tab[2]==state.tab)
    UI.text(x,3,"["..tab[1].."]",COLORS.tab_txt,active and COLORS.tab_on or COLORS.tab_off)
    local len=unicode.len(tab[1])+2
    state.hitboxes.tabs[#state.hitboxes.tabs+1]={x1=x,x2=x+len-1,y=3,key=tab[2]}
    x=x+len+3
  end
  -- Main table
  if state.tab=="main" then
    -- –ó–∞–≥–æ–ª–æ–≤–∫–∏
    UI.text(8,6,"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",COLORS.label)
    UI.text(51,6,"–ö–æ–ª-–≤–æ",COLORS.label)
    UI.text(66,6,"–ö—Ä–∞—Ñ—Ç",COLORS.label)
    UI.text(79,6,"–í—ã–±—Ä–∞—Ç—å",COLORS.label)
    -- –î–∞–Ω–Ω—ã–µ
    local filtered={}
    for i,v in ipairs(state.data) do
      if state.search=="" or unicode.lower(v.name or ""):find(unicode.lower(state.search)) then
        table.insert(filtered,v)
      end
    end
    state.filtered=filtered
    local maxshow=32
    state.maxscroll=math.max(1,#filtered-maxshow+1)
    state.select=math.max(1,math.min(state.select,#filtered))
    state.scroll=math.max(1,math.min(state.scroll,state.maxscroll))
    state.hitboxes.items={}
    for i=state.scroll,math.min(#filtered,state.scroll+maxshow-1) do
      local v=filtered[i]; local y=7+(i-state.scroll)
      local sel=(i==state.select)
      UI.text(8,y,v.name or "",sel and COLORS.select_fg or COLORS.text,sel and COLORS.select_bg)
      UI.text(51,y,tostring(v.count or ""),sel and COLORS.select_fg or COLORS.text,sel and COLORS.select_bg)
      UI.text(66,y,tostring(v.craftSize or ""),sel and COLORS.select_fg or COLORS.text,sel and COLORS.select_bg)
      UI.text(79,y,sel and "<--" or "",sel and COLORS.select_fg or COLORS.text,sel and COLORS.select_bg)
      state.hitboxes.items[#state.hitboxes.items+1]={x1=8,x2=95,y=y,index=i}
    end
    -- –ü–æ–∏—Å–∫
    local sx=math.floor((WIDTH-40)/2); local sy=43
    UI.text(sx,sy,"–ü–æ–∏—Å–∫: "..(state.search=="" and "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.." or state.search),COLORS.search_fg,COLORS.search_bg)
    state.hitboxes.search={x1=sx,x2=sx+39,y=sy}
    -- –ö–Ω–æ–ø–∫–∏
    local btns={{16,47,18,"[–î–æ–±–∞–≤–∏—Ç—å]",'add'},{40,47,18,"[–ò–∑–º–µ–Ω–∏—Ç—å]",'edit'},{64,47,18,"[–£–¥–∞–ª–∏—Ç—å]",'del'},
      {WIDTH-52,47,24,"[–†–ï–ñ–ò–ú: "..(state.go and "GO" or "STOP").."]",'toggleGo'},
      {WIDTH-26,47,16,"[–ù–∞–∑–∞–¥]",'back'}}
    state.hitboxes.btns={}
    for _,b in ipairs(btns) do
      table.insert(state.hitboxes.btns,UI.btn(b[1],b[2],b[3],b[4]))
      state.hitboxes.btns[#state.hitboxes.btns].action=b[5]
    end
    -- –ö–æ–ª-–≤–æ –≤—Å–µ–≥–æ
    UI.text(WIDTH-25,HEIGHT,"–í—Å–µ–≥–æ: "..#state.data,COLORS.text)
  end
  -- –õ–æ–≥–∏
  local function drawLogs()
    local x0=WIDTH-54; local y0=3; local panelW=52
    UI.setBg(COLORS.logbg); UI.fill(x0,y0,panelW,HEIGHT-y0-1)
    UI.setBg(); UI.text(x0+2,y0,"–õ–û–ì–ò –ê–í–¢–û–ö–†–ê–§–¢–ê",COLORS.tab_on)
    UI.text(x0+2,y0+2,"[‚úî] –ö—Ä–∞—Ñ—Ç/–≥–æ—Ç–æ–≤–æ",COLORS.label)
    UI.text(x0+2,y0+5,"[‚úï] –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤",COLORS.warn)
    UI.text(x0+2,y0+8,"[!] –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞",COLORS.bad)
    UI.text(x0+2,y0+11,"[üïí] –ù–µ—Ç CPU",COLORS.cpu)
    UI.text(x0+2,y0+14,"[i] –ü—Ä–æ—á–µ–µ",COLORS.info)
    local ofs=function(arr,dy,col)
      for i=math.max(1,#arr-6+1),#arr do
        UI.text(x0+4,y0+dy+(i-(#arr-6)),arr[i],col)
      end
    end
    ofs(state.logs.ok,2,COLORS.ok)
    ofs(state.logs.nores,5,COLORS.warn)
    ofs(state.logs.norecipe,8,COLORS.bad)
    ofs(state.logs.nocpu,11,COLORS.cpu)
    ofs(state.logs.other,14,COLORS.info)
    UI.setBg()
  end
  if state.tab=="main" or state.tab=="log" then drawLogs() end
  -- –í–∫–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if state.tab=="change" and state.filtered[state.select] then
    local v=state.filtered[state.select]
    UI.text(30,12,"–ù–∞–∑–≤–∞–Ω–∏–µ: "..(v.name or "?"),COLORS.label)
    UI.text(30,14,"–ö–æ–ª-–≤–æ: "..tostring(v.count or "?"),COLORS.label)
    UI.text(30,16,"–†–∞–∑–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞: "..tostring(v.craftSize or "?"),COLORS.label)
    local chbtns={{40,32,24,"–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",'name'},{68,32,18,"–ò–∑–º. –∫–æ–ª-–≤–æ",'count'},
      {88,32,18,"–ò–∑–º. –∫—Ä–∞—Ñ—Ç",'craft'},{108,32,18,"–ù–∞–∑–∞–¥",'main'}}
    for _,b in ipairs(chbtns) do
      UI.btn(b[1],b[2],b[3],b[4])
    end
    drawLogs()
  end
  -- –ü–æ–ª–µ –≤–≤–æ–¥–∞
  if state.input.active then
    local w=50; local x=math.floor((WIDTH-w)/2)
    UI.setBg(COLORS.search_bg); UI.fill(x,30,w,1); UI.setBg()
    UI.text(x+1,30,state.input.prompt.." "..state.input.value,COLORS.search_fg)
  end
  -- –û—à–∏–±–∫–∞
  if state.error then
    UI.text(2,HEIGHT-1,"–û—à–∏–±–∫–∞: "..tostring(state.error),COLORS.err)
  end
  state.redraw=false
end

-- === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π ===
local function askInput(prompt,action,default)
  state.input.active=true; state.input.value=default or ""; state.input.prompt=prompt; state.input.action=action; state.redraw=true
end
local function resetInput() state.input={active=false,value="",prompt="",action=nil} end
local function commitInput()
  local idx=state.select; local v=state.filtered and state.filtered[idx]
  if state.input.action=="name" then if v then v.name=state.input.value end; log("other","–ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è: "..(v and v.name or "?"))
  elseif state.input.action=="count" then if v then v.count=tonumber(state.input.value) end; log("other","–ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: "..(v and v.count or "?"))
  elseif state.input.action=="craft" then if v then v.craftSize=tonumber(state.input.value) end; log("other","–ò–∑–º–µ–Ω—ë–Ω —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞: "..(v and v.craftSize or "?"))
  elseif state.input.action=="search" then state.search=state.input.value
  elseif state.input.action=="add" then
    local item=me.getStackInSlot(1)
    if not item then state.error="–ü–æ–ª–æ–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ 1-–π —Å–ª–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!"; resetInput(); return end
    table.insert(state.data,{name=state.input.value,id=item.id,dmg=item.dmg,count=1,craftSize=1})
    log("ok","–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: "..state.input.value)
  end
  save(state.data); resetInput(); state.redraw=true
end

local function handleKeyDown(_,_,char,code,playerName)
  if not ADM[playerName or ""] then return end
  if state.input.active then
    if code==13 then commitInput()
    elseif code==8 then if #state.input.value>0 then state.input.value=unicode.sub(state.input.value,1,unicode.len(state.input.value)-1) end
    elseif char and type(char)=="string" and unicode.len(state.input.value)<48 then
      state.input.value=state.input.value..char
    end
    state.redraw=true
  end
end

local function handleTouch(_,_,x,y,btn,playerName)
  if not ADM[playerName or ""] then return end
  -- Tabs
  for _,box in ipairs(state.hitboxes.tabs or {}) do
    if y==box.y and x>=box.x1 and x<=box.x2 then state.tab=box.key; state.redraw=true; return end
  end
  -- –ü–æ–∏—Å–∫
  if state.tab=="main" and state.hitboxes.search and y==state.hitboxes.search.y and x>=state.hitboxes.search.x1 and x<=state.hitboxes.search.x2 then
    askInput("–ü–æ–∏—Å–∫:","search",state.search); return
  end
  -- –ö–Ω–æ–ø–∫–∏
  for _,b in ipairs(state.hitboxes.btns or {}) do
    if y==b.y and x>=b.x1 and x<=b.x2 then
      if b.action=="add" then askInput("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:","add","")
      elseif b.action=="edit" then state.tab="change"; state.redraw=true
      elseif b.action=="del" then if state.filtered[state.select] then table.remove(state.data,state.select); log("other","–£–¥–∞–ª—ë–Ω: "..(state.filtered[state.select].name or "?")); save(state.data); state.redraw=true end
      elseif b.action=="toggleGo" then state.go=not state.go; log("other","–†–µ–∂–∏–º: "..(state.go and "GO" or "STOP")); state.redraw=true
      elseif b.action=="back" then state.tab="main"; state.redraw=true
      end
      return
    end
  end
  -- –ü—Ä–µ–¥–º–µ—Ç—ã
  if state.tab=="main" then
    for _,box in ipairs(state.hitboxes.items or {}) do
      if y==box.y and x>=box.x1 and x<=box.x2 then state.select=box.index; state.redraw=true; return end
    end
  end
  -- –ò–∑–º–µ–Ω–∏—Ç—å (–∫–Ω–æ–ø–∫–∏)
  if state.tab=="change" then
    local chbtns={{40,32,24,'name'},{68,32,18,'count'},{88,32,18,'craft'},{108,32,18,'main'}}
    for _,b in ipairs(chbtns) do
      if y==32 and x>=b[1] and x<=b[1]+b[2]-1 then
        if b[4]=="main" then state.tab="main"; state.redraw=true
        else
          local v=state.filtered[state.select]
          local current=(b[4]=="name" and v and v.name) or (b[4]=="count" and v and v.count) or (b[4]=="craft" and v and v.craftSize) or ""
          askInput("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",b[4],tostring(current or ""))
        end
        return
      end
    end
  end
end

local function handleScroll(_,_,_,_,dir,playerName)
  if not ADM[playerName or ""] then return end
  if state.tab=="main" then
    if dir==1 and state.scroll>1 then state.scroll=state.scroll-1; state.redraw=true
    elseif dir==-1 and state.scroll<state.maxscroll then state.scroll=state.scroll+1; state.redraw=true
    end
  end
end

-- === –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç ===
local function checkCraft()
  if not state.go then return end
  for _,v in ipairs(state.data) do
    local itemsMe=me.getItemDetail({id=v.id,dmg=v.dmg})
    local qty=itemsMe and itemsMe.basic().qty or 0
    local needAll=(v.count or 0)-qty
    if needAll>0 then
      local craftables=me.getCraftables({name=v.id,damage=v.dmg})
      if craftables.n and craftables.n>=1 then
        local cpus=me.getCpus(); local maxCpu=0
        for _,cpu in ipairs(cpus) do if cpu.storage>maxCpu and not cpu.busy then maxCpu=cpu.storage end end
        if maxCpu==0 then log("nocpu","–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö CPU –¥–ª—è "..(v.name or "?")); goto next end
        local count=math.min(needAll,maxCpu,v.craftSize or maxCpu)
        local ok,msg=pcall(function() return craftables[1].request(count,false) end)
        if ok then log("ok","–ö—Ä–∞—Ñ—Ç: "..(v.name or "?").." x"..count)
        else
          if tostring(msg):find("missing resources") then log("nores","–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è "..(v.name or "?"))
          elseif tostring(msg):find("no recipe") then log("norecipe","–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ "..(v.name or "?"))
          else log("other","–û—à–∏–±–∫–∞: "..tostring(msg)) end
        end
        os.sleep(0.1)
      else log("norecipe","–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ "..(v.name or "?")) end
    end ::next::
  end
end

-- === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
local function mainloop()
  state.data=load()
  event.listen("key_down",handleKeyDown)
  event.listen("touch",handleTouch)
  event.listen("scroll",handleScroll)
  local lastCheck=os.clock()
  while true do
    if state.redraw then render() end
    if state.go and os.clock()-lastCheck>6 then checkCraft(); lastCheck=os.clock() end
    os.sleep(0.05)
  end
end

local ok,err=pcall(mainloop)
if not ok then UI.text(2,HEIGHT-1,"–û—à–∏–±–∫–∞: "..tostring(err),COLORS.err) end
