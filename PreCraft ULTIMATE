local component = require("component")
local event = require("event")
local unicode = require("unicode")
local fs = require("filesystem")
local serialization = require("serialization")
local term = require("term")

local gpu = assert(component.gpu, "GPU not found")
local me = assert(component.me_interface, "ME interface not found")

-- === SETTINGS ===
local ADM = {['LiwMorgan']=true, ['KReaTlVNuY']=true, ['4ertik_']=true}
local WIDTH, HEIGHT = 160, 50
local DATA_PATH = "/home/BD.txt"

-- === COLORS ===
local COLOR = {
    BG = 0x232c42, FG = 0xA4FFFA, BORDER = 0x00ffff, ERROR = 0xFF4444,
    BTN_BG = 0x00AADD, BTN_TXT = 0x181824, BTN_ACTIVE = 0x26d6ff,
    SELECT_BG = 0x444477, SELECT_TXT = 0xFFFFFF, TEXT = 0xD38FFE,
    LABEL = 0xFFD580, LOG_BG = 0x222233, LOG_TXT = 0xB2B2FF,
    TAB_ON = 0x00AADD, TAB_OFF = 0x232c42, TAB_TXT = 0xFFFFFF,
    SEARCH_BG = 0x003355, SEARCH_TXT = 0xA4FFFA
}

if not fs.exists(DATA_PATH) then
    local f = io.open(DATA_PATH, "w") f:write("return {}") f:close()
end
gpu.setResolution(WIDTH, HEIGHT)

-- === STATE ===
local state = {
    tab = "main",
    data = {},
    logs = {success={}, nores={}, norecipe={}, nocpu={}, other={}},
    redraw = true,
    select = 1, scroll = 1, filtered = {},
    maxscroll = 1, search = "",
    input = {active=false, value="", prompt="", action=nil},
    go = false, error = nil,
    buttons = {}, tabHitboxes = {}, itemHitboxes = {},
    searchBox = {}
}

-- === UTILS ===
local function saveTable(path, tbl)
    local f = io.open(path, "w")
    if not f then return end
    f:write("return " .. serialization.serialize(tbl))
    f:close()
end
local function loadTable(path)
    if not fs.exists(path) then return {} end
    local f = io.open(path, "r")
    if not f then return {} end
    local data = f:read("*a")
    f:close()
    local ok, t = pcall(function() return load("return "..data)() end)
    return ok and t or {}
end
local function clamp(val, min, max)
    return math.max(min, math.min(val, max))
end
local function now()
    local t = os.date("*t")
    return string.format("%02d:%02d:%02d", t.hour, t.min, t.sec)
end
local function log(tbl, msg)
    local arr = state.logs[tbl]
    table.insert(arr, "["..now().."] "..msg)
    if #arr > 8 then table.remove(arr, 1) end
    state.redraw = true
end

-- === GUI DRAW ===
local function clear() gpu.setBackground(COLOR.BG) gpu.fill(1,1,WIDTH,HEIGHT," ") end
local function drawBorder()
    gpu.setForeground(COLOR.BORDER)
    gpu.set(1,1,"+"..string.rep("-",WIDTH-2).."+")
    gpu.set(1,HEIGHT,"+"..string.rep("-",WIDTH-2).."+")
    for y=2,HEIGHT-1 do gpu.set(1,y,"|") gpu.set(WIDTH,y,"|") end
end
local function drawTabs()
    local x = 5
    local tabs = {{"–ì–ª–∞–≤–Ω–∞—è","main"},{"–ò–∑–º–µ–Ω–∏—Ç—å","change"},{"–õ–æ–≥–∏","log"}}
    state.tabHitboxes = {}
    for i,tab in ipairs(tabs) do
        local active = (tab[2]==state.tab)
        gpu.setBackground(active and COLOR.TAB_ON or COLOR.TAB_OFF)
        gpu.setForeground(COLOR.TAB_TXT)
        local label = "["..tab[1].."]"
        gpu.set(x,3,label)
        state.tabHitboxes[i] = {x1=x, x2=x+unicode.len(label)-1, y=3, key=tab[2]}
        x = x + unicode.len(label)+3
    end
    gpu.setBackground(COLOR.BG)
end
local function drawHeader()
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.FG)
    local title = "PreCraft ULTIMATE"
    gpu.set(math.floor(WIDTH/2-unicode.len(title)/2),2,title)
end
local function drawMainTable()
    local xName, wName = 8, 40
    local xCount, wCount = xName+wName+3, 10
    local xCraft, wCraft = xCount+wCount+3, 10
    local xSel = xCraft+wCraft+3
    gpu.setForeground(COLOR.LABEL)
    gpu.set(xName,6,"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
    gpu.set(xCount,6,"–ö–æ–ª-–≤–æ")
    gpu.set(xCraft,6,"–ö—Ä–∞—Ñ—Ç")
    gpu.set(xSel,6,"–í—ã–±—Ä–∞—Ç—å")
    gpu.setForeground(COLOR.TEXT)
    local filtered = {}
    for i,v in ipairs(state.data) do
        if state.search=="" or unicode.lower(v.name or ""):find(unicode.lower(state.search)) then
            table.insert(filtered, v)
        end
    end
    state.filtered = filtered
    local maxshow = 32
    state.maxscroll = math.max(1, #filtered-maxshow+1)
    state.select = clamp(state.select, 1, #filtered)
    state.scroll = clamp(state.scroll, 1, state.maxscroll)
    state.itemHitboxes = {}
    for i=state.scroll,math.min(#filtered,state.scroll+maxshow-1) do
        local v = filtered[i]
        local y = 7 + (i-state.scroll)
        gpu.setForeground(i==state.select and COLOR.SELECT_TXT or COLOR.TEXT)
        gpu.setBackground(i==state.select and COLOR.SELECT_BG or COLOR.BG)
        gpu.set(xName, y, v.name or "")
        gpu.set(xCount, y, tostring(v.count or ""))
        gpu.set(xCraft, y, tostring(v.craftSize or ""))
        gpu.set(xSel, y, i==state.select and "<--" or "")
        state.itemHitboxes[#state.itemHitboxes+1] = {x1=xName, x2=xSel+8, y=y, index=i}
    end
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.TEXT)
end
local function drawSearch()
    local w = 40
    local x = math.floor((WIDTH-w)/2)
    local y = 43
    gpu.setBackground(COLOR.SEARCH_BG)
    gpu.setForeground(COLOR.SEARCH_TXT)
    gpu.fill(x, y, w, 1, " ")
    local msg = "–ü–æ–∏—Å–∫: "..(state.search=="" and "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.." or state.search)
    if unicode.len(msg) > w-2 then msg = unicode.sub(msg, 1, w-2) end
    gpu.set(x+1, y, msg)
    state.searchBox = {x1=x, x2=x+w-1, y=y}
    gpu.setBackground(COLOR.BG)
end
local function drawButtons()
    local btns = {
        {x=16, w=18, label="[–î–æ–±–∞–≤–∏—Ç—å]", action="add"},
        {x=40, w=18, label="[–ò–∑–º–µ–Ω–∏—Ç—å]", action="edit"},
        {x=64, w=18, label="[–£–¥–∞–ª–∏—Ç—å]", action="del"},
        {x=WIDTH-52, w=24, label="[–†–ï–ñ–ò–ú: "..(state.go and "GO" or "STOP").."]", action="toggleGo"},
        {x=WIDTH-26, w=16, label="[–ù–∞–∑–∞–¥]", action="back"},
    }
    state.buttons = btns
    for _,btn in ipairs(btns) do
        gpu.setBackground(COLOR.BTN_BG)
        gpu.setForeground(COLOR.BTN_TXT)
        gpu.fill(btn.x, 46, btn.w, 1, " ")
        gpu.set(btn.x+math.floor((btn.w-unicode.len(btn.label))/2), 46, btn.label)
        btn.y = 46
        btn.x2 = btn.x + btn.w - 1
    end
    gpu.setBackground(COLOR.BG)
end
local function drawInput()
    if not state.input.active then return end
    local w = 50
    local x = math.floor((WIDTH-w)/2)
    local y = 30
    gpu.setBackground(COLOR.SEARCH_BG)
    gpu.fill(x, y, w, 1, " ")
    gpu.setForeground(COLOR.SEARCH_TXT)
    local msg = state.input.prompt .. " " .. state.input.value
    if unicode.len(msg) > w-2 then msg = unicode.sub(msg, 1, w-2) end
    gpu.set(x+1, y, msg)
    gpu.setBackground(COLOR.BG)
end
local function drawRightPanel()
    local x0 = WIDTH - 54
    local y0 = 3
    local panelW = 52
    local panelH = HEIGHT - 5
    gpu.setBackground(0x222233)
    gpu.fill(x0, y0, panelW, panelH, " ")
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(0x00AADD)
    gpu.set(x0 + 2, y0, "–õ–û–ì–ò –ê–í–¢–û–ö–†–ê–§–¢–ê")
    gpu.setForeground(COLOR.LABEL)
    gpu.set(x0 + 2, y0 + 2, "[‚úî] –ö—Ä–∞—Ñ—Ç/–≥–æ—Ç–æ–≤–æ")
    gpu.setForeground(0xFFA000)
    gpu.set(x0 + 2, y0 + 5, "[‚úï] –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤")
    gpu.setForeground(0xFF4444)
    gpu.set(x0 + 2, y0 + 8, "[!] –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞")
    gpu.setForeground(0xA4FFFA)
    gpu.set(x0 + 2, y0 + 11, "[üïí] –ù–µ—Ç CPU")
    gpu.setForeground(0xB2B2FF)
    gpu.set(x0 + 2, y0 + 14, "[i] –ü—Ä–æ—á–µ–µ")
    gpu.setForeground(COLOR.TEXT)
    local idx
    idx = 0
    for i = math.max(1, #state.logs.success - 6 + 1), #state.logs.success do
        idx = idx + 1
        gpu.setForeground(0x00FF00)
        gpu.set(x0 + 4, y0 + 2 + idx, state.logs.success[i])
    end
    idx = 0
    for i = math.max(1, #state.logs.nores - 6 + 1), #state.logs.nores do
        idx = idx + 1
        gpu.setForeground(0xFFA000)
        gpu.set(x0 + 4, y0 + 5 + idx, state.logs.nores[i])
    end
    idx = 0
    for i = math.max(1, #state.logs.norecipe - 6 + 1), #state.logs.norecipe do
        idx = idx + 1
        gpu.setForeground(0xFF4444)
        gpu.set(x0 + 4, y0 + 8 + idx, state.logs.norecipe[i])
    end
    idx = 0
    for i = math.max(1, #state.logs.nocpu - 6 + 1), #state.logs.nocpu do
        idx = idx + 1
        gpu.setForeground(0xA4FFFA)
        gpu.set(x0 + 4, y0 + 11 + idx, state.logs.nocpu[i])
    end
    idx = 0
    for i = math.max(1, #state.logs.other - 6 + 1), #state.logs.other do
        idx = idx + 1
        gpu.setForeground(0xB2B2FF)
        gpu.set(x0 + 4, y0 + 14 + idx, state.logs.other[i])
    end
    gpu.setForeground(COLOR.TEXT)
end
local function drawError()
    if state.error then
        local w = math.floor(WIDTH*0.8)
        local x = math.floor((WIDTH-w)/2)
        local y = 48
        gpu.setBackground(COLOR.BG)
        gpu.setForeground(COLOR.ERROR)
        gpu.fill(x, y, w, 1, " ")
        gpu.set(x+1, y, tostring(state.error))
        gpu.setForeground(COLOR.TEXT)
    end
end
local function render()
    clear()
    drawBorder()
    drawHeader()
    drawTabs()
    if state.tab=="main" then
        drawMainTable()
        drawSearch()
        drawButtons()
        drawError()
        drawRightPanel()
        gpu.set(WIDTH-25,HEIGHT,"–í—Å–µ–≥–æ: "..#state.data)
    elseif state.tab == "log" then
        drawRightPanel()
    elseif state.tab == "change" and state.filtered[state.select] then
        local v = state.filtered[state.select]
        gpu.setForeground(COLOR.LABEL)
        gpu.set(30,12,"–ù–∞–∑–≤–∞–Ω–∏–µ: "..(v.name or "?"))
        gpu.set(30,14,"–ö–æ–ª-–≤–æ: "..tostring(v.count or "?"))
        gpu.set(30,16,"–†–∞–∑–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞: "..tostring(v.craftSize or "?"))
        gpu.setForeground(COLOR.TEXT)
        local btns = {
            {x=40,w=24,label="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",action="name"},
            {x=68,w=18,label="–ò–∑–º. –∫–æ–ª-–≤–æ",action="count"},
            {x=88,w=18,label="–ò–∑–º. –∫—Ä–∞—Ñ—Ç",action="craft"},
            {x=108,w=18,label="–ù–∞–∑–∞–¥",action="main"}
        }
        for _,btn in ipairs(btns) do
            gpu.setBackground(COLOR.BTN_BG)
            gpu.setForeground(COLOR.BTN_TXT)
            gpu.fill(btn.x,32,btn.w,1," ")
            gpu.set(btn.x+math.floor((btn.w-unicode.len(btn.label))/2),32,btn.label)
        end
        drawRightPanel()
    end
    drawInput()
    state.redraw = false
end

-- === EVENTS ===
local function resetInput() state.input = {active=false, value="", prompt="", action=nil} end
local function askInput(prompt, action, default)
    state.input.active = true
    state.input.value = default or ""
    state.input.prompt = prompt
    state.input.action = action
    state.redraw = true
end
local function commitInput()
    if not state.input.action then resetInput() return end
    local idx = state.select
    local v = state.filtered and state.filtered[idx]
    if state.input.action=="name" then
        if v then v.name = state.input.value end
        log("other","–ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è: "..(v and v.name or "?"))
    elseif state.input.action=="count" then
        if v then v.count = tonumber(state.input.value) end
        log("other","–ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: "..(v and v.count or "?"))
    elseif state.input.action=="craft" then
        if v then v.craftSize = tonumber(state.input.value) end
        log("other","–ò–∑–º–µ–Ω—ë–Ω —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞: "..(v and v.craftSize or "?"))
    elseif state.input.action=="search" then
        state.search = state.input.value
    elseif state.input.action=="add" then
        local item = me.getStackInSlot(1)
        if not item then state.error="–ü–æ–ª–æ–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ 1-–π —Å–ª–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!"; resetInput(); return end
        table.insert(state.data, {name=state.input.value, id=item.id, dmg=item.dmg, count=1, craftSize=1})
        log("success","–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: "..state.input.value)
    end
    saveTable(DATA_PATH, state.data)
    resetInput()
    state.redraw = true
end

local function handleKeyDown(_, _, char, code, playerName)
    if not ADM[playerName or ""] then return end
    if state.input.active then
        if code==13 then commitInput()
        elseif code==8 then
            if #state.input.value > 0 then
                state.input.value = unicode.sub(state.input.value,1,unicode.len(state.input.value)-1)
            end
        elseif char and type(char)=="string" and unicode.len(state.input.value)<48 then
            state.input.value = state.input.value .. char
        end
        state.redraw = true
        return
    end
end

local function handleTouch(_, _, x, y, button, playerName)
    if not ADM[playerName or ""] then return end
    -- –≤–∫–ª–∞–¥–∫–∏
    for _,tab in ipairs(state.tabHitboxes or {}) do
        if y == tab.y and x >= tab.x1 and x <= tab.x2 then
            state.tab = tab.key
            state.redraw = true
            return
        end
    end
    -- –ø–æ–∏—Å–∫
    if state.tab == "main" and state.searchBox and y == state.searchBox.y and x >= state.searchBox.x1 and x <= state.searchBox.x2 then
        askInput("–ü–æ–∏—Å–∫:", "search", state.search)
        return
    end
    -- –∫–Ω–æ–ø–∫–∏
    for _,btn in ipairs(state.buttons or {}) do
        if y == btn.y and x >= btn.x and x <= btn.x2 then
            if btn.action=="add" then
                askInput("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", "add", "")
            elseif btn.action=="edit" then
                state.tab="change"; state.redraw=true
            elseif btn.action=="del" then
                if state.filtered[state.select] then
                    table.remove(state.data, state.select)
                    log("other","–£–¥–∞–ª—ë–Ω: "..(state.filtered[state.select].name or "?"))
                    saveTable(DATA_PATH, state.data)
                    state.redraw=true
                end
            elseif btn.action=="toggleGo" then
                state.go = not state.go
                log("other","–†–µ–∂–∏–º: "..(state.go and "GO" or "STOP"))
                state.redraw=true
            elseif btn.action=="back" then
                state.tab="main"; state.redraw=true
            end
            return
        end
    end
    -- –ø—Ä–µ–¥–º–µ—Ç—ã
    if state.tab == "main" then
        for _,box in ipairs(state.itemHitboxes or {}) do
            if y == box.y and x >= box.x1 and x <= box.x2 then
                state.select = box.index
                state.redraw = true
                return
            end
        end
    end
    -- –∫–Ω–æ–ø–∫–∏ –≤ –≤–∫–ª–∞–¥–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if state.tab == "change" then
        local btns = {
            {x=40,w=24,action="name"},
            {x=68,w=18,action="count"},
            {x=88,w=18,action="craft"},
            {x=108,w=18,action="main"}
        }
        for _,btn in ipairs(btns) do
            if y==32 and x>=btn.x and x<=btn.x+btn.w-1 then
                if btn.action=="main" then state.tab="main"; state.redraw=true
                else
                    local v = state.filtered[state.select]
                    local current = (btn.action=="name" and v and v.name) or (btn.action=="count" and v and v.count) or (btn.action=="craft" and v and v.craftSize) or ""
                    askInput("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", btn.action, tostring(current or ""))
                end
                return
            end
        end
    end
end
local function handleScroll(_, _, x, y, dir, playerName)
    if not ADM[playerName or ""] then return end
    if state.tab=="main" then
        if dir == 1 and state.scroll > 1 then
            state.scroll = state.scroll - 1
            state.redraw = true
        elseif dir == -1 and state.scroll < state.maxscroll then
            state.scroll = state.scroll + 1
            state.redraw = true
        end
    end
end

-- === AUTOCRAFT ===
local function checkCraft()
    if not state.go then return end
    for _,v in ipairs(state.data) do
        local itemsMe = me.getItemDetail({id=v.id,dmg=v.dmg})
        local qty = itemsMe and itemsMe.basic().qty or 0
        local needAll = (v.count or 0) - qty
        if needAll>0 then
            local craftables = me.getCraftables({name=v.id,damage=v.dmg})
            if craftables.n and craftables.n>=1 then
                local cpus = me.getCpus()
                local attempts, maxTry = 0, 16
                while needAll>0 and attempts<maxTry do
                    attempts = attempts + 1
                    local maxCpu = 0
                    for _,cpu in ipairs(cpus) do if cpu.storage>maxCpu and not cpu.busy then maxCpu=cpu.storage end end
                    if maxCpu==0 then
                        log("nocpu","–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö CPU –¥–ª—è "..(v.name or "?"))
                        break
                    end
                    local count = math.min(needAll, maxCpu, v.craftSize or maxCpu)
                    local r, msg = pcall(function() return craftables[1].request(count, false) end)
                    if r then
                        log("success","–ö—Ä–∞—Ñ—Ç: "..(v.name or "?").." x"..count)
                        needAll = needAll-count
                    else
                        if tostring(msg):find("missing resources") then
                            log("nores","–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è "..(v.name or "?"))
                            break
                        elseif tostring(msg):find("no recipe") then
                            log("norecipe","–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ "..(v.name or "?"))
                            break
                        else
                            log("other","–û—à–∏–±–∫–∞: "..tostring(msg))
                            break
                        end
                    end
                    os.sleep(0.1)
                end
            else
                log("norecipe","–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ "..(v.name or "?"))
            end
        end
    end
end

-- === MAIN LOOP ===
local function mainloop()
    state.data = loadTable(DATA_PATH)
    event.listen("key_down", handleKeyDown)
    event.listen("touch", handleTouch)
    event.listen("scroll", handleScroll)
    local lastCheck = os.clock()
    while true do
        if state.redraw then render() end
        if state.go and os.clock()-lastCheck>6 then
            checkCraft()
            lastCheck = os.clock()
        end
        os.sleep(0.05)
    end
end

local ok, err = pcall(mainloop)
if not ok then
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.ERROR)
    gpu.set(2, HEIGHT-1, "–û—à–∏–±–∫–∞: "..tostring(err))
end
