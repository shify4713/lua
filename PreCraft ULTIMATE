local component = require("component")
local event = require("event")
local unicode = require("unicode")
local fs = require("filesystem")
local shell = require("shell")
local term = require("term")
local serialization = require("serialization")

local gpu = assert(component.gpu, "GPU not found")
local me = assert(component.me_interface, "ME interface not found")

-- === SETTINGS ===
local ADM = {['shify4713']=true} -- your Minecraft nick here!
local WIDTH, HEIGHT = 160, 50
local DATA_PATH = "/home/BD.txt"
local LOG_PATH = "/home/PCU.log"
local LIB_OC = "/lib/oc.lua"
local LIB_OC_URL = "https://www.dropbox.com/s/cgfytt8g174a6vs/libPrecraft.lua?dl=1"

-- === COLORS ===
local COLOR = {
    BG = 0x232c42, FG = 0xA4FFFA, BORDER = 0x00ffff, ERROR = 0xFF4444,
    BTN_BG = 0x00AADD, BTN_TXT = 0x181824, BTN_ACTIVE = 0x26d6ff,
    SELECT_BG = 0x444477, SELECT_TXT = 0xFFFFFF, TEXT = 0xD38FFE,
    LABEL = 0xFFD580, LOG_BG = 0x222233, LOG_TXT = 0xB2B2FF,
    TAB_ON = 0x00AADD, TAB_OFF = 0x232c42, TAB_TXT = 0xFFFFFF,
    SEARCH_BG = 0x003355, SEARCH_TXT = 0xA4FFFA
}

-- === FILES AND INIT ===
if not fs.exists(LIB_OC) then
    shell.execute("wget " .. LIB_OC_URL .. " " .. LIB_OC)
end
local oc = require("oc")
if not fs.exists(DATA_PATH) then
    local f = io.open(DATA_PATH, "w") f:write("return {}") f:close() end
if not fs.exists(LOG_PATH) then
    local f = io.open(LOG_PATH, "w") f:write("return {}") f:close() end

gpu.setResolution(WIDTH, HEIGHT)

-- === STATE ===
local state = {
    tab = "main", -- main/change/log
    data = {}, -- крафты
    logs = {}, -- события
    redraw = true,
    select = 1,
    scroll = 1,
    filtered = {},
    maxscroll = 1,
    input = {active=false, value="", prompt="", action=nil},
    search = "",
    go = false,
    error = nil,
    buttons = {},
    tabHitboxes = {},
    itemHitboxes = {},
    log1 = {}, -- нехватка ресурсов
    log2 = {}, -- нет рецепта
    currentCraft = {},
}

-- === UTILS ===
local function saveTable(path, tbl)
    local f = io.open(path, "w")
    if not f then return end
    f:write("return " .. serialization.serialize(tbl))
    f:close()
end

local function loadTable(path)
    if not fs.exists(path) then return {} end
    local f = io.open(path, "r")
    if not f then return {} end
    local data = f:read("*a")
    f:close()
    local ok, t = pcall(function() return load("return " .. data)() end)
    return ok and t or {}
end

local function getMoscowTime()
    local t = os.time()
    local utc = os.date("!*t", t)
    local hour = (utc.hour + 3) % 24
    return string.format("%02d:%02d:%02d", hour, utc.min, utc.sec)
end

local function addLog(msg, logtype)
    local line = ("[%s] %s"):format(getMoscowTime(), tostring(msg))
    table.insert(state.logs, line)
    if #state.logs > 120 then table.remove(state.logs, 1) end
    saveTable(LOG_PATH, state.logs)
    if logtype == "ore" then
        table.insert(state.log1, line)
        if #state.log1 > 20 then table.remove(state.log1, 1) end
    elseif logtype == "recipe" then
        table.insert(state.log2, line)
        if #state.log2 > 20 then table.remove(state.log2, 1) end
    end
end

local function clamp(val, min, max)
    if val < min then return min end
    if val > max then return max end
    return val
end

local function shallowcopy(t)
    local r = {}; for k,v in pairs(t) do r[k]=v end; return r
end

-- === GUI DRAW ===
local function clear()
    gpu.setBackground(COLOR.BG)
    gpu.fill(1, 1, WIDTH, HEIGHT, " ")
end

local function drawBorder()
    gpu.setForeground(COLOR.BORDER)
    gpu.set(1, 1, "+"..string.rep("-", WIDTH-2).."+")
    gpu.set(1, HEIGHT, "+"..string.rep("-", WIDTH-2).."+")
    for y=2,HEIGHT-1 do
        gpu.set(1,y,"|")
        gpu.set(WIDTH,y,"|")
    end
end

local function drawTabs()
    local x = 5
    local tabs = {{"Главная","main"},{"Изменить","change"},{"Логи","log"}}
    state.tabHitboxes = {}
    for i,tab in ipairs(tabs) do
        local active = (tab[2]==state.tab)
        gpu.setBackground(active and COLOR.TAB_ON or COLOR.TAB_OFF)
        gpu.setForeground(COLOR.TAB_TXT)
        local label = "["..tab[1].."]"
        gpu.set(x,3,label)
        state.tabHitboxes[i] = {x1=x, x2=x+unicode.len(label)-1, y=3, key=tab[2]}
        x = x + unicode.len(label)+3
    end
    gpu.setBackground(COLOR.BG)
end

local function drawHeader()
    gpu.setBackground(COLOR.BG)
    gpu.setForeground(COLOR.FG)
    local title = "PreCraft ULTIMATE"
    gpu.set(math.floor(WIDTH/2-unicode.len(title)/2),2,title)
end

local function drawMainTable()
    local xName, wName = 8, 40
    local xCount, wCount = xName + wName + 3, 10
    local xCraft, wCraft = xCount + wCount + 3, 10
    local xSel = xCraft + wCraft + 3
    gpu.setForeground(COLOR.LABEL)
    gpu.set(xName,6,"Название предмета")
    gpu.set(xCount,6,"Кол-во")
    gpu.set(xCraft,6,"Крафт")
    gpu.set(xSel,6,"Выбрать")
    gpu.setForeground(COLOR.TEXT)
    local filtered = {}
    for i,v in ipairs(state.data) do
        if state.search=="" or unicode.lower(v.name or ""):find(unicode.lower(state.search)) then
            table.insert(filtered, v)
        end
    end
    state.filtered = filtered
    local maxshow = 32
    state.maxscroll = math.max(1, #filtered-maxshow+1)
    state.select = clamp(state.select, 1, #filtered)
    state.scroll = clamp(state.scroll, 1, state.maxscroll)
    state.itemHitboxes = {}
    for i=state.scroll,math.min(#filtered,state.scroll+maxshow-1) do
        local v = filtered[i]
        local y = 7 + (i-state.scroll)
        gpu.setForeground(i==state.select and COLOR.SELECT_TXT or COLOR.TEXT)
        gpu.setBackground(i==state.select and COLOR.SELECT_BG or COLOR.BG)
        gpu.set(xName, y, v.name or "")
        gpu.set(xCount, y, tostring(v.count or ""))
        gpu.set(xCraft, y, tostring(v.craftSize or ""))
        gpu.set(xSel, y,

