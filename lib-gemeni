local component = require("component")
local gpu = component.gpu
local unicode = require("unicode") -- Add this line

local ultimateOC = {}

function ultimateOC.drawText(x, y, text, color, bold)
    gpu.setForeground(color or 0xFFFFFF)
    gpu.set(x, y, text)
end

function ultimateOC.progressBar(x, y, w, p)
    gpu.fill(x, y, math.floor(w * p), 1, "█")
end

function ultimateOC.roundRect(x, y, w, h, borderColor, bgColor)
    gpu.setBackground(bgColor or 0x000000)
    gpu.fill(x, y, w, h, " ")
    gpu.setForeground(borderColor or 0xFFFFFF)
    gpu.set(x, y, "╔" .. string.rep("═", w-2) .. "╗")
    gpu.set(x, y+h-1, "╚" .. string.rep("═", w-2) .. "╝")
    for i = 1, h-2 do
        gpu.set(x, y+i, "║")
        gpu.set(x+w-1, y+i, "║")
    end
end

function ultimateOC.animatedButton(x, y, w, h, text, hover, bgColor, activeColor, textColor, subText, subColor)
    gpu.setBackground(hover and activeColor or bgColor)
    gpu.fill(x, y, w, h, " ")
    gpu.setForeground(textColor)
    -- Fallback if unicode.len fails
    local textLen = unicode and unicode.len and unicode.len(text) or string.len(text)
    local tx = x + math.floor((w - textLen) / 2)
    gpu.set(tx, y + math.floor(h/2), text)
    if subText then
        gpu.setForeground(subColor or textColor)
        local subTextLen = unicode and unicode.len and unicode.len(subText) or string.len(subText)
        local stx = x + math.floor((w - subTextLen) / 2)
        gpu.set(stx, y + math.floor(h/2) + 1, subText)
    end
end

function ultimateOC.drawLogs(x, y, logs, lines, color, offset)
    gpu.setForeground(color or 0xFFFFFF)
    for i = 1, lines do
        local idx = #logs - offset - lines + i
        if idx > 0 and idx <= #logs then
            gpu.set(x, y + i - 1, logs[idx])
        end
    end
end

function ultimateOC.addLog(logsTable, msg)
    table.insert(logsTable, msg)
    if #logsTable > 100 then table.remove(logsTable, 1) end
end

function ultimateOC.loadf(path)
    local file = io.open(path, "r")
    if not file then return nil end
    local content = file:read("*a")
    file:close()
    return load("return " .. content)()
end

function ultimateOC.savef(path, data)
    local file = io.open(path, "w")
    if file then
        file:write(textutils.serialize(data))
        file:close()
    end
end

return ultimateOC
