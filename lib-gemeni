-- lib-gemeni.txt
local component = require("component")
local unicode = require("unicode")
local term = require("term")
local fs = require("filesystem")

local g = component.gpu

local ultimateOC = {}

-- Функция для рисования текста с цветом и жирным начертанием
function ultimateOC.drawText(x, y, text, color, bold)
    g.setForeground(color or 0xFFFFFF)
    -- В OpenOS 'g.set' обычно поддерживает только цвет и текст.
    -- Имитация жирного шрифта через повторное наложение текста или подчеркивание
    -- может приводить к 'миганию' или 'грязи' при частых перерисовках.
    -- Лучше использовать только цвет и простой текст.
    -- Если терминал поддерживает жирный шрифт, можно установить term.setGraphicsMode(term.mode.bold)
    -- Но это не универсально и может конфликтовать.
    -- Для OpenOS 1.6.1 и Lua 5.2, прямое "жирное" начертание через GPU.set не всегда есть.
    -- Просто устанавливаем цвет и выводим текст.
    g.set(x, y, text)
    if bold then -- Если все же хотим какой-то акцент, можно сделать его цветом
        -- Или использовать более насыщенный цвет
        g.setForeground(color and (color + 0x111111) or 0xFFFFFF) -- Пример: немного ярче
        g.set(x,y,text) -- Перерисовываем тем же текстом, но ярче, чтобы имитировать
    end
end

-- Функция для рисования прямоугольника с закруглёнными углами
function ultimateOC.roundRect(x, y, w, h, borderColor, bgColor)
    g.setBackground(bgColor or 0x000000)
    g.fill(x, y, w, h, " ")
    g.setForeground(borderColor or 0xFFFFFF)
    -- Верхняя линия
    g.set(x, y, "╔" .. string.rep("═", w - 2) .. "╗")
    -- Нижняя линия
    g.set(x, y + h - 1, "╚" .. string.rep("═", w - 2) .. "╝")
    -- Боковые линии
    for i = 1, h - 2 do
        g.set(x, y + i, "║")
        g.set(x + w - 1, y + i, "║")
    end
end

-- Функция для анимированной кнопки (изменено: убран setBackground)
function ultimateOC.animatedButton(x, y, w, h, text, hover, bgColor, activeColor, textColor, subText, subTextColor)
    -- Removed the background setting from here, it will be handled by the caller
    g.setForeground(textColor or 0xFFFFFF)
    local textLen = unicode.len(text)
    local tx = x + math.floor((w - textLen) / 2)
    g.set(tx, y + math.floor(h / 2), text)
    if subText and subText ~= "" then
        local subTextLen = unicode.len(subText)
        local subTx = x + math.floor((w - subTextLen) / 2)
        g.setForeground(subTextColor or textColor or 0xFFFFFF)
        g.set(subTx, y + math.floor(h / 2) + 1, subText)
    end
end

-- Функция для отрисовки логов
function ultimateOC.drawLogs(x, y, logs, lines, color, offset)
    g.setForeground(color or 0x8BE9FD)
    for i = 1, lines do
        local displayLine = i - 1 -- Индекс строки относительно y
        local idx = #logs - offset - (lines - 1) + displayLine -- Самый новый лог внизу
        if idx > 0 and idx <= #logs then
            local logText = logs[idx] or ""
            -- Очищаем текущую строку перед выводом нового лога
            g.setBackground(0x23242b) -- Цвет фона логов
            g.fill(x, y + displayLine, term.current.width - x, 1, " ") -- Очищаем до конца строки
            g.set(x, y + displayLine, logText)
        else
            -- Если строка пуста, очищаем ее
            g.setBackground(0x23242b)
            g.fill(x, y + displayLine, term.current.width - x, 1, " ")
        end
    end
end

-- Функция для сохранения данных в файл
function ultimateOC.savef(path, data)
    local file = io.open(path, "w")
    if file then
        file:write(textutils.serialize(data))
        file:close()
    end
end

-- Функция для загрузки данных из файла
function ultimateOC.loadf(path)
    local file = io.open(path, "r")
    if not file then return nil end
    local content = file:read("*a")
    file:close()
    local func, err = load("return " .. content)
    if not func then error(err) end
    return func()
end

-- Функция для прогресс-бара
function ultimateOC.progressBar(x, y, w, progress)
    g.setBackground(0x44475a)
    g.fill(x, y, w, 1, " ")
    g.setBackground(0x50FA7B)
    g.fill(x, y, math.floor(w * progress), 1, " ")
end

return ultimateOC
