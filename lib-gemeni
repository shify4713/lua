-- ultimateOC.lua - Улучшенная библиотека для визуала OpenComputers
local fs = require("filesystem")
local unicode = require("unicode")
local gpu = require("component").gpu

local M = {}

-- Глобальные переменные для отслеживания наведения курсора на кнопку (добавьте их сюда)
M.buttonHover = nil
M.buttonHoverY = nil

-- Безопасное сохранение таблицы (быстрее и надёжнее)
function M.savef(path, tbl)
    local ok, ser = pcall(require("serialization").serialize, tbl)
    if not ok then error("Ошибка сериализации: "..tostring(ser)) end
    local f, err = io.open(path, "w")
    if not f then error("Не могу открыть файл для записи: "..err) end
    f:write(ser)
    f:close()
end

function M.loadf(path)
    if not fs.exists(path) then return {} end
    local f, err = io.open(path, "r")
    if not f then error("Не могу открыть файл: "..err) end
    local data = f:read("*a")
    f:close()
    local ok, tbl = pcall(require("serialization").unserialize, data)
    if not ok then error("Ошибка десериализации: "..tostring(tbl)) end
    return tbl or {}
end

-- Гибкий фильтр предметов по подстроке (поиск не зависит от регистра и ищет в любом месте)
function M.filterItems(items, searchTerm)
    local filtered = {}
    if not searchTerm or searchTerm == "" then return items end
    local lowerSearchTerm = unicode.lower(searchTerm)
    for _, item in ipairs(items) do
        if item.label and unicode.lower(item.label):find(lowerSearchTerm, 1, true) then
            table.insert(filtered, item)
        end
    end
    return filtered
end

-- Рисует текст с обводкой (для читабельности)
function M.drawText(x, y, text, color)
    local bgColor = gpu.getBackground()
    -- Проверяем, наведен ли курсор на кнопку, используя глобальные M.buttonHover
    if M.buttonHover == x and M.buttonHoverY == y then
        gpu.setBackground(0x6272A4) -- Цвет при наведении
    else
        gpu.setBackground(0x282A36) -- Фоновый цвет по умолчанию
    end
    gpu.setForeground(0x282A36)
    gpu.set(x+1, y+1, text)
    gpu.setForeground(color)
    gpu.set(x, y, text)
    gpu.setBackground(bgColor) -- Возвращаем исходный фон
end

-- Быстрый логгер: добавляет строку в массив (до 50 записей)
function M.addLog(logs, text, lvl)
    lvl = lvl or "INFO"
    local now = os.date("!*t", os.time()+3*3600) -- МСК
    local t = string.format("[%02d:%02d:%02d][%s] %s", now.hour, now.min, now.sec, lvl, text)
    table.insert(logs, t)
    while #logs > 50 do table.remove(logs, 1) end
end

-- Рисует список логов (на экране)
function M.drawLogs(x, y, logs, count, color)
    count = count or 10
    color = color or 0x8BE9FD
    local logY = y
    for i = math.max(1,#logs-count+1), #logs do
        M.drawText(x, logY, logs[i], color)
        logY = logY + 1
    end
end

-- Быстрый автоматический скролл по массиву
function M.scrollArray(tbl, scroll, perPage)
    local res = {}
    perPage = perPage or 20
    scroll = math.max(1, math.min(scroll, math.max(1, #tbl - perPage + 1)))
    for i = scroll, math.min(scroll + perPage - 1, #tbl) do
        table.insert(res, tbl[i])
    end
    return res
end

return M
