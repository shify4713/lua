-- precraft.lua – Идеальный PreCraft с автокрафтом, новым GUI и встроенной загрузкой библиотеки

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local g = component.gpu
local me = component.me_interface

-- встроенная загрузка библиотеки
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
if not fs.exists("/lib/oc.lua") then
  shell.execute("wget " .. libURL .. " /lib/oc.lua")
end
local oc = require("oc")

-- Если файла данных не существует – создаём BD.txt
if not fs.exists("/home/BD.txt") then
  oc.savef("/home/BD.txt", {})
end

-------------------- Настройки --------------------
local debugMode = true                   -- Режим отладки
local ADM = { ["LiwMorgan"] = true }     -- Только LiwMorgan имеет права
local WIDTH, HEIGHT = 80, 50
if debugMode then WIDTH, HEIGHT = 160, 50 end
g.setResolution(WIDTH, HEIGHT)

local CBUTTON = 0x00ffff
local CDRAW   = 0x004575
local CTEXT   = 0xD38FFE
g.setForeground(CTEXT)
-----------------------------------------------------

-- Глобальные переменные
local dataItems = {}          -- Список предметов (крафтов) из BD.txt
local dataq = {}              -- Копия для автокрафта
local guiPath = {"start"}     -- Стек состояния GUI (например, "start", "change")
local debugLog1, debugLog2 = {}, {}  -- Логи (отладочные сообщения)
local inputFind = ""          -- Фильтр по названию
local scroll = 1              -- Текущая позиция скролла (начинается с 1)
local posSelect = nil         -- Выбранный элемент (индекс в списке content)
local changeItem = false      -- Флаг режима ввода (при редактировании/добавлении)
local go = true               -- Автокрафт включён (true/false)
local precraft = true         -- Флаг работы основной программы

local maxScroll = 1           -- Максимальное значение скролла
local content = {}            -- Отфильтрованный (и отсортированный) список предметов
local yTouch = 0              -- Координата касания (для выбора строки)

-- Переменная сортировки
local sortCriteria = "name"   -- Возможные значения: "name", "category", "count"
local sortCriteriaDisplay = {name = "Имя", category = "Категория", count = "Количество"}

-- Цветовая разметка для запасов в ME:
local COLOR_LOW    = 0xff0000    -- Красный – не хватает ресурсов
local COLOR_MEDIUM = 0xffcc00    -- Желтый – разница не велика
local COLOR_HIGH   = 0x00ff00    -- Зеленый – хватает

-----------------------------------------------------
-- Функции отрисовки графики

local function ClearScreen()
  g.setBackground(0x000000)
  g.fill(1, 4, WIDTH, HEIGHT-4, " ")
end

local function DrawHeader()
  g.setBackground(0x000000)
  g.setForeground(CTEXT)
  g.fill(1, 1, WIDTH, 3, " ")
  local header = "PreCraft"
  g.set(math.floor((WIDTH - unicode.len(header)) / 2), 2, header)
  g.set(2, 3, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])
end

local function UpdateLogs()
  if WIDTH >= 85 then
    g.setBackground(0x000000)
    g.fill(85, 1, WIDTH-84, HEIGHT-1, " ")
    for i = 1, #debugLog1 do
      g.set(85, 4 + i - 1, tostring(debugLog1[i]))
    end
    for i = 1, #debugLog2 do
      g.set(85, 26 + i - 1, tostring(debugLog2[i]))
    end
  end
end

local function DrawListHeader()
  g.setBackground(0x000000)
  g.setForeground(CTEXT)
  g.set(2, 5, "Название")
  g.set(45, 5, "Треб")
  g.set(55, 5, "В МЭ")
  g.set(65, 5, "Крафт")
end

local function DrawItemList()
  DrawListHeader()
  if guiPath[#guiPath] == "start" or guiPath[#guiPath] == "stop" or guiPath[#guiPath] == "go" then
    g.set(2, 43, "Поиск: " .. inputFind)
    oc.right(71, 50, "Всего: " .. tostring(#dataItems) .. " крафтов")
    
    if inputFind ~= "" then
      content = {}
      for i, item in ipairs(dataItems) do
        if unicode.lower(item.name):find(unicode.lower(inputFind)) then
          table.insert(content, item)
        end
      end
    else
      content = {}
      for i, item in ipairs(dataItems) do
        table.insert(content, item)
      end
    end
    
    if sortCriteria == "name" then
      table.sort(content, function(a, b) return a.name:lower() < b.name:lower() end)
    elseif sortCriteria == "category" then
      table.sort(content, function(a, b) return (a.category or ""):lower() < (b.category or ""):lower() end)
    elseif sortCriteria == "count" then
      table.sort(content, function(a, b) return tonumber(a.count) < tonumber(b.count) end)
    end
    
    maxScroll = math.max(1, #content - 35 + 1)
    
    for i = scroll, math.min(#content, scroll + 35 - 1) do
      local row = 6 + (i - scroll)
      local item = content[i]
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      local currentQty = (detail and detail.basic() and detail.basic().qty) or 0
      local diff = item.count - currentQty
      local colorText = CTEXT
      if currentQty >= item.count then
        colorText = COLOR_HIGH
      elseif diff >= math.floor(item.count * 0.5) then
        colorText = COLOR_LOW
      else
        colorText = COLOR_MEDIUM
      end
      
      if posSelect and i == posSelect then
        g.setBackground(0x1e1e1e)
      else
        g.setBackground(0x000000)
      end
      g.setForeground(colorText)
      local line = string.format("%3d. %-30s", i, item.name)
      g.set(2, row, line)
      g.set(45, row, "Треб:" .. item.count)
      g.set(55, row, "В МЭ:" .. currentQty)
      g.set(65, row, "Крафт:" .. item.craftSize)
    end
    g.setBackground(0x000000)
    g.setForeground(CTEXT)
  end
end

local function DrawScrollBar()
  oc.drawscroll(80, 7, 1, 35, scroll, #content, 0x1e1e1e, 0x004575)
end

local function DrawButtons()
  for _, button in pairs(buttons) do
    for _, state in ipairs(button.ButtonIn) do
      if state == guiPath[#guiPath] and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, button.ctext, button.cbutton, button.text)
      end
    end
  end
end

local function MainDraw()
  DrawHeader()
  ClearScreen()
  Main()  -- Вызываем отрисовку специфичных элементов, например в режиме "change"
  DrawButtons()
  DrawItemList()
  DrawScrollBar()
  UpdateLogs()
end

function Main()
  if guiPath[#guiPath] == "change" then
    if posSelect and dataItems[posSelect] then
      g.setBackground(0x000000)
      g.setForeground(CTEXT)
      g.set(2, 10, "Редактирование:")
      g.set(2, 12, "Имя: " .. dataItems[posSelect].name)
      g.set(2, 14, "id: " .. tostring(dataItems[posSelect].id))
      g.set(2, 16, "dmg: " .. tostring(dataItems[posSelect].dmg))
      g.set(2, 18, "Треб: " .. tostring(dataItems[posSelect].count))
      g.set(2, 20, "Крафт: " .. tostring(dataItems[posSelect].craftSize))
      g.set(2, 22, "Категория: " .. tostring(dataItems[posSelect].category or "Не задана"))
    end
  end
end

local function toGui(state, clear)
  if clear then guiPath[#guiPath] = nil end
  if guiPath[#guiPath] ~= state then table.insert(guiPath, state) end
  dataItems = oc.loadf("/home/BD.txt")
  MainDraw()
end

local function Back(to)
  if to then
    while #guiPath > to do table.remove(guiPath) end
  else
    table.remove(guiPath)
  end
  posSelect = nil
  MainDraw()
end

local function AddLog(logType, msg)
  if logType == "ore" then
    if #debugLog1 > 19 then table.remove(debugLog1, 1) end
    table.insert(debugLog1, msg)
  else
    if #debugLog2 > 19 then table.remove(debugLog2, 1) end
    table.insert(debugLog2, msg)
  end
  UpdateLogs()
end

-----------------------------------------------------
-- Функция автокрафта

local function Check()
  for i = 1, #dataq do
    if not go then break end
    local item = dataq[i]
    if not item.craft or item.craft.isDone() or item.craft.isCanceled() then
      item.craft = nil
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      if detail then
        local currentQty = (detail.basic() and detail.basic().qty) or 0
        local delta = item.count - currentQty
        if delta > item.craftSize then delta = item.craftSize end
        if delta > 0 then
          local cpus = me.getCpus()
          for j = 1, #cpus do
            if not cpus[j].busy and cpus[j].storage == item.cpu then
              local craftables = me.getCraftables({name = item.id, damage = item.dmg})
              if craftables.n and craftables.n >= 1 then
                item.craft = craftables[1].request(delta, false, tostring(item.cpu))
                if debugMode then
                  local canceled, cancelmsg = item.craft.isCanceled()
                  if not canceled and cancelmsg then
                    if cancelmsg == "computing" then
                      AddLog("ore", item.name .. " не хватает ресурсов (" .. cancelmsg .. ")")
                    end
                  elseif cancelmsg == "request failed (missing resources?)" then
                    AddLog("ore", item.name .. " не хватает ресурсов (" .. cancelmsg .. ")")
                  elseif cancelmsg then
                    AddLog("ore", item.name .. " " .. cancelmsg)
                  end
                  os.sleep(0.5)
                  break
                end
              elseif debugMode then
                AddLog("recipe", item.name .. " не имеет рецепта")
              end
              break
            end
          end
        end
      end
    end
  end
  os.sleep(1)
  AddLog("ore", "")
  AddLog("recipe", "")
end

-----------------------------------------------------
-- Управление предметами

local function AddItem()
  changeItem = true
  if me.getStackInSlot(1) then
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите название:")
    term.setCursor(20,43)
    local name = tostring(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите категорию:")
    term.setCursor(20,43)
    local category = tostring(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите требуемое число:")
    term.setCursor(25,43)
    local count = tonumber(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите объём крафта:")
    term.setCursor(25,43)
    local craftSize = tonumber(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    local stack = me.getStackInSlot(1)
    table.insert(dataItems, {name = name, category = category, id = stack.id, dmg = stack.dmg, count = count, craftSize = craftSize, cpu = 65536})
    oc.savef("/home/BD.txt", dataItems)
  else
    g.set(2,43, "Предмет не установлен в 1-й слот!")
    os.sleep(2)
    g.fill(1,43, WIDTH, 1, " ")
  end
  MainDraw()
  changeItem = false
end

local function RemoveItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        table.remove(dataItems, i)
        oc.savef("/home/BD.txt", dataItems)
        posSelect = nil
        MainDraw()
        return true
      end
    end
  end
end

local function EditItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        posSelect = i
        toGui("change", false)
        return true
      end
    end
  end
end

local function ChangeItem(action)
  if posSelect then
    g.fill(1,45, WIDTH, 1, " ")
    if action == "changeName" then
      g.set(2,45, "Введите новое имя:")
      term.setCursor(25,45)
      dataItems[posSelect].name = tostring(io.read())
    elseif action == "changeCategory" then
      g.set(2,45, "Введите новую категорию:")
      term.setCursor(25,45)
      dataItems[posSelect].category = tostring(io.read())
    elseif action == "changeCount" then
      g.set(2,45, "Введите новое требуемое число:")
      term.setCursor(30,45)
      dataItems[posSelect].count = tonumber(io.read())
    elseif action == "changeCraftSize" then
      g.set(2,45, "Введите новый объём крафта:")
      term.setCursor(30,45)
      dataItems[posSelect].craftSize = tonumber(io.read())
    end
    oc.savef("/home/BD.txt", dataItems)
    g.fill(1,45, WIDTH, 1, " ")
    MainDraw()
  end
end

-----------------------------------------------------
-- Обработчики событий

local function eButton(_, _, x, y, _, nick)
  if ADM[nick] then
    for _, button in pairs(buttons) do
      if x >= button.x and x <= button.x + button.w - 1 and
         y >= button.y and y <= button.y + button.h - 1 then
        for _, state in ipairs(button.ButtonIn) do
          if state == guiPath[#guiPath] then
            yTouch = y
            button.action()
            return true
          end
        end
      end
    end
  end
end

local function eScroll(_, _, _, _, zs, nick)
  if ADM[nick] then
    if guiPath[#guiPath] == "start" or guiPath[#guiPath] == "stop" or guiPath[#guiPath] == "go" then
      if not zs then
        scroll = 1
      elseif zs == 1 and scroll > 1 then
        scroll = scroll - 1
      elseif zs == -1 and scroll < maxScroll then
        scroll = scroll + 1
      end
      MainDraw()
    end
  end
end

local function eKeyDown(_, _, key, code, nick)
  if ADM[nick] and not changeItem then
    if guiPath[#guiPath] == "start" or guiPath[#guiPath] == "stop" or guiPath[#guiPath] == "go" then
      local y = 43
      g.fill(20, y, 30, 1, " ")
      if key == 8 then                    -- Backspace
        inputFind = unicode.sub(inputFind, 1, -2)
      elseif key == 0 and code == 211 then  -- Delete
        inputFind = ""
      elseif key ~= 0 then                -- Добавляем символ
        if inputFind == nil or inputFind == "" then
          inputFind = unicode.char(key)
        elseif unicode.len(inputFind) < 49 then
          inputFind = inputFind .. unicode.char(key)
        end
      end
      MainDraw()
    end
  end
end

local function initButtons()
  for _, button in pairs(buttons) do
    button.endX = button.x + button.w - 1
    button.endY = button.y + button.h - 1
  end
end

-----------------------------------------------------
-- Определения кнопок

buttons = {
  LOGO = {
    ButtonIn = {"start", "go", "stop", "change"},
    visible = true,
    x = 10, y = 1, w = 62, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "PreCraft",
    action = function() end
  },
  Exit = {
    ButtonIn = {"start", "go", "stop", "change"},
    visible = false,
    x = 1, y = 1, w = 1, h = 1,
    cbutton = CDRAW, ctext = CBUTTON, text = "",
    action = function()
      g.setResolution(160, 50)
      event.cancel(etouch)
      event.cancel(escroll)
      event.cancel(ekeydown)
      precraft = false
    end
  },
  Select = {
    ButtonIn = {"stop"},
    visible = false,
    x = 11, y = 7, w = 60, h = 35,
    text = "",
    action = function()
      posSelect = scroll + (yTouch - 6)
      MainDraw()
    end
  },
  Go = {
    ButtonIn = {"start", "go"},
    visible = true,
    x = 14, y = 47, w = 24, h = 3,
    cbutton = 0x28C730, ctext = 0x28C730, text = "Go",
    action = function() end
  },
  GoTrue = {
    ButtonIn = {"stop"},
    visible = true,
    x = 14, y = 47, w = 24, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Go",
    action = function()
      toGui("go", false)
      dataq = dataItems
      go = true
      MainDraw()
    end
  },
  Stop = {
    ButtonIn = {"stop"},
    visible = true,
    x = 43, y = 47, w = 24, h = 3,
    cbutton = 0xff0000, ctext = 0xff0000, text = "Stop",
    action = function() end
  },
  StopTrue = {
    ButtonIn = {"start", "go"},
    visible = true,
    x = 43, y = 47, w = 24, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Stop",
    action = function()
      toGui("stop", false)
      go = false
      MainDraw()
    end
  },
  Add = {
    ButtonIn = {"stop"},
    visible = true,
    x = 20, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Добавить]",
    action = function() AddItem() end
  },
  Change = {
    ButtonIn = {"stop"},
    visible = true,
    x = 32, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Изменить]",
    action = function() EditItem() end
  },
  Remove = {
    ButtonIn = {"stop"},
    visible = true,
    x = 44, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Удалить]",
    action = function() RemoveItem() end
  },
  Sort = {
    ButtonIn = {"start", "stop", "go"},
    visible = true,
    x = 56, y = 47, w = 10, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Sort",
    action = function()
      if sortCriteria == "name" then
        sortCriteria = "category"
      elseif sortCriteria == "category" then
        sortCriteria = "count"
      else
        sortCriteria = "name"
      end
      AddLog("ore", "Сортировка по " .. sortCriteriaDisplay[sortCriteria])
      MainDraw()
    end
  },
  changeName = {
    ButtonIn = {"change"},
    visible = true,
    x = 2, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить имя",
    action = function() ChangeItem("changeName") end
  },
  changeCategory = {
    ButtonIn = {"change"},
    visible = true,
    x = 34, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить кат.",
    action = function() ChangeItem("changeCategory") end
  },
  changeCount = {
    ButtonIn = {"change"},
    visible = true,
    x = 66, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить треб.",
    action = function() ChangeItem("changeCount") end
  },
  changeCraftSize = {
    ButtonIn = {"change"},
    visible = true,
    x = 98, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить крафт",
    action = function() ChangeItem("changeCraftSize") end
  },
  changeBack = {
    ButtonIn = {"change"},
    visible = true,
    x = 130, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Назад",
    action = function() Back() end
  }
}

scrolls = {
  Buy = {
    ScrollIn = {"start", "go", "stop"},
    iwY = 43,
    xGui = 2,
    yGui = 6,
    wGui = 76,
    hGui = 35,
    x = 80,
    y = 7,
    w = 1,
    h = 35,
    action = function() content = dataItems end
  }
}

-----------------------------------------------------
-- Инициализация системы и главный цикл

local function LoadSystem()
  g.fill(1, 1, WIDTH, HEIGHT, " ")
  dataItems = oc.loadf("/home/BD.txt")
  initButtons()
  etouch = event.listen("touch", eButton)
  escroll = event.listen("scroll", eScroll)
  ekeydown = event.listen("key_down", eKeyDown)
  toGui("start", false)
  dataq = dataItems
  MainDraw()
  return true
end

local function mainLoop()
  if LoadSystem() then
    while precraft do
      if go then
        local status, err = pcall(Check)
        if not status then
          g.set(2, HEIGHT, "Ошибка: " .. tostring(err))
          os.sleep(2)
        end
      end
      os.sleep(1)
    end
  end
end

local ok, err = pcall(mainLoop)
if not ok then
  event.cancel(etouch)
  event.cancel(escroll)
  event.cancel(ekeydown)
  g.set(2, HEIGHT, "Фатальная ошибка: " .. tostring(err))
  os.sleep(5)
end
