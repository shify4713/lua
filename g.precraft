-- precraft.lua – Идеальный PreCraft с автокрафтом, новым аккуратным GUI и встроенной загрузкой библиотеки

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local g = component.gpu
local me = component.me_interface

-- Встроенная загрузка библиотеки
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
if not fs.exists("/lib/oc.lua") then
  shell.execute("wget " .. libURL .. " /lib/oc.lua")
end
local oc = require("oc")

-- Если BD.txt не существует, создаём его
if not fs.exists("/home/BD.txt") then
  oc.savef("/home/BD.txt", {})
end

-------------------- Настройки --------------------
local debugMode = true                   -- Режим отладки
local ADM = { ["LiwMorgan"] = true }     -- Только LiwMorgan имеет права администрации
local WIDTH, HEIGHT = 80, 50
if debugMode then WIDTH, HEIGHT = 160, 50 end
g.setResolution(WIDTH, HEIGHT)

local CBUTTON = 0x00ffff
local CDRAW   = 0x004575
local CTEXT   = 0xD38FFE
g.setForeground(CTEXT)
-----------------------------------------------------

-- Глобальные переменные
local dataItems = {}        -- Данные (крафты) из BD.txt
local dataq = {}            -- Копия для автокрафта
local guiPath = {"start"}   -- Стек состояний GUI – "start", "change", "go", "stop", и т.п.
local debugLog1, debugLog2 = {}, {}  -- Логи (отладочные сообщения)
local inputFind = ""        -- Поле для поиска по имени
local scroll = 1            -- Номер первой отображаемой записи (начинается с 1)
local posSelect = nil       -- Индекс выбранного элемента в списке content
local changeItem = false    -- Режим ввода (при добавлении/редактировании)
local go = true             -- Флаг автокрафта (включён/выключён)
local precraft = true       -- Флаг работы программы

local maxScroll = 1         -- Максимальное значение скролла (рассчитывается динамически)
local content = {}          -- Отфильтрованный и отсортированный список записей
local yTouch = 0            -- Координата касания (для выбора строки)

-- Параметры сортировки
local sortCriteria = "name"   -- "name", "category", "count"
local sortCriteriaDisplay = { name = "Имя", category = "Категория", count = "Количество" }

-- Цветовая разметка: если в ME хватает – зелёный; если не хватает существенно – красный; иначе – жёлтый.
local COLOR_LOW    = 0xff0000
local COLOR_MEDIUM = 0xffcc00
local COLOR_HIGH   = 0x00ff00

-- Флаг, который сигнализирует, что нужна полная перерисовка экрана
local redrawNeeded = true

-----------------------------------------------
-- Функции отрисовки

-- Отрисовка статической области (заголовок, рамки)
local function drawStatic()
  -- Заголовок (строки 1-4)
  g.setBackground(0x000000)
  g.fill(1, 1, WIDTH, 4, " ")
  g.setForeground(CTEXT)
  local header = "PreCraft"
  g.set(math.floor((WIDTH - unicode.len(header)) / 2), 2, header)
  g.set(2, 3, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])
  
  -- Рисуем границу таблицы
  -- Таблица начинается с (2,5) и занимает около 60 столбцов и 36 строк (5+36=41)
  g.setBackground(0x000000)
  -- Рисуем заголовок таблицы
  local tableHeader = string.format("|%3s|%-30s|%5s|%5s|%6s|", "Idx", "Name", "Req", "ME", "Craft")
  g.set(2, 5, tableHeader)
  -- Рисуем горизонтальную линию под заголовком
  g.set(2, 6, string.rep("-", 57))
end

-- Отрисовка динамической области – только товары (строки 7 до 41)
local function drawTableItems()
  local startX = 2
  local headerRow = 5
  local startRow = headerRow + 2  -- начиная с 7-й строки
  local visibleRows = 35          -- показываем до 35 записей
  -- Очищаем область таблицы
  for row = startRow, startRow + visibleRows - 1 do
    g.setBackground(0x000000)
    g.fill(startX, row, 60, 1, " ")
  end

  for i = scroll, math.min(#content, scroll + visibleRows - 1) do
    local row = startRow + (i - scroll)
    local item = content[i]
    local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
    local currentQty = (detail and detail.basic() and detail.basic().qty) or 0
    -- Определяем цвет для строки: если в ME достаточно, то зелёный; если не хватает – красный; иначе жёлтый.
    local colorText = CTEXT
    if currentQty >= item.count then
      colorText = COLOR_HIGH
    elseif (item.count - currentQty) >= math.floor(item.count * 0.5) then
      colorText = COLOR_LOW
    else
      colorText = COLOR_MEDIUM
    end
    if posSelect and i == posSelect then
      g.setBackground(0x1e1e1e)
    else
      g.setBackground(0x000000)
    end
    g.setForeground(colorText)
    local line = string.format("|%3d|%-30s|%5d|%5d|%6d|", i, item.name, item.count, currentQty, item.craftSize)
    g.set(startX, row, line)
  end
end

-- Отрисовка скроллбара справа от таблицы
local function drawScrollBar()
  oc.drawscroll(63, 7, 1, 35, scroll, #content, 0x1e1e1e, 0x004575)
end

-- Отрисовка кнопок – фиксированная область в нижней части
local function drawButtons()
  for _, button in pairs(buttons) do
    for _, state in ipairs(button.ButtonIn) do
      if state == guiPath[#guiPath] and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, button.ctext, button.cbutton, button.text)
      end
    end
  end
end

-- Полная перерисовка, вызывается, когда установлен флаг redrawNeeded
local function fullRedraw()
  drawStatic()
  drawTableItems()
  drawScrollBar()
  drawButtons()
  if WIDTH >= 85 then UpdateLogs() end
end

-----------------------------------------------------
-- Функции работы с данными и GUI

local function updateContent()
  -- Фильтрация по имени
  if inputFind ~= "" then
    content = {}
    for _, item in ipairs(dataItems) do
      if unicode.lower(item.name):find(unicode.lower(inputFind)) then
        table.insert(content, item)
      end
    end
  else
    content = {}
    for _, item in ipairs(dataItems) do table.insert(content, item) end
  end
  -- Сортировка
  if sortCriteria == "name" then
    table.sort(content, function(a, b) return a.name:lower() < b.name:lower() end)
  elseif sortCriteria == "category" then
    table.sort(content, function(a, b) return (a.category or ""):lower() < (b.category or ""):lower() end)
  elseif sortCriteria == "count" then
    table.sort(content, function(a, b) return tonumber(a.count) < tonumber(b.count) end)
  end
  maxScroll = math.max(1, #content - 35 + 1)
end

local function requestRedraw() 
  redrawNeeded = true 
end

-- Переход в новое состояние GUI
local function toGui(state, clear)
  if clear then guiPath[#guiPath] = nil end
  if guiPath[#guiPath] ~= state then table.insert(guiPath, state) end
  dataItems = oc.loadf("/home/BD.txt")
  updateContent()
  requestRedraw()
end

-- Возврат на предыдущий экран
local function Back(to)
  if to then
    while #guiPath > to do table.remove(guiPath) end
  else
    table.remove(guiPath)
  end
  posSelect = nil
  requestRedraw()
end

-- Логирование (отдельно обновляется область логов)
local function addLog(logType, msg)
  if logType == "ore" then
    if #debugLog1 > 19 then table.remove(debugLog1, 1) end
    table.insert(debugLog1, msg)
  else
    if #debugLog2 > 19 then table.remove(debugLog2, 1) end
    table.insert(debugLog2, msg)
  end
  if WIDTH >= 85 then UpdateLogs() end
end

-----------------------------------------------------
-- Функция автокрафта (оригинальная логика с защитой)

local function Check()
  for i = 1, #dataq do
    if not go then break end
    local item = dataq[i]
    if not item.craft or item.craft.isDone() or item.craft.isCanceled() then
      item.craft = nil
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      if detail then
        local currentQty = (detail.basic() and detail.basic().qty) or 0
        local delta = item.count - currentQty
        if delta > item.craftSize then delta = item.craftSize end
        if delta > 0 then
          local cpus = me.getCpus()
          for j = 1, #cpus do
            if not cpus[j].busy and cpus[j].storage == item.cpu then
              local craftables = me.getCraftables({name = item.id, damage = item.dmg})
              if craftables.n and craftables.n >= 1 then
                item.craft = craftables[1].request(delta, false, tostring(item.cpu))
                if debugMode then
                  local canceled, cancelmsg = item.craft.isCanceled()
                  if not canceled and cancelmsg then
                    if cancelmsg == "computing" then
                      addLog("ore", item.name .. " не хватает ресурсов (" .. cancelmsg .. ")")
                    end
                  elseif cancelmsg == "request failed (missing resources?)" then
                    addLog("ore", item.name .. " не хватает ресурсов (" .. cancelmsg .. ")")
                  elseif cancelmsg then
                    addLog("ore", item.name .. " " .. cancelmsg)
                  end
                  os.sleep(0.5)
                  break
                end
              elseif debugMode then
                addLog("recipe", item.name .. " не имеет рецепта")
              end
              break
            end
          end
        end
      end
    end
  end
  os.sleep(1)
  addLog("ore", "")
  addLog("recipe", "")
end

-----------------------------------------------------
-- Управление предметами

local function AddItem()
  changeItem = true
  if me.getStackInSlot(1) then
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите название:")
    term.setCursor(20,43)
    local name = tostring(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите категорию:")
    term.setCursor(20,43)
    local category = tostring(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите требуемое число:")
    term.setCursor(25,43)
    local count = tonumber(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    g.set(2,43, "Введите объём крафта:")
    term.setCursor(25,43)
    local craftSize = tonumber(io.read())
    g.fill(1,43, WIDTH, 1, " ")
    local stack = me.getStackInSlot(1)
    table.insert(dataItems, {name = name, category = category, id = stack.id, dmg = stack.dmg, count = count, craftSize = craftSize, cpu = 65536})
    oc.savef("/home/BD.txt", dataItems)
  else
    g.set(2,43, "Предмет не установлен в 1-й слот!")
    os.sleep(2)
    g.fill(1,43, WIDTH, 1, " ")
  end
  dataItems = oc.loadf("/home/BD.txt")
  updateContent()
  requestRedraw()
  changeItem = false
end

local function RemoveItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        table.remove(dataItems, i)
        oc.savef("/home/BD.txt", dataItems)
        posSelect = nil
        dataItems = oc.loadf("/home/BD.txt")
        updateContent()
        requestRedraw()
        return true
      end
    end
  end
end

local function EditItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        posSelect = i
        toGui("change", false)
        return true
      end
    end
  end
end

local function ChangeItem(action)
  if posSelect then
    g.fill(1,45, WIDTH, 1, " ")
    if action == "changeName" then
      g.set(2,45, "Введите новое имя:")
      term.setCursor(25,45)
      dataItems[posSelect].name = tostring(io.read())
    elseif action == "changeCategory" then
      g.set(2,45, "Введите новую категорию:")
      term.setCursor(25,45)
      dataItems[posSelect].category = tostring(io.read())
    elseif action == "changeCount" then
      g.set(2,45, "Введите новое требуемое число:")
      term.setCursor(30,45)
      dataItems[posSelect].count = tonumber(io.read())
    elseif action == "changeCraftSize" then
      g.set(2,45, "Введите новый объём крафта:")
      term.setCursor(30,45)
      dataItems[posSelect].craftSize = tonumber(io.read())
    end
    oc.savef("/home/BD.txt", dataItems)
    dataItems = oc.loadf("/home/BD.txt")
    updateContent()
    requestRedraw()
  end
end

-----------------------------------------------------
-- Обработчики событий

local function onTouch(_, _, x, y, _, nick)
  if ADM[nick] then
    for _, button in pairs(buttons) do
      if x >= button.x and x <= button.x + button.w - 1 and
         y >= button.y and y <= button.y + button.h - 1 then
        for _, state in ipairs(button.ButtonIn) do
          if state == guiPath[#guiPath] then
            yTouch = y
            button.action()
            return true
          end
        end
      end
    end
    -- Если касание произошло внутри области таблицы (строки 7-41, столбцы 2-60), выбираем элемент:
    if x >= 2 and x <= 60 and y >= 7 and y <= 41 then
      posSelect = scroll + (y - 6)
      requestRedraw()
    end
  end
end

local function onScroll(_, _, _, _, dir, nick)
  if ADM[nick] then
    if guiPath[#guiPath] == "start" or guiPath[#guiPath] == "stop" or guiPath[#guiPath] == "go" then
      if dir == 1 and scroll > 1 then
        scroll = scroll - 1
      elseif dir == -1 and scroll < maxScroll then
        scroll = scroll + 1
      end
      requestRedraw()
    end
  end
end

local function onKeyDown(_, _, key, code, nick)
  if ADM[nick] and not changeItem then
    if guiPath[#guiPath] == "start" or guiPath[#guiPath] == "stop" or guiPath[#guiPath] == "go" then
      if key == 8 then                          -- Backspace
        inputFind = unicode.sub(inputFind, 1, -2)
      elseif key == 0 and code == 211 then        -- Delete
        inputFind = ""
      elseif key ~= 0 then                        -- Добавляем символ
        if inputFind == nil or inputFind == "" then
          inputFind = unicode.char(key)
        elseif unicode.len(inputFind) < 49 then
          inputFind = inputFind .. unicode.char(key)
        end
      end
      updateContent()
      requestRedraw()
    end
  end
end

local function initButtons()
  for _, button in pairs(buttons) do
    button.endX = button.x + button.w - 1
    button.endY = button.y + button.h - 1
  end
end

-----------------------------------------------------
-- Определения кнопок

buttons = {
  LOGO = {
    ButtonIn = {"start", "go", "stop", "change"},
    visible = true,
    x = 10, y = 1, w = 62, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "PreCraft",
    action = function() end
  },
  Exit = {
    ButtonIn = {"start", "go", "stop", "change"},
    visible = false,
    x = 1, y = 1, w = 1, h = 1,
    cbutton = CDRAW, ctext = CBUTTON, text = "",
    action = function()
      g.setResolution(160, 50)
      event.cancel(etouch)
      event.cancel(escroll)
      event.cancel(ekeydown)
      precraft = false
    end
  },
  Go = {
    ButtonIn = {"start", "go"},
    visible = true,
    x = 14, y = 47, w = 24, h = 3,
    cbutton = 0x28C730, ctext = 0x28C730, text = "Go",
    action = function() end
  },
  GoTrue = {
    ButtonIn = {"stop"},
    visible = true,
    x = 14, y = 47, w = 24, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Go",
    action = function()
      toGui("go", false)
      dataq = dataItems
      go = true
      requestRedraw()
    end
  },
  Stop = {
    ButtonIn = {"stop"},
    visible = true,
    x = 43, y = 47, w = 24, h = 3,
    cbutton = 0xff0000, ctext = 0xff0000, text = "Stop",
    action = function() end
  },
  StopTrue = {
    ButtonIn = {"start", "go"},
    visible = true,
    x = 43, y = 47, w = 24, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Stop",
    action = function()
      toGui("stop", false)
      go = false
      requestRedraw()
    end
  },
  Add = {
    ButtonIn = {"stop"},
    visible = true,
    x = 20, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Добавить]",
    action = function() AddItem() end
  },
  Change = {
    ButtonIn = {"stop"},
    visible = true,
    x = 32, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Изменить]",
    action = function() EditItem() end
  },
  Remove = {
    ButtonIn = {"stop"},
    visible = true,
    x = 44, y = 47, w = 10, h = 3,
    cbutton = nil, ctext = 0x00ffff, text = "[Удалить]",
    action = function() RemoveItem() end
  },
  Sort = {
    ButtonIn = {"start", "stop", "go"},
    visible = true,
    x = 56, y = 47, w = 10, h = 3,
    cbutton = 0x00ffff, ctext = 0x00ffff, text = "Sort",
    action = function()
      if sortCriteria == "name" then
        sortCriteria = "category"
      elseif sortCriteria == "category" then
        sortCriteria = "count"
      else
        sortCriteria = "name"
      end
      addLog("ore", "Сортировка по " .. sortCriteriaDisplay[sortCriteria])
      updateContent()
      requestRedraw()
    end
  },
  changeName = {
    ButtonIn = {"change"},
    visible = true,
    x = 2, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить имя",
    action = function() ChangeItem("changeName") end
  },
  changeCategory = {
    ButtonIn = {"change"},
    visible = true,
    x = 34, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить кат.",
    action = function() ChangeItem("changeCategory") end
  },
  changeCount = {
    ButtonIn = {"change"},
    visible = true,
    x = 66, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить треб.",
    action = function() ChangeItem("changeCount") end
  },
  changeCraftSize = {
    ButtonIn = {"change"},
    visible = true,
    x = 98, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Изменить крафт",
    action = function() ChangeItem("changeCraftSize") end
  },
  changeBack = {
    ButtonIn = {"change"},
    visible = true,
    x = 130, y = 25, w = 30, h = 3,
    cbutton = CDRAW, ctext = CBUTTON, text = "Назад",
    action = function() Back() end
  }
}

-- Если требуется, можно задать область скролла (эта схема – справа от таблицы)
scrolls = {
  Buy = {
    ScrollIn = {"start", "go", "stop"},
    iwY = 43,
    xGui = 2,
    yGui = 6,
    wGui = 76,
    hGui = 35,
    x = 80,
    y = 7,
    w = 1,
    h = 35,
    action = function() content = dataItems end
  }
}

-----------------------------------------------------
-- Инициализация и основной цикл

local function LoadSystem()
  g.fill(1, 1, WIDTH, HEIGHT, " ")
  dataItems = oc.loadf("/home/BD.txt")
  initButtons()
  etouch = event.listen("touch", onTouch)
  escroll = event.listen("scroll", onScroll)
  ekeydown = event.listen("key_down", onKeyDown)
  toGui("start", false)
  dataq = dataItems
  fullRedraw()
  return true
end

-- Вместо постоянной перерисовки, основной цикл проверяет флаг redrawNeeded
local function mainLoop()
  if LoadSystem() then
    while precraft do
      if go then
        local status, err = pcall(Check)
        if not status then
          g.set(2, HEIGHT, "Ошибка: " .. tostring(err))
          os.sleep(2)
        end
      end
      if redrawNeeded then
        fullRedraw()
        redrawNeeded = false
      end
      os.sleep(0.2)
    end
  end
end

local ok, err = pcall(mainLoop)
if not ok then
  event.cancel(etouch)
  event.cancel(escroll)
  event.cancel(ekeydown)
  g.set(2, HEIGHT, "Фатальная ошибка: " .. tostring(err))
  os.sleep(5)
end
