-- precraft.lua
-- Основная программа PreCraft с улучшенным UI, оптимизированными размерами таблицы и отлаженным функционалом кнопок

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local gpu = component.gpu
local me = component.me_interface

-- Если библиотеки oc.lua нет, загружаем её
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
local libPath = "/lib/oc.lua"
if not fs.exists(libPath) then
  shell.execute("wget " .. libURL .. " " .. libPath)
end
local oc = require("oc")

-- Работа с файлом данных
local dataFile = "/home/BD.txt"
if not fs.exists(dataFile) then
  oc.savef(dataFile, {})
end

-------------------- НАСТРОЙКИ --------------------
local debugMode = true
local ADM = { ["LiwMorgan"] = true } -- Доступ только для LiwMorgan
local WIDTH, HEIGHT = 160, 50
gpu.setResolution(WIDTH, HEIGHT)

-- Цвета интерфейса
local CBUTTON = 0x00ffff
local CDRAW   = 0x004575
local CTEXT   = 0xD38FFE

-- Цветовая индикация для строк таблицы
local COLOR_LOW    = 0xff0000  -- Красный – недостаточно
local COLOR_MEDIUM = 0xffcc00  -- Желтый – промежуточное
local COLOR_HIGH   = 0x00ff00  -- Зеленый – достаточно

------------------ РАЗМЕРЫ ЭЛЕМЕНТОВ -----------------
local TABLE_X = 2
local TABLE_WIDTH = 128  -- Новая ширина таблицы (растянута до области логов)
local LOGS_X = TABLE_X + TABLE_WIDTH + 2  -- Логи начинаются с 132-го столбца
local HEADER_Y = 2
local TABLE_HEADER_Y = 5
local TABLE_BODY_START_Y = 7
local VISIBLE_TABLE_ROWS = 35

---------------------------------------------------------
-- Глобальные переменные
local dataItems = {}    -- Объекты из dataFile
local dataQueue = {}    -- Копия для автокрафта
local guiPath = {"start"}  -- Стек состояний ("start" или "change")
local debugLog1, debugLog2 = {}, {}   -- Логи
local inputFind = ""   -- Фильтр по имени
local scroll = 1       -- Позиция прокрутки
local posSelect = nil  -- Индекс выбранного элемента
local changeItem = false   -- Флаг ввода в режиме редактирования

local craftingActive = false   -- Флаг автокрафта (ToggleCraft)
local running = true           -- Флаг работы цикла

local maxScroll = 1     -- Максимальное смещение прокрутки
local content = {}      -- Отфильтрованный и отсортированный список

local sortCriteria = "name"   -- Возможные значения: "name", "category", "count"
local sortCriteriaDisplay = { name = "Имя", category = "Категория", count = "Количество" }

local redrawNeeded = true     -- Флаг необходимости перерисовки экрана

---------------- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ------------------

local function updateContent()
  content = {}
  if inputFind ~= "" then
    for _, item in ipairs(dataItems) do
      if unicode.lower(item.name):find(unicode.lower(inputFind)) then
        table.insert(content, item)
      end
    end
  else
    for _, item in ipairs(dataItems) do
      table.insert(content, item)
    end
  end

  if sortCriteria == "name" then
    table.sort(content, function(a, b) return a.name:lower() < b.name:lower() end)
  elseif sortCriteria == "category" then
    table.sort(content, function(a, b) return (a.category or ""):lower() < (b.category or ""):lower() end)
  elseif sortCriteria == "count" then
    table.sort(content, function(a, b) return tonumber(a.count) < tonumber(b.count) end)
  end

  maxScroll = math.max(1, #content - VISIBLE_TABLE_ROWS + 1)
end

local function requestRedraw()
  redrawNeeded = true
end

local function toGui(state, clear)
  if clear then guiPath[#guiPath] = nil end
  if guiPath[#guiPath] ~= state then table.insert(guiPath, state) end
  dataItems = oc.loadf(dataFile)
  updateContent()
  requestRedraw()
end

local function goBack()
  table.remove(guiPath)
  posSelect = nil
  requestRedraw()
end

local function addLog(logType, msg)
  if logType == "ore" then
    if #debugLog1 > 19 then table.remove(debugLog1, 1) end
    table.insert(debugLog1, msg)
  else
    if #debugLog2 > 19 then table.remove(debugLog2, 1) end
    table.insert(debugLog2, msg)
  end
  local prevBg = gpu.getBackground()
  gpu.setBackground(0x000000)
  gpu.fill(LOGS_X, HEADER_Y, WIDTH - LOGS_X + 1, HEIGHT - HEADER_Y, " ")
  gpu.setForeground(CTEXT)
  for i = 1, #debugLog1 do
    gpu.set(LOGS_X + 2, HEADER_Y + i, tostring(debugLog1[i]))
  end
  for i = 1, #debugLog2 do
    gpu.set(LOGS_X + 2, HEADER_Y + 15 + i, tostring(debugLog2[i]))
  end
  gpu.setBackground(prevBg)
end

-------------------- ОТРИСОВКА ------------------------

local function drawStatic()
  gpu.setBackground(0x000000)
  gpu.fill(1, 1, WIDTH, HEADER_Y + 2, " ")
  gpu.setForeground(CTEXT)
  local header = "PreCraft"
  gpu.set(math.floor((WIDTH - unicode.len(header)) / 2), HEADER_Y, header)
  gpu.set(2, HEADER_Y + 1, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])
  
  -- Заголовок таблицы: расширенный формат
  local headerStr = string.format("|%-4s|%-50s|%-8s|%-8s|%-10s|", "Idx", "Name", "Req", "ME", "Craft")
  headerStr = headerStr .. string.rep(" ", TABLE_WIDTH - unicode.len(headerStr))
  gpu.set(TABLE_X, TABLE_HEADER_Y, headerStr)
  gpu.set(TABLE_X, TABLE_HEADER_Y + 1, string.rep("-", TABLE_WIDTH))
  
  -- Зона логов
  gpu.setBackground(0x000000)
  gpu.fill(LOGS_X, HEADER_Y, WIDTH - LOGS_X + 1, HEIGHT - HEADER_Y, " ")
  gpu.setForeground(CTEXT)
  gpu.set(LOGS_X + 2, HEADER_Y, "Logs:")
end

local function drawTableItems()
  for row = TABLE_BODY_START_Y, TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS - 1 do
    gpu.setBackground(0x000000)
    gpu.fill(TABLE_X, row, TABLE_WIDTH, 1, " ")
  end
  
  for i = scroll, math.min(#content, scroll + VISIBLE_TABLE_ROWS - 1) do
    local row = TABLE_BODY_START_Y + (i - scroll)
    local item = content[i]
    local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
    local currentQty = (detail and detail.basic() and detail.basic().qty) or 0
    local diff = item.count - currentQty
    local colorText = CTEXT
    if currentQty >= item.count then
      colorText = COLOR_HIGH
    elseif diff >= math.floor(item.count * 0.5) then
      colorText = COLOR_LOW
    else
      colorText = COLOR_MEDIUM
    end
    if posSelect and i == posSelect then
      gpu.setBackground(0x1e1e1e)
    else
      gpu.setBackground(0x000000)
    end
    local line = string.format("|%-4d|%-50s|%-8d|%-8d|%-10d|", i, item.name, item.count, currentQty, item.craftSize)
    line = line .. string.rep(" ", TABLE_WIDTH - unicode.len(line))
    gpu.setForeground(colorText)
    gpu.set(TABLE_X, row, line)
  end
end

local function drawScrollBar()
  oc.drawscroll(TABLE_X + TABLE_WIDTH, TABLE_BODY_START_Y, 1, VISIBLE_TABLE_ROWS, scroll, #content, 0x1e1e1e, 0x004575)
end

-- Отрисовка кнопок – перебор по массиву (по порядку)
local function drawButtons()
  for i = 1, #buttons do
    local button = buttons[i]
    for j = 1, #button.ButtonIn do
      if button.ButtonIn[j] == guiPath[#guiPath] and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, button.ctext, button.cbutton or 0x000000, button.text)
      end
    end
  end
end

-- В режиме "change" рисуется модальное окно редактирования
local function drawEditMode()
  local dialogX, dialogY, dialogW, dialogH = 20, 15, 120, 20
  gpu.setBackground(0x1e1e1e)
  for y = dialogY, dialogY + dialogH - 1 do
    gpu.fill(dialogX, y, dialogW, 1, " ")
  end
  gpu.setForeground(CTEXT)
  local header = "Редактирование предмета"
  gpu.set(dialogX + math.floor((dialogW - unicode.len(header)) / 2), dialogY + 1, header)
  
  local item = dataItems[posSelect]
  if item then
    gpu.set(dialogX + 2, dialogY + 3, "Имя: " .. item.name)
    gpu.set(dialogX + 2, dialogY + 4, "Категория: " .. item.category)
    gpu.set(dialogX + 2, dialogY + 5, "Треб: " .. item.count)
    gpu.set(dialogX + 2, dialogY + 6, "Крафт: " .. item.craftSize)
  end

  -- Рисуем кнопки режима редактирования
  for i = 1, #buttons do
    local button = buttons[i]
    for j = 1, #button.ButtonIn do
      if button.ButtonIn[j] == "change" and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, button.ctext, button.cbutton or 0x000000, button.text)
      end
    end
  end
end

local function fullRedraw()
  if guiPath[#guiPath] == "change" then
    drawEditMode()
  else
    drawStatic()
    updateContent()
    drawTableItems()
    drawScrollBar()
    drawButtons()
  end
  addLog("ore", "")
  addLog("recipe", "")
end

------------------- АВТО-КРАФТ -----------------------

local function autoCraftCheck()
  for i, item in ipairs(dataQueue) do
    if not item.craft or item.craft.isDone() or item.craft.isCanceled() then
      item.craft = nil
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      if detail then
        local currentQty = (detail.basic() and detail.basic().qty) or 0
        local delta = item.count - currentQty
        if delta > item.craftSize then delta = item.craftSize end
        if delta > 0 then
          local cpus = me.getCpus()
          for _, cpu in ipairs(cpus) do
            if not cpu.busy and cpu.storage == item.cpu then
              local craftables = me.getCraftables({name = item.id, damage = item.dmg})
              if craftables.n and craftables.n >= 1 then
                item.craft = craftables[1].request(delta, false, tostring(item.cpu))
                if debugMode then
                  local canceled, cancelmsg = item.craft.isCanceled()
                  if cancelmsg then
                    addLog("ore", item.name .. ": " .. cancelmsg)
                  end
                end
                break
              else
                if debugMode then
                  addLog("recipe", item.name .. " не имеет рецепта")
                end
              end
            end
          end
        end
      end
    end
  end
  os.sleep(1)
end

---------------- УПРАВЛЕНИЕ ПРЕДМЕТАМИ ------------------

local function addItem()
  changeItem = true
  local stack = me.getStackInSlot(1)
  if stack then
    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите название:")
    term.setCursor(20, 43)
    local name = tostring(io.read())

    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите категорию:")
    term.setCursor(20, 43)
    local category = tostring(io.read())

    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите требуемое число:")
    term.setCursor(25, 43)
    local count = tonumber(io.read())

    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите объём крафта:")
    term.setCursor(25, 43)
    local craftSize = tonumber(io.read())

    gpu.fill(1, 43, WIDTH, 1, " ")
    table.insert(dataItems, {name = name, category = category, id = stack.id, dmg = stack.dmg, count = count, craftSize = craftSize, cpu = 65536})
    oc.savef(dataFile, dataItems)
  else
    gpu.set(2, 43, "Предмет не установлен в 1-й слот!")
    os.sleep(2)
    gpu.fill(1, 43, WIDTH, 1, " ")
  end
  dataItems = oc.loadf(dataFile)
  updateContent()
  requestRedraw()
  changeItem = false
end

local function removeItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        table.remove(dataItems, i)
        oc.savef(dataFile, dataItems)
        posSelect = nil
        dataItems = oc.loadf(dataFile)
        updateContent()
        requestRedraw()
        return true
      end
    end
  end
end

local function editItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        posSelect = i
        toGui("change", false)
        return true
      end
    end
  end
end

local function changeItemData(action)
  if posSelect then
    gpu.fill(1, 45, WIDTH, 1, " ")
    if action == "changeName" then
      gpu.set(2, 45, "Введите новое имя:")
      term.setCursor(25, 45)
      dataItems[posSelect].name = tostring(io.read())
    elseif action == "changeCategory" then
      gpu.set(2, 45, "Введите новую категорию:")
      term.setCursor(25, 45)
      dataItems[posSelect].category = tostring(io.read())
    elseif action == "changeCount" then
      gpu.set(2, 45, "Введите новое требуемое число:")
      term.setCursor(30, 45)
      dataItems[posSelect].count = tonumber(io.read())
    elseif action == "changeCraftSize" then
      gpu.set(2, 45, "Введите новый объём крафта:")
      term.setCursor(30, 45)
      dataItems[posSelect].craftSize = tonumber(io.read())
    end
    oc.savef(dataFile, dataItems)
    dataItems = oc.loadf(dataFile)
    updateContent()
    requestRedraw()
  end
end

------------------- ОБРАБОТЧИКИ СОБЫТИЙ ------------------

local function onTouch(_, _, x, y, _, nick)
  if ADM[nick] then
    for i = 1, #buttons do
      local button = buttons[i]
      if x >= button.x and x <= (button.x + button.w - 1) and
         y >= button.y and y <= (button.y + button.h - 1) then
        for j = 1, #button.ButtonIn do
          if button.ButtonIn[j] == guiPath[#guiPath] then
            button.action()
            return true
          end
        end
      end
    end
    if guiPath[#guiPath] == "start" and
       x >= TABLE_X and x <= (TABLE_X + TABLE_WIDTH - 1) and 
       y >= TABLE_BODY_START_Y and y < (TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS) then
      posSelect = scroll + (y - TABLE_BODY_START_Y)
      requestRedraw()
    end
  end
end

local function onScroll(_, _, _, _, dir, nick)
  if ADM[nick] then
    if guiPath[#guiPath] == "start" then
      if dir == 1 and scroll > 1 then
        scroll = scroll - 1
      elseif dir == -1 and scroll < maxScroll then
        scroll = scroll + 1
      end
      requestRedraw()
    end
  end
end

local function onKeyDown(_, _, key, code, nick)
  if ADM[nick] and not changeItem then
    if guiPath[#guiPath] == "start" then
      if key == 8 then
        inputFind = unicode.sub(inputFind, 1, -2)
      elseif key == 0 and code == 211 then
        inputFind = ""
      elseif key ~= 0 then
        if inputFind == "" then
          inputFind = unicode.char(key)
        elseif unicode.len(inputFind) < 49 then
          inputFind = inputFind .. unicode.char(key)
        end
      end
      updateContent()
      requestRedraw()
    end
  end
end

----------------- ИНИЦИАЛИЗАЦИЯ КНОПОК -----------------

local buttons = {
  -- Кнопки основного режима ("start")
  {
    ButtonIn = {"start"}, visible = true,
    x = 2, y = 47, w = 12, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Exit",
    action = function()
      gpu.setResolution(160, 50)
      event.cancel(touchEvent)
      event.cancel(scrollEvent)
      event.cancel(keyDownEvent)
      os.exit()
    end
  },
  {
    ButtonIn = {"start"}, visible = true,
    x = 16, y = 47, w = 24, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Craft: OFF",
    action = function()
      craftingActive = not craftingActive
      if craftingActive then
         buttons[2].text = "Craft: ON"
      else
         buttons[2].text = "Craft: OFF"
      end
      requestRedraw()
    end
  },
  {
    ButtonIn = {"start"}, visible = true,
    x = 42, y = 47, w = 12, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Add",
    action = addItem
  },
  {
    ButtonIn = {"start"}, visible = true,
    x = 56, y = 47, w = 12, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Edit",
    action = editItem
  },
  {
    ButtonIn = {"start"}, visible = true,
    x = 70, y = 47, w = 12, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Remove",
    action = removeItem
  },
  {
    ButtonIn = {"start"}, visible = true,
    x = 84, y = 47, w = 12, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Sort",
    action = function()
      if sortCriteria == "name" then
        sortCriteria = "category"
      elseif sortCriteria == "category" then
        sortCriteria = "count"
      else
        sortCriteria = "name"
      end
      addLog("ore", "Сортировка по " .. sortCriteriaDisplay[sortCriteria])
      updateContent()
      requestRedraw()
    end
  },
  -- Кнопки режима редактирования ("change")
  {
    ButtonIn = {"change"}, visible = true,
    x = 25, y = 18, w = 20, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Изм. имя",
    action = function() changeItemData("changeName") end
  },
  {
    ButtonIn = {"change"}, visible = true,
    x = 50, y = 18, w = 20, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Изм. кат.",
    action = function() changeItemData("changeCategory") end
  },
  {
    ButtonIn = {"change"}, visible = true,
    x = 75, y = 18, w = 20, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Изм. треб.",
    action = function() changeItemData("changeCount") end
  },
  {
    ButtonIn = {"change"}, visible = true,
    x = 100, y = 18, w = 20, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Изм. крафт",
    action = function() changeItemData("changeCraftSize") end
  },
  {
    ButtonIn = {"change"}, visible = true,
    x = 60, y = 26, w = 20, h = 3,
    cbutton = CDRAW, ctext = 0xFFFFFF, text = "Назад",
    action = goBack
  }
}

------------------ ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ ------------------

local touchEvent, scrollEvent, keyDownEvent

local function LoadSystem()
  gpu.fill(1, 1, WIDTH, HEIGHT, " ")
  dataItems = oc.loadf(dataFile)
  if not dataItems then dataItems = {} end
  updateContent()
  touchEvent = event.listen("touch", onTouch)
  scrollEvent = event.listen("scroll", onScroll)
  keyDownEvent = event.listen("key_down", onKeyDown)
  toGui("start", false)
  dataQueue = dataItems
  fullRedraw()
  return true
end

local function mainLoop()
  if LoadSystem() then
    while running do
      if craftingActive then
        local status, err = pcall(autoCraftCheck)
        if not status then
          gpu.set(2, HEIGHT, "Ошибка: " .. tostring(err))
          os.sleep(2)
          os.exit()
        end
      end
      if redrawNeeded then
        fullRedraw()
        redrawNeeded = false
      end
      os.sleep(0.2)
    end
  end
end

local ok, err = pcall(mainLoop)
if not ok then
  event.cancel(touchEvent)
  event.cancel(scrollEvent)
  event.cancel(keyDownEvent)
  gpu.set(2, HEIGHT, "Фатальная ошибка: " .. tostring(err))
  os.sleep(5)
  os.exit()
end
