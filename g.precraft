-- PreCraft Auto-Crafting Tool (OpenOS 1.6.1, Lua 5.2)
-- Обновлённый дизайн, минимальное мерцание, последовательный ввод при Add и Edit,
-- оптимизированные логи, крафты только на 256К хранилищах

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local gpu = component.gpu
local me = component.me_interface

-- Если библиотеки oc.lua нет, загружаем её
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
local libPath = "/lib/oc.lua"
if not fs.exists(libPath) then
  shell.execute("wget " .. libURL .. " " .. libPath)
end
local oc = require("oc")

-- Работа с файлом данных
local dataFile = "/home/BD.txt"
if not fs.exists(dataFile) then
  oc.savef(dataFile, {})
end

---------------------- НАСТРОЙКИ ----------------------
local debugMode = true
local ADM = { ["LiwMorgan"] = true }  -- Доступ только для LiwMorgan

-- Разрешение экрана
local WIDTH, HEIGHT = 160, 50
gpu.setResolution(WIDTH, HEIGHT)

---------------------- ПАЛИТРА ЦВЕТОВ ----------------------
local BG_MAIN             = 0x1A1A1A  -- Тёмно-серый фон
local CTEXT               = 0xDADADA  -- Светло-серый текст
local COLOR_BUTTON        = 0x4A90E2  -- Синий для кнопок
local COLOR_BUTTON_TEXT   = 0xFFFFFF  -- Белый текст на кнопках
local COLOR_HIGHLIGHT     = 0x3A3A3A  -- Подсветка выбранной строки
local COLOR_LOW           = 0xFF4C4C  -- Красный – недостаточно
local COLOR_MEDIUM        = 0xFFCC00  -- Желтый – промежуточно
local COLOR_HIGH          = 0x00FF66  -- Зелёный – достаточно

local BG_ALT              = 0x2A2A2A  -- Альтернативный фон для четных строк таблицы
local COLOR_HEADER_BG     = 0x333333  -- Фон заголовка таблицы и шапки
local COLOR_LOG_BG        = 0x2D2D2D  -- Фон области логов
local COLOR_BUTTON_BORDER = 0x000000  -- Граница кнопок

---------------------- РАЗМЕРЫ UI КОМПОНЕНТОВ ----------------------
-- Обновлённая ширина таблицы для улучшенного отображения
local TABLE_X = 2
local TABLE_WIDTH = 98   -- Новая ширина таблицы согласно форматированию
local LOGS_X = TABLE_X + TABLE_WIDTH + 2  -- Лог-область справа
local HEADER_Y = 2       -- Отступ для заголовка
local TABLE_HEADER_Y = HEADER_Y + 3
local TABLE_BODY_START_Y = TABLE_HEADER_Y + 2
local VISIBLE_TABLE_ROWS = 35

---------------------- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ----------------------
local dataItems = {}    -- Объекты, загруженные из файла
local dataQueue = {}    -- Копия для автокрафта

-- Режим всегда "start" – теперь редактирование осуществляется через последовательный ввод
local guiPath = {"start"}
local inputFind = ""      -- Фильтр поиска по имени
local scroll = 1          -- Текущая позиция прокрутки
local posSelect = nil     -- Выбранный индекс в массиве content (на экране)
local craftingActive = false  -- Флаг автокрафта
local running = true          -- Главный флаг работы программы
local maxScroll = 1           -- Максимальное смещение прокрутки

-- Массив отфильтрованных и отсортированных элементов.
-- Каждая запись: { idx = исходный_индекс, item = объект }
local content = {}

local sortCriteria = "name"   -- Возможные значения: "name", "category", "count"
local sortCriteriaDisplay = { name = "Имя", category = "Категория", count = "Количество" }

local redrawNeeded = true     -- Флаг необходимости перерисовки экрана
local craftLogs = {}          -- Логирование (храним до 10 записей)
local buttons = {}            -- Таблица кнопок (инициализируется ниже)

local staticDrawn = false     -- Флаг для статической отрисовки (чтобы не очищать экран каждый раз)

---------------------- ФУНКЦИЯ РИСОВАНИЯ ГРАНИЦЫ ----------------------
local function drawBorder(x, y, w, h, fgColor)
  fgColor = fgColor or CTEXT
  gpu.setForeground(fgColor)
  gpu.set(x, y, "┌" .. string.rep("─", w - 2) .. "┐")
  gpu.set(x, y + h - 1, "└" .. string.rep("─", w - 2) .. "┘")
  for i = y + 1, y + h - 2 do
    gpu.set(x, i, "│")
    gpu.set(x + w - 1, i, "│")
  end
end

---------------------- СТАЧНЫЙ ДИЗАЙН UI ----------------------
local function drawStaticUI()
  -- Очищаем экран только один раз
  gpu.setBackground(BG_MAIN)
  gpu.fill(1, 1, WIDTH, HEIGHT, " ")
  
  -- Шапка
  gpu.setBackground(COLOR_HEADER_BG)
  gpu.fill(1, HEADER_Y, WIDTH, 3, " ")
  gpu.setForeground(CTEXT)
  local header = "PreCraft - Автокрафт предметов"
  gpu.set(math.floor((WIDTH - unicode.len(header)) / 2), HEADER_Y + 1, header)
  gpu.set(2, HEADER_Y + 2, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])
  
  -- Рамка таблицы
  local tableHeaderHeight = (TABLE_BODY_START_Y - TABLE_HEADER_Y) + VISIBLE_TABLE_ROWS + 2
  drawBorder(TABLE_X - 1, TABLE_HEADER_Y - 1, TABLE_WIDTH + 2, tableHeaderHeight, COLOR_BUTTON)
  
  -- Заголовок таблицы (обновлённое форматирование)
  local headerStr = string.format("|%-5s|%-40s|%-20s|%-8s|%-8s|%-10s|", "Idx", "Name", "Категория", "Req", "ME", "Craft")
  gpu.setBackground(COLOR_HEADER_BG)
  gpu.setForeground(CTEXT)
  gpu.set(TABLE_X, TABLE_HEADER_Y, headerStr)
  gpu.set(TABLE_X, TABLE_HEADER_Y + 1, string.rep("─", TABLE_WIDTH))
  
  -- Рамка области логов
  local logsWidth = WIDTH - LOGS_X - 1
  local logsHeight = HEIGHT - HEADER_Y - 1
  drawBorder(LOGS_X - 1, HEADER_Y - 1, logsWidth + 2, logsHeight + 2, COLOR_BUTTON)
  
  gpu.setBackground(COLOR_LOG_BG)
  gpu.fill(LOGS_X, HEADER_Y, logsWidth, logsHeight, " ")
end

---------------------- ОТРИСОВКА ЛОГОВ ----------------------
local function drawLogsArea()
  local logsWidth = WIDTH - LOGS_X - 1
  local logsHeight = HEIGHT - HEADER_Y - 1
  gpu.setBackground(COLOR_LOG_BG)
  gpu.fill(LOGS_X + 1, HEADER_Y + 1, logsWidth - 1, logsHeight - 2, " ")
  local logY = HEADER_Y + 1
  for i, log in ipairs(craftLogs) do
    if logY <= HEADER_Y + logsHeight - 2 then
      gpu.setForeground(log.color)
      local logText = log.text
      if unicode.len(logText) > logsWidth - 2 then
        logText = unicode.sub(logText, 1, logsWidth - 2)
      end
      gpu.set(LOGS_X + 1, logY, logText)
      logY = logY + 1
    else
      break
    end
  end
end

---------------------- ФУНКЦИИ РИСОВАНИЯ КНОПОК ----------------------
local function drawCustomButton(x, y, w, h, bgColor, textColor, text)
  gpu.setBackground(bgColor)
  gpu.fill(x, y, w, h, " ")
  gpu.setForeground(COLOR_BUTTON_BORDER)
  drawBorder(x, y, w, h, COLOR_BUTTON_BORDER)
  gpu.setForeground(textColor)
  local textPosX = x + math.floor((w - unicode.len(text)) / 2)
  local textPosY = y + math.floor(h / 2)
  gpu.set(textPosX, textPosY, text)
end

local function drawButtons()
  if not buttons then return end
  for i = 1, #buttons do
    local button = buttons[i]
    if button.visible then
      drawCustomButton(button.x, button.y, button.w, button.h, COLOR_BUTTON, COLOR_BUTTON_TEXT, button.text)
    end
  end
end

---------------------- ОТРИСОВКА ТАБЛИЦЫ ----------------------
local function drawTableItems()
  -- Очищаем область таблицы динамически (без полного очищения всего экрана)
  for row = TABLE_BODY_START_Y, TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS - 1 do
    gpu.setBackground(BG_MAIN)
    gpu.fill(TABLE_X, row, TABLE_WIDTH, 1, " ")
  end
  
  for i = scroll, math.min(#content, scroll + VISIBLE_TABLE_ROWS - 1) do
    local row = TABLE_BODY_START_Y + (i - scroll)
    local record = content[i]
    local item = record.item
    local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
    local currentQty = 0
    if detail and detail.basic() then 
      currentQty = detail.basic().qty or 0
    end
    local reqCount = tonumber(item.count) or 0
    local diff = reqCount - currentQty
    local colorText = CTEXT
    if currentQty >= reqCount then
      colorText = COLOR_HIGH
    elseif diff >= math.floor(reqCount * 0.5) then
      colorText = COLOR_LOW
    else
      colorText = COLOR_MEDIUM
    end

    local rowBg = ((i - scroll) % 2 == 0) and BG_MAIN or BG_ALT
    if posSelect and i == posSelect then
      rowBg = COLOR_HIGHLIGHT
    end
    gpu.setBackground(rowBg)
    local line = string.format("|%-5d|%-40s|%-20s|%-8d|%-8d|%-10d|", i, item.name, (item.category or ""), reqCount, currentQty, item.craftSize or 0)
    gpu.setForeground(colorText)
    gpu.set(TABLE_X, row, line)
  end
end

local function drawScrollBar()
  oc.drawscroll(TABLE_X + TABLE_WIDTH + 1, TABLE_BODY_START_Y, 1, VISIBLE_TABLE_ROWS, scroll, #content, COLOR_HIGHLIGHT, COLOR_BUTTON)
end

---------------------- ФУНКЦИЯ ПОЛНОГО ОБНОВЛЕНИЯ ЭКРАНА ----------------------
local function fullRedraw()
  if guiPath[#guiPath] == "start" then
    if not staticDrawn then
      drawStaticUI()
      staticDrawn = true
    else
      -- Обновляем только динамические части (заголовок, таблица, кнопки, логи)
      gpu.setBackground(COLOR_HEADER_BG)
      gpu.fill(2, HEADER_Y + 1, WIDTH - 2, 2, " ")
      gpu.setForeground(CTEXT)
      local header = "PreCraft - Автокрафт предметов"
      gpu.set(math.floor((WIDTH - unicode.len(header)) / 2), HEADER_Y + 1, header)
      gpu.set(2, HEADER_Y + 2, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])
    end
    drawTableItems()
    drawScrollBar()
    drawButtons()
    drawLogsArea()
  end
end

---------------------- ОБНОВЛЕНИЕ КОНТЕНТА ----------------------
local function updateContent()
  content = {}
  for i, item in ipairs(dataItems) do
    if inputFind ~= "" then
      if unicode.lower(item.name):find(unicode.lower(inputFind)) then
        table.insert(content, { idx = i, item = item })
      end
    else
      table.insert(content, { idx = i, item = item })
    end
  end

  if sortCriteria == "name" then
    table.sort(content, function(a, b)
      return (a.item.name or ""):lower() < (b.item.name or ""):lower()
    end)
  elseif sortCriteria == "category" then
    table.sort(content, function(a, b)
      return (a.item.category or ""):lower() < (b.item.category or ""):lower()
    end)
  elseif sortCriteria == "count" then
    table.sort(content, function(a, b)
      return (tonumber(a.item.count) or 0) < (tonumber(b.item.count) or 0)
    end)
  end

  maxScroll = math.max(1, #content - VISIBLE_TABLE_ROWS + 1)
end

local function requestRedraw()
  redrawNeeded = true
end

local function toGui(state, clear)
  if clear then guiPath[#guiPath] = nil end
  if guiPath[#guiPath] ~= state then table.insert(guiPath, state) end
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  requestRedraw()
end

local function goBack()
  table.remove(guiPath)
  posSelect = nil
  requestRedraw()
end

---------------------- ЛОГИРОВАНИЕ (до 10 записей) ----------------------
local function addLogEvent(eventType, message, status)
  local statusColors = {
    sufficient   = COLOR_HIGH,
    intermediate = COLOR_MEDIUM,
    insufficient = COLOR_LOW
  }
  local color = statusColors[status] or CTEXT
  local fullMessage = "[" .. eventType .. "] " .. message
  if #craftLogs >= 10 then
    table.remove(craftLogs, 1)
  end
  table.insert(craftLogs, { text = fullMessage, color = color })
  drawLogsArea()
end

---------------------- ФУНКЦИЯ ВВОДА С ОВЕРЛЕЕМ ----------------------
local function inputOverlay(promptMessage)
  local boxW, boxH = 60, 3
  local boxX = math.floor((WIDTH - boxW) / 2)
  local boxY = math.floor((HEIGHT - boxH) / 2)
  drawBorder(boxX - 1, boxY - 1, boxW + 2, boxH + 2, COLOR_BUTTON)
  gpu.setBackground(BG_MAIN)
  gpu.fill(boxX, boxY, boxW, boxH, " ")
  gpu.setForeground(CTEXT)
  gpu.set(boxX + 2, boxY, promptMessage)
  term.setCursor(boxX + 2 + unicode.len(promptMessage) + 1, boxY)
  term.setCursorBlink(true)
  local input = term.read()
  fullRedraw()  -- обновляем динамическую часть экрана (убираем окно ввода)
  return input:sub(1, -2)
end

---------------------- УПРАВЛЕНИЕ ПРЕДМЕТАМИ ----------------------
local function addItem()
  local stack = me.getStackInSlot(1)
  if stack then
    local name = inputOverlay("Введите название:")
    local category = inputOverlay("Введите категорию:")
    local count = tonumber(inputOverlay("Введите требуемое число:"))
    local craftSize = tonumber(inputOverlay("Введите объём крафта:"))
    table.insert(dataItems, {
      name = name,
      category = category,
      id = stack.id,
      dmg = stack.dmg,
      count = count,
      craftSize = craftSize,
      cpu = 262144  -- Фиксированное значение для 256К хранилища
    })
    oc.savef(dataFile, dataItems)
    addLogEvent("Add", "Добавлен: " .. name, "intermediate")
  else
    inputOverlay("Предмет не установлен в 1-й слот! (Нажмите Enter)")
  end
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  requestRedraw()
end

local function removeItem()
  if posSelect then
    local orig = content[posSelect].idx
    table.remove(dataItems, orig)
    oc.savef(dataFile, dataItems)
    addLogEvent("Edit", "Удалён: " .. content[posSelect].item.name, "insufficient")
    posSelect = nil
    dataItems = oc.loadf(dataFile) or {}
    updateContent()
    requestRedraw()
    return true
  end
end

-- РЕДАКТИРОВАНИЕ С ПОСЛЕДОВАТЕЛЬНЫМ ВВОДОМ (аналог addItem)
local function editItem()
  if posSelect then
    local idx = content[posSelect].idx
    local item = dataItems[idx]
    local name = inputOverlay("Введите новое имя (текущее: " .. item.name .. "):")
    if name ~= "" then 
      item.name = name
    end
    local cat = inputOverlay("Введите новую категорию (текущее: " .. (item.category or "") .. "):")
    if cat ~= "" then
      item.category = cat
    end
    local countStr = inputOverlay("Введите требуемое число (текущее: " .. item.count .. "):")
    if countStr ~= "" then
      local count = tonumber(countStr)
      if count then
        item.count = count
      end
    end
    local craftSizeStr = inputOverlay("Введите объём крафта (текущее: " .. item.craftSize .. "):")
    if craftSizeStr ~= "" then
      local craftSize = tonumber(craftSizeStr)
      if craftSize then
        item.craftSize = craftSize
      end
    end
    dataItems[idx] = item
    oc.savef(dataFile, dataItems)
    updateContent()
    addLogEvent("Edit", "Изменён: " .. item.name, "intermediate")
    requestRedraw()
    posSelect = nil
  end
end

---------------------- АВТО-КРАФТ (только на 256К хранилищах) ----------------------
local function autoCraftCheck()
  for i, item in ipairs(dataQueue) do
    if not item.craft or item.craft.isDone() or item.craft.isCanceled() then
      item.craft = nil
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      if detail then
        local currentQty = 0
        if detail.basic() then
          currentQty = detail.basic().qty or 0
        end
        local reqCount = tonumber(item.count) or 0
        local delta = reqCount - currentQty
        if delta > 0 then
          local cpus = me.getCpus()
          for _, cpu in ipairs(cpus) do
            -- Фильтруем только CPU с 256К хранилищем
            if not cpu.busy and cpu.storage == 262144 then
              local craftables = me.getCraftables({name = item.id, damage = item.dmg})
              if craftables.n and craftables.n >= 1 then
                item.craft = craftables[1].request(delta, false, tostring(item.cpu))
                addLogEvent("Craft", item.name .. " x" .. delta, "sufficient")
                break
              else
                addLogEvent("Craft", item.name .. " не имеет рецепта", "insufficient")
              end
            end
          end
        end
      end
    end
  end
  os.sleep(1)
end

---------------------- ОБРАБОТЧИКИ СОБЫТИЙ ----------------------
local function onTouch(_, _, x, y, _, nick)
  if ADM[nick] then
    for i = 1, #buttons do
      local button = buttons[i]
      if x >= button.x and x <= (button.x + button.w - 1) and
         y >= button.y and y <= (button.y + button.h - 1) then
          button.action()
          return true
      end
    end
    if x >= TABLE_X and x <= (TABLE_X + TABLE_WIDTH - 1) and 
       y >= TABLE_BODY_START_Y and y < (TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS) then
      posSelect = scroll + (y - TABLE_BODY_START_Y)
      requestRedraw()
    end
  end
end

local function onScroll(_, _, _, _, dir, nick)
  if ADM[nick] then
    if dir == 1 and scroll > 1 then
      scroll = scroll - 1
    elseif dir == -1 and scroll < maxScroll then
      scroll = scroll + 1
    end
    requestRedraw()
  end
end

local function onKeyDown(_, _, key, code, nick)
  if ADM[nick] then
    if guiPath[#guiPath] == "start" then
      if key == 8 then
        inputFind = unicode.sub(inputFind, 1, -2)
      elseif key == 0 and code == 211 then
        inputFind = ""
      elseif key ~= 0 then
        if inputFind == "" then
          inputFind = unicode.char(key)
        elseif unicode.len(inputFind) < 49 then
          inputFind = inputFind .. unicode.char(key)
        end
      end
      updateContent()
      requestRedraw()
    end
  end
end

---------------------- ИНИЦИАЛИЗАЦИЯ КНОПОК ----------------------
local function initButtons()
  buttons = {
    {
      visible = true,
      x = 16, y = HEIGHT - 3, w = 16, h = 3,
      text = "Craft: OFF",
      action = function()
        craftingActive = not craftingActive
        buttons[1].text = craftingActive and "Craft: ON" or "Craft: OFF"
        requestRedraw()
      end
    },
    {
      visible = true,
      x = 34, y = HEIGHT - 3, w = 10, h = 3,
      text = "Add",
      action = addItem
    },
    {
      visible = true,
      x = 46, y = HEIGHT - 3, w = 10, h = 3,
      text = "Edit",
      action = editItem
    },
    {
      visible = true,
      x = 58, y = HEIGHT - 3, w = 12, h = 3,
      text = "Remove",
      action = removeItem
    },
    {
      visible = true,
      x = 72, y = HEIGHT - 3, w = 10, h = 3,
      text = "Sort",
      action = function()
        if sortCriteria == "name" then
          sortCriteria = "category"
        elseif sortCriteria == "category" then
          sortCriteria = "count"
        else
          sortCriteria = "name"
        end
        addLogEvent("Edit", "Сортировка по " .. sortCriteriaDisplay[sortCriteria], "intermediate")
        updateContent()
        requestRedraw()
      end
    }
  }
end

---------------------- ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ ----------------------
local touchEvent, scrollEvent, keyDownEvent

local function LoadSystem()
  staticDrawn = false
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  initButtons()
  touchEvent = event.listen("touch", onTouch)
  scrollEvent = event.listen("scroll", onScroll)
  keyDownEvent = event.listen("key_down", onKeyDown)
  toGui("start", false)
  dataQueue = dataItems
  fullRedraw()
  return true
end

local function mainLoop()
  if LoadSystem() then
    while running do
      if craftingActive then
        local status, err = pcall(autoCraftCheck)
        if not status then
          gpu.set(2, HEIGHT, "Ошибка: " .. tostring(err))
          os.sleep(2)
          os.exit()
        end
      end
      if redrawNeeded then
        fullRedraw()
        redrawNeeded = false
      end
      os.sleep(0.2)
    end
  end
end

local ok, err = pcall(mainLoop)
if not ok then
  if touchEvent then event.cancel(touchEvent) end
  if scrollEvent then event.cancel(scrollEvent) end
  if keyDownEvent then event.cancel(keyDownEvent) end
  gpu.set(2, HEIGHT, "Фатальная ошибка: " .. tostring(err))
  os.sleep(5)
  os.exit()
end
