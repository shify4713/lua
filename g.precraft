-- PreCraft Auto-Crafting Tool (OpenOS 1.6.1, Lua 5.2)
-- Обновлённая версия без проверок на админа.
-- Логика крафта организована через состояния: waiting, processing, finished.
-- Улучшено обновление кэша и добавлена градация цветового выделения.
-- Обработчики событий работают через event.listen без блокирующих event.pull.

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local gpu = component.gpu
local me = component.me_interface

-- Загрузка библиотеки oc.lua (если отсутствует)
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
local libPath = "/lib/oc.lua"
if not fs.exists(libPath) then
  shell.execute("wget " .. libURL .. " " .. libPath)
end
local oc = require("oc")

-- Файл данных: если отсутствует, создаём пустой
local dataFile = "/home/BD.txt"
if not fs.exists(dataFile) then
  oc.savef(dataFile, {})
end

--------------------------------------------------------------------
-- ГЛОБАЛЫЕ ПЕРЕМЕННЫЕ
--------------------------------------------------------------------
local dataItems = {}         -- список предметов (загружается из файла)
local dataQueue = {}         -- очередь автокрафта (будет совпадать с dataItems)
local scroll = 1             -- текущее смещение таблицы
local posSelect = nil        -- выбранная строка таблицы
local craftingActive = false -- режим автокрафта (ON/OFF)
local running = true         -- флаг работы программы
local maxScroll = 1          -- максимальное смещение таблицы
local content = {}           -- отфильтрованный/отсортированный список
local sortCriteria = "name"  -- возможные: "name", "category", "count"
local sortCriteriaDisplay = { name = "Имя", category = "Категория", count = "Количество" }
local craftLogs = {}         -- массив логов
local MAX_LOGS = 100         -- максимальное число логов
local logsVisible = false    -- флаг отображения логового окна
local buttons = {}           -- таблица кнопок
local lastCountUpdate = 0    -- время последнего обновления количеств
local COUNT_UPDATE_INTERVAL = 8  -- интервал обновления (8 секунд)
local inputActive = false    -- блокировка обновлений во время ввода
local cachedCounts = {}      -- кэш количественных значений

--------------------------------------------------------------------
-- РАЗМЕРЫ UI (разрешение 120×50)
--------------------------------------------------------------------
local WIDTH, HEIGHT = 120, 50
gpu.setResolution(WIDTH, HEIGHT)

local TABLE_X = 1
local TABLE_WIDTH = WIDTH
local COL_WIDTH_IDX    = 4
local COL_WIDTH_NAME   = 60
local COL_WIDTH_CAT    = 14
local COL_WIDTH_REQ    = 11
local COL_WIDTH_ME     = 12
local COL_WIDTH_CRAFT  = 12
local TABLE_HEADER_Y = 4
local TABLE_BODY_START_Y = 6
local BUTTONS_HEIGHT = 3
local BUTTONS_Y = HEIGHT - BUTTONS_HEIGHT + 1
local VISIBLE_TABLE_ROWS = BUTTONS_Y - TABLE_BODY_START_Y

--------------------------------------------------------------------
-- ПАЛИТРА ЦВЕТОВ
--------------------------------------------------------------------
local BG_MAIN             = 0x1A1A1A
local CTEXT               = 0xDADADA
local COLOR_BUTTON        = 0x4A90E2
local COLOR_BUTTON_TEXT   = 0xFFFFFF
local COLOR_HIGHLIGHT     = 0xFF4500
local COLOR_HIGHLIGHT_TEXT= 0x000000

-- Новая система цветов для отображения результата:
local COLOR_NONE          = 0xFF0000   -- Красный: нет предметов
local COLOR_ORANGE        = 0xFFA500   -- Оранжевый: меньше 25% от требуемого
local COLOR_YELLOW        = 0xFFFF00   -- Жёлтый: меньше 50% от требуемого
local COLOR_GREEN         = 0x00FF66   -- Зелёный: количество удовлетворяет требованию

local BG_ROW_1            = 0x1A1A1A
local BG_ROW_2            = 0x2A2A2A
local COLOR_HEADER_BG     = 0x333333
local COLOR_LOG_BG        = 0x3A3A3A

--------------------------------------------------------------------
-- ФУНКЦИИ ВЫРАВНЕНИЯ ТЕКСТА
--------------------------------------------------------------------
local function padOrTrim(text, width)
  text = tostring(text)
  local len = unicode.len(text)
  if len > width then
    return unicode.sub(text, 1, width)
  else
    return text .. string.rep(" ", width - len)
  end
end

local function padCenter(text, width)
  text = tostring(text)
  local len = unicode.len(text)
  if len >= width then
    return unicode.sub(text, 1, width)
  end
  local left = math.floor((width - len) / 2)
  local right = width - len - left
  return string.rep(" ", left) .. text .. string.rep(" ", right)
end

--------------------------------------------------------------------
-- ФУНКЦИЯ РИСОВАНИЯ ГРАНИЦЫ
--------------------------------------------------------------------
local function drawBorder(x, y, w, h, fgColor)
  fgColor = fgColor or CTEXT
  gpu.setForeground(fgColor)
  gpu.set(x, y, "┌" .. string.rep("─", w - 2) .. "┐")
  gpu.set(x, y + h - 1, "└" .. string.rep("─", w - 2) .. "┘")
  for i = y + 1, y + h - 2 do
    gpu.set(x, i, "│")
    gpu.set(x + w - 1, i, "│")
  end
end

--------------------------------------------------------------------
-- ФУНКЦИЯ ОТРИСОВКИ КНОПКИ
--------------------------------------------------------------------
local function drawCustomButton(x, y, w, h, bgColor, textColor, text)
  gpu.setBackground(bgColor)
  gpu.fill(x, y, w, h, " ")
  gpu.setForeground(COLOR_BUTTON)
  drawBorder(x, y, w, h, COLOR_BUTTON)
  gpu.setForeground(textColor)
  local textPosX = x + math.floor((w - unicode.len(text)) / 2)
  local textPosY = y + math.floor(h / 2)
  gpu.set(textPosX, textPosY, text)
end

--------------------------------------------------------------------
-- МОДАЛЬНОЕ ОКНО ВВОДА С КНОПКОЙ "Cancel"
--------------------------------------------------------------------
local function customInputOverlay(promptMessage)
  inputActive = true
  local boxW, boxH = 60, 3
  local boxX = math.floor((WIDTH - boxW) / 2)
  local boxY = math.floor((HEIGHT - boxH) / 2)
  drawBorder(boxX - 1, boxY - 1, boxW + 2, boxH + 2, COLOR_BUTTON)
  gpu.setBackground(BG_MAIN)
  gpu.fill(boxX, boxY, boxW, boxH, " ")
  gpu.setForeground(CTEXT)
  gpu.set(boxX + 2, boxY, promptMessage)
  
  local cancelBtnW, cancelBtnH = 8, 1
  local cancelBtnX = boxX + boxW - cancelBtnW - 1
  local cancelBtnY = boxY + boxH
  drawCustomButton(cancelBtnX, cancelBtnY, cancelBtnW, cancelBtnH, COLOR_BUTTON, COLOR_BUTTON_TEXT, "Cancel")
  
  local inputStr = ""
  local inputX = boxX + 2
  local inputY = boxY + 1
  gpu.setBackground(BG_MAIN)
  gpu.fill(inputX, inputY, boxW - 4, 1, " ")
  gpu.setForeground(CTEXT)
  gpu.set(inputX, inputY, inputStr)
  term.setCursor(inputX + unicode.len(inputStr), inputY)
  term.setCursorBlink(true)
  
  while true do
    local e = { event.pull(0.01) }
    local ev = e[1]
    if ev == "key_down" then
      local key = e[3]
      if key == 28 then  -- Enter
        break
      elseif key == 14 then  -- Backspace
        if unicode.len(inputStr) > 0 then
          inputStr = unicode.sub(inputStr, 1, unicode.len(inputStr) - 1)
        end
      end
    elseif ev == "text" then
      local char = e[4]
      inputStr = inputStr .. char
    elseif ev == "touch" then
      local tx, ty = e[3], e[4]
      if tx >= cancelBtnX and tx <= cancelBtnX + cancelBtnW - 1 and 
         ty >= cancelBtnY and ty <= cancelBtnY + cancelBtnH - 1 then
        inputStr = nil
        break
      end
    end
    gpu.setBackground(BG_MAIN)
    gpu.fill(inputX, inputY, boxW - 4, 1, " ")
    gpu.setForeground(CTEXT)
    gpu.set(inputX, inputY, inputStr or "")
    term.setCursor(inputX + unicode.len(inputStr or ""), inputY)
  end
  
  term.setCursorBlink(false)
  inputActive = false
  updateUI()
  return inputStr
end

--------------------------------------------------------------------
-- ОТРИСОВКА ЗАГОЛОВКА И ШАПКИ ТАБЛИЦЫ
--------------------------------------------------------------------
local function redrawHeader()
  gpu.setBackground(COLOR_HEADER_BG)
  gpu.fill(1, 1, WIDTH, 3, " ")
  local mainTitle = "PreCraft - Автокрафт предметов"
  local sortText = "Сортировка: " .. sortCriteriaDisplay[sortCriteria]
  gpu.setForeground(CTEXT)
  gpu.set(math.floor((WIDTH - unicode.len(mainTitle)) / 2), 1, mainTitle)
  gpu.set(2, 2, sortText)
end

local function redrawTableHeader()
  local headerLine = "|" .. padCenter("Idx", COL_WIDTH_IDX) .. "|" ..
                         padCenter("Name", COL_WIDTH_NAME) .. "|" ..
                         padCenter("Категория", COL_WIDTH_CAT) .. "|" ..
                         padCenter("Req", COL_WIDTH_REQ) .. "|" ..
                         padCenter("ME", COL_WIDTH_ME) .. "|" ..
                         padCenter("Craft", COL_WIDTH_CRAFT) .. "|"
  gpu.setBackground(COLOR_HEADER_BG)
  gpu.setForeground(CTEXT)
  gpu.set(TABLE_X, TABLE_HEADER_Y, headerLine)
  gpu.set(TABLE_X, TABLE_HEADER_Y + 1, string.rep("─", TABLE_WIDTH))
end

--------------------------------------------------------------------
-- ОТРИСОВКА ТЕЛА ТАБЛИЦЫ
--------------------------------------------------------------------
local function redrawTable()
  for row = TABLE_BODY_START_Y, BUTTONS_Y - 1 do
    gpu.setBackground(BG_MAIN)
    gpu.fill(TABLE_X, row, TABLE_WIDTH, 1, " ")
  end
  
  if #content == 0 then
    local msg = "Нет предметов. Нажмите Add для добавления."
    gpu.setBackground(BG_MAIN)
    gpu.setForeground(CTEXT)
    gpu.set(TABLE_X + math.floor((TABLE_WIDTH - unicode.len(msg)) / 2),
            math.floor((TABLE_BODY_START_Y + BUTTONS_Y) / 2), msg)
    return
  end
  
  for i = scroll, math.min(#content, scroll + VISIBLE_TABLE_ROWS - 1) do
    local rowPos = TABLE_BODY_START_Y + (i - scroll)
    local record = content[i]
    local item = record.item
    local key = item.id .. ":" .. item.dmg
    local currentQty = cachedCounts[key] or 0
    local reqCount = tonumber(item.count) or 0
    local textColor = CTEXT
    if currentQty >= reqCount then
      textColor = COLOR_GREEN
    elseif currentQty == 0 then
      textColor = COLOR_NONE
    elseif currentQty < 0.25 * reqCount then
      textColor = COLOR_ORANGE
    elseif currentQty < 0.5 * reqCount then
      textColor = COLOR_YELLOW
    else
      textColor = COLOR_YELLOW
    end
    local rowBg = ((i - scroll) % 2 == 0) and BG_ROW_1 or BG_ROW_2
    if posSelect and (i == posSelect) then
      rowBg = COLOR_HIGHLIGHT
      textColor = COLOR_HIGHLIGHT_TEXT
    end
    gpu.setBackground(rowBg)
    local rowStr = "|" .. padOrTrim(i, COL_WIDTH_IDX) .. "|" ..
                        padOrTrim(item.name, COL_WIDTH_NAME) .. "|" ..
                        padOrTrim(item.category or "", COL_WIDTH_CAT) .. "|" ..
                        padOrTrim(reqCount, COL_WIDTH_REQ) .. "|" ..
                        padOrTrim(currentQty, COL_WIDTH_ME) .. "|" ..
                        padOrTrim(item.craftSize or 0, COL_WIDTH_CRAFT) .."|"
    gpu.setForeground(textColor)
    gpu.set(TABLE_X, rowPos, rowStr)
  end
end

--------------------------------------------------------------------
-- ОТРИСОВКА КНОПОК И ЛОГОВ
--------------------------------------------------------------------
local function redrawButtons()
  gpu.setBackground(BG_MAIN)
  gpu.fill(1, BUTTONS_Y, WIDTH, BUTTONS_HEIGHT, " ")
  for _, button in ipairs(buttons) do
    if button.visible then
      local btnText = button.text
      if button.id == "craft" then
        btnText = "Craft: " .. (craftingActive and "ON" or "OFF")
      elseif button.id == "logs" then
        btnText = "Logs: " .. (logsVisible and "ON" or "OFF")
      end
      drawCustomButton(button.x, button.y, button.w, button.h, COLOR_BUTTON, COLOR_BUTTON_TEXT, btnText)
    end
  end
end

local function redrawLogs()
  local overlayWidth = 70
  local overlayHeight = 20
  local overlayX = math.floor((WIDTH - overlayWidth) / 2)
  local overlayY = math.floor((HEIGHT - overlayHeight) / 2)
  drawBorder(overlayX - 1, overlayY - 1, overlayWidth + 2, overlayHeight + 2, COLOR_BUTTON)
  gpu.setBackground(COLOR_LOG_BG)
  gpu.fill(overlayX, overlayY, overlayWidth, overlayHeight, " ")
  local logY = overlayY
  local startIdx = math.max(1, #craftLogs - overlayHeight + 1)
  gpu.setForeground(CTEXT)
  for i = startIdx, #craftLogs do
    local log = craftLogs[i]
    local logText = log.text
    if unicode.len(logText) > overlayWidth - 2 then
      logText = unicode.sub(logText, 1, overlayWidth - 2)
    end
    gpu.set(overlayX + 1, logY, logText)
    logY = logY + 1
  end
end

local function updateUI()
  gpu.setBackground(BG_MAIN)
  gpu.fill(1, 1, WIDTH, HEIGHT, " ")
  redrawHeader()
  redrawTableHeader()
  redrawTable()
  redrawButtons()
  if logsVisible then
    redrawLogs()
  end
end

--------------------------------------------------------------------
-- ОБНОВЛЕНИЕ ДАННЫХ И СОРТИРОВКА
--------------------------------------------------------------------
local function updateContent()
  content = {}
  for i, item in ipairs(dataItems) do
    table.insert(content, { idx = i, item = item })
  end
  if sortCriteria == "name" then
    table.sort(content, function(a, b)
      return (a.item.name or ""):lower() < (b.item.name or ""):lower()
    end)
  elseif sortCriteria == "category" then
    table.sort(content, function(a, b)
      return (a.item.category or ""):lower() < (b.item.category or ""):lower()
    end)
  elseif sortCriteria == "count" then
    table.sort(content, function(a, b)
      return (tonumber(a.item.count) or 0) < (tonumber(b.item.count) or 0)
    end)
  end
  maxScroll = math.max(1, #content - VISIBLE_TABLE_ROWS + 1)
  if scroll > maxScroll then scroll = maxScroll end
end

local function updateCachedCounts()
  cachedCounts = {}  -- очищаем кэш перед обновлением
  for i, item in ipairs(dataItems) do
    local key = item.id .. ":" .. item.dmg
    local detail = me.getItemDetail({ id = item.id, dmg = item.dmg })
    if detail and detail.basic() then
      cachedCounts[key] = detail.basic().qty or 0
    else
      cachedCounts[key] = 0
    end
  end
end

--------------------------------------------------------------------
-- ФУНКЦИИ РАБОТЫ С ПРЕДМЕТАМИ (Add, Edit, Remove)
--------------------------------------------------------------------
local function addItem()
  local stack = me.getStackInSlot(1)
  if stack then
    local name = customInputOverlay("Введите название:")
    if not name then return end
    local category = customInputOverlay("Введите категорию:")
    if not category then return end
    local countStr = customInputOverlay("Введите требуемое число:")
    if not countStr then return end
    local count = tonumber(countStr)
    local craftSizeStr = customInputOverlay("Введите объём крафта:")
    if not craftSizeStr then return end
    local craftSize = tonumber(craftSizeStr)
    table.insert(dataItems, {
      name = name,
      category = category,
      id = stack.id,
      dmg = stack.dmg,
      count = count,
      craftSize = craftSize,
      cpu = 262144,
      state = "waiting",  -- начальное состояние
      craft = nil,
      lastMsg = nil
    })
    oc.savef(dataFile, dataItems)
    table.insert(craftLogs, { text = "[Add] Добавлен: " .. name, color = CTEXT })
    if #craftLogs > MAX_LOGS then table.remove(craftLogs, 1) end
  else
    customInputOverlay("Предмет не установлен в 1-й слот! (Нажмите Enter)")
  end
  updateCachedCounts()
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  scroll = 1
  posSelect = nil
  updateUI()
end

local function removeItem()
  if posSelect then
    local orig = content[posSelect].idx
    table.remove(dataItems, orig)
    oc.savef(dataFile, dataItems)
    table.insert(craftLogs, { text = "[Edit] Удалён: " .. content[posSelect].item.name, color = CTEXT })
    if #craftLogs > MAX_LOGS then table.remove(craftLogs, 1) end
    posSelect = nil
    dataItems = oc.loadf(dataFile) or {}
    updateCachedCounts()
    updateContent()
    updateUI()
  end
end

local function editItem()
  if posSelect then
    local idx = content[posSelect].idx
    local item = dataItems[idx]
    local name = customInputOverlay("Введите новое имя (текущее: " .. item.name .. "):")
    if not name then return end
    if name ~= "" then item.name = name end
    local cat = customInputOverlay("Введите новую категорию (текущее: " .. (item.category or "") .. "):")
    if not cat then return end
    if cat ~= "" then item.category = cat end
    local countStr = customInputOverlay("Введите требуемое число (текущее: " .. item.count .. "):")
    if not countStr then return end
    if countStr ~= "" then
      local count = tonumber(countStr)
      if count then item.count = count end
    end
    local craftSizeStr = customInputOverlay("Введите объём крафта (текущее: " .. item.craftSize .. "):")
    if not craftSizeStr then return end
    if craftSizeStr ~= "" then
      local craftSize = tonumber(craftSizeStr)
      if craftSize then item.craftSize = craftSize end
    end
    dataItems[idx] = item
    oc.savef(dataFile, dataItems)
    table.insert(craftLogs, { text = "[Edit] Изменён: " .. item.name, color = CTEXT })
    if #craftLogs > MAX_LOGS then table.remove(craftLogs, 1) end
    posSelect = nil
    updateCachedCounts()
    updateContent()
    updateUI()
  end
end

--------------------------------------------------------------------
-- ДОБАВЛЕНИЕ ЗАПИСИ В ЛОГИ
--------------------------------------------------------------------
local function addLog(msg)
  table.insert(craftLogs, { text = msg, color = CTEXT })
  if #craftLogs > MAX_LOGS then table.remove(craftLogs, 1) end
  updateUI()
end

--------------------------------------------------------------------
-- ЛОГИКА АВТО-КРАФТА С ИСПОЛЬЗОВАНИЕМ СОСТОЯНИЙ
--------------------------------------------------------------------
local function autoCraftCheck()
  if not craftingActive then return end

  local function logIfChanged(item, newMsg)
    if item.lastMsg ~= newMsg then
      addLog(newMsg)
      item.lastMsg = newMsg
    end
  end

  for _, item in ipairs(dataQueue) do
    if item.craft then
      if item.craft.isDone() or item.craft.isCanceled() then
        item.craft = nil
        item.state = "waiting"
      end
    end

    if not item.craft then
      local detail = me.getItemDetail({ id = item.id, dmg = item.dmg })
      local currentQty = detail and (detail.basic() and detail.basic().qty) or 0
      local reqCount = tonumber(item.count) or 0
      local delta = reqCount - currentQty
      if delta > 0 then
        local batch = math.min(delta, tonumber(item.craftSize) or delta)
        local cpus = me.getCpus()
        local foundCPU = false
        for _, cpu in ipairs(cpus) do
          if not cpu.busy and cpu.storage == 262144 then
            local craftables = me.getCraftables({ name = item.id, damage = item.dmg })
            if craftables.n and craftables.n >= 1 then
              item.craft = craftables[1].request(batch, false, tostring(item.cpu))
              item.state = "processing"
              logIfChanged(item, "[Craft] Запуск " .. item.name .. " x" .. batch)
              foundCPU = true
              break
            else
              logIfChanged(item, "[Craft] " .. item.name .. " отсутствует рецепт")
              foundCPU = true
              break
            end
          end
        end
        if not foundCPU then
          logIfChanged(item, "[Craft] Нет свободных CPU для " .. item.name)
        end
      else
        item.state = "finished"
        item.lastMsg = nil
      end
    end
  end
end

--------------------------------------------------------------------
-- ОБРАБОТКА СОБЫТИЙ: КАСАНИЙ И СКРОЛЛА
--------------------------------------------------------------------
local function handleTouch(x, y)
  -- Проверка нажатия на кнопки
  for _, button in ipairs(buttons) do
    if x >= button.x and x <= (button.x + button.w - 1) and
       y >= button.y and y <= (button.y + button.h - 1) then
      button.action()
      return true
    end
  end
  -- Если нажато в области таблицы – выбираем строку
  if x >= TABLE_X and x <= (TABLE_X + TABLE_WIDTH - 1) and
     y >= TABLE_BODY_START_Y and y < BUTTONS_Y then
     posSelect = scroll + (y - TABLE_BODY_START_Y)
     return true
  end
  return false
end

local function handleScroll(dir)
  if dir == 1 and scroll > 1 then
    scroll = scroll - 1
  elseif dir == -1 and scroll < maxScroll then
    scroll = scroll + 1
  end
end

local function onUIEvent(eventName, ...)
  if inputActive then return end
  if eventName == "touch" then
    local _, _, x, y = ...
    if handleTouch(x, y) then
      updateUI()
    end
  elseif eventName == "scroll" then
    local _, _, _, _, dir = ...
    handleScroll(dir)
    updateUI()
  end
end

--------------------------------------------------------------------
-- ИНИЦИАЛИЗАЦИЯ КНОПОК
--------------------------------------------------------------------
local function initButtons()
  buttons = {
    {
      id = "craft", visible = true,
      x = 24, y = BUTTONS_Y, w = 14, h = BUTTONS_HEIGHT,
      text = "Craft: OFF",
      action = function()
        craftingActive = not craftingActive
        if craftingActive then
          addLog("[AutoCraft] Режим автокрафта включён")
        else
          addLog("[AutoCraft] Режим автокрафта выключён")
        end
        updateUI()
      end
    },
    {
      id = "add", visible = true,
      x = 39, y = BUTTONS_Y, w = 10, h = BUTTONS_HEIGHT,
      text = "Add",
      action = addItem
    },
    {
      id = "edit", visible = true,
      x = 50, y = BUTTONS_Y, w = 10, h = BUTTONS_HEIGHT,
      text = "Edit",
      action = editItem
    },
    {
      id = "remove", visible = true,
      x = 61, y = BUTTONS_Y, w = 12, h = BUTTONS_HEIGHT,
      text = "Remove",
      action = removeItem
    },
    {
      id = "sort", visible = true,
      x = 74, y = BUTTONS_Y, w = 10, h = BUTTONS_HEIGHT,
      text = "Sort",
      action = function()
        if sortCriteria == "name" then
          sortCriteria = "category"
        elseif sortCriteria == "category" then
          sortCriteria = "count"
        else
          sortCriteria = "name"
        end
        addLog("[Edit] Сортировка по " .. sortCriteriaDisplay[sortCriteria])
        updateContent()
        updateUI()
      end
    },
    {
      id = "logs", visible = true,
      x = 85, y = BUTTONS_Y, w = 12, h = BUTTONS_HEIGHT,
      text = "Logs: OFF",
      action = function()
        logsVisible = not logsVisible
        updateUI()
      end
    },
  }
end

--------------------------------------------------------------------
-- ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ И ЗАПУСК
--------------------------------------------------------------------
local function LoadSystem()
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  initButtons()
  event.listen("touch", onUIEvent)
  event.listen("scroll", onUIEvent)
  dataQueue = dataItems   -- используем один и тот же список для автокрафта
  updateCachedCounts()
  lastCountUpdate = os.time()
  addLog("[System] Система запущена")
  updateUI()
  return true
end

local function checkBackgroundUpdate()
  if inputActive then return end
  local now = os.time()
  if now - lastCountUpdate >= COUNT_UPDATE_INTERVAL then
    updateCachedCounts()
    lastCountUpdate = now
    updateUI()
  end
end

local backgroundUpdateTimer = event.timer(1.0, checkBackgroundUpdate, math.huge)
local craftTimer = event.timer(8.0, autoCraftCheck, math.huge)

LoadSystem()
while running do
  os.sleep(0.1)
end
