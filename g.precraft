-- Improved PreCraft Auto-Crafting Tool for OpenOS 1.6.1 (Lua 5.2)
-- Загружает необходимые библиотеки и осуществляет автокрафт с улучшенным визуалом

local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local gpu = component.gpu
local me = component.me_interface

-- Если библиотеки oc.lua нет, загружаем её
local libURL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/g.lib-precraft"
local libPath = "/lib/oc.lua"
if not fs.exists(libPath) then
  shell.execute("wget " .. libURL .. " " .. libPath)
end
local oc = require("oc")

-- Работа с файлом данных
local dataFile = "/home/BD.txt"
if not fs.exists(dataFile) then
  oc.savef(dataFile, {})
end

---------------------- НАСТРОЙКИ ----------------------
local debugMode = true
local ADM = { ["LiwMorgan"] = true }  -- Доступ только для LiwMorgan

-- Разрешение экрана
local WIDTH, HEIGHT = 160, 50
gpu.setResolution(WIDTH, HEIGHT)

---------------------- ПАЛИТРА ЦВЕТОВ ----------------------
local BG_MAIN            = 0x1A1A1A  -- Тёмно-серый фон
local CTEXT              = 0xDADADA  -- Светло-серый текст
local COLOR_BUTTON       = 0x4A90E2  -- Синий для кнопок
local COLOR_BUTTON_TEXT  = 0xFFFFFF  -- Белый текст на кнопках
local COLOR_HIGHLIGHT    = 0x3A3A3A  -- Подсветка выбранной строки

local COLOR_LOW    = 0xFF4C4C  -- Красный – недостаточно
local COLOR_MEDIUM = 0xFFCC00  -- Желтый – промежуточно
local COLOR_HIGH   = 0x00FF66  -- Зелёный – достаточно

-- Размеры компонентов интерфейса
local TABLE_X = 2
local TABLE_WIDTH = 120          -- Ширина таблицы (левой части интерфейса)
local LOGS_X = TABLE_X + TABLE_WIDTH + 2  -- Привязка логов справа
local HEADER_Y = 2               -- Отступ для заголовка
local TABLE_HEADER_Y = HEADER_Y + 3
local TABLE_BODY_START_Y = TABLE_HEADER_Y + 2
local VISIBLE_TABLE_ROWS = 35

---------------------- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ----------------------
local dataItems = {}      -- Объекты, загруженные из файла
local dataQueue = {}      -- Копия для автокрафта
local guiPath = {"start"} -- Стек состояний интерфейса ("start", "change")
local inputFind = ""      -- Фильтр для поиска по имени
local scroll = 1          -- Текущая позиция прокрутки в таблице
local posSelect = nil     -- Индекс выбранного элемента (в списке content)
local changeItem = false  -- Флаг редактирования предмета
local craftingActive = false  -- Флаг включения автокрафта
local running = true          -- Главный флаг выполнения программы
local maxScroll = 1           -- Максимальный сдвиг прокрутки
local content = {}            -- Отфильтрованный и отсортированный список

local sortCriteria = "name"   -- Возможные значения: "name", "category", "count"
local sortCriteriaDisplay = { name = "Имя", category = "Категория", count = "Количество" }

local redrawNeeded = true     -- Флаг необходимости перерисовки экрана

-- Система логирования – до 20 последних записей
local craftLogs = {}  

-- Инициализируем таблицу кнопок (важно, чтобы она никогда не была nil)
local buttons = {}

---------------------- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ----------------------
local function updateContent()
  content = {}
  for _, item in ipairs(dataItems) do
    if inputFind ~= "" then
      if unicode.lower(item.name):find(unicode.lower(inputFind)) then
        table.insert(content, item)
      end
    else
      table.insert(content, item)
    end
  end

  if sortCriteria == "name" then
    table.sort(content, function(a, b)
      return (a.name or ""):lower() < (b.name or ""):lower()
    end)
  elseif sortCriteria == "category" then
    table.sort(content, function(a, b)
      return (a.category or ""):lower() < (b.category or ""):lower()
    end)
  elseif sortCriteria == "count" then
    table.sort(content, function(a, b)
      return (tonumber(a.count) or 0) < (tonumber(b.count) or 0)
    end)
  end

  maxScroll = math.max(1, #content - VISIBLE_TABLE_ROWS + 1)
end

local function requestRedraw()
  redrawNeeded = true
end

local function toGui(state, clear)
  if clear then guiPath[#guiPath] = nil end
  if guiPath[#guiPath] ~= state then table.insert(guiPath, state) end
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  requestRedraw()
end

local function goBack()
  table.remove(guiPath)
  posSelect = nil
  requestRedraw()
end

---------------------- ЛОГИРОВАНИЕ ----------------------
local function drawLogsArea()
  local prevBg = gpu.getBackground()
  gpu.setBackground(BG_MAIN)
  gpu.fill(LOGS_X, HEADER_Y, WIDTH - LOGS_X + 1, HEIGHT - HEADER_Y, " ")
  gpu.setForeground(CTEXT)
  gpu.set(LOGS_X + 2, HEADER_Y, "Логи:")
  for i, log in ipairs(craftLogs) do
    gpu.setForeground(log.color)
    gpu.set(LOGS_X + 2, HEADER_Y + i, log.text)
  end
  gpu.setBackground(prevBg)
end

local function addLogEvent(eventType, message, status)
  local statusColors = {
    sufficient   = COLOR_HIGH,
    intermediate = COLOR_MEDIUM,
    insufficient = COLOR_LOW
  }
  local color = statusColors[status] or CTEXT
  local timeStamp = os.date("%H:%M:%S")
  local fullMessage = timeStamp .. " [" .. eventType .. "] " .. message

  if #craftLogs >= 20 then
    table.remove(craftLogs, 1)
  end
  table.insert(craftLogs, { text = fullMessage, color = color })
  drawLogsArea()
end

---------------------- ФУНКЦИИ ОТРИСОВКИ ----------------------
local function drawBorder(x, y, w, h, fgColor)
  fgColor = fgColor or CTEXT
  gpu.setForeground(fgColor)
  gpu.set(x, y, "┌" .. string.rep("─", w - 2) .. "┐")
  gpu.set(x, y + h - 1, "└" .. string.rep("─", w - 2) .. "┘")
  for i = y + 1, y + h - 2 do
    gpu.set(x, i, "│")
    gpu.set(x + w - 1, i, "│")
  end
end

local function drawStatic()
  gpu.setBackground(BG_MAIN)
  gpu.fill(1, 1, WIDTH, HEIGHT, " ")

  -- Заголовок
  gpu.setForeground(CTEXT)
  local header = "PreCraft - Автокрафт предметов"
  gpu.set(math.floor((WIDTH - unicode.len(header)) / 2), HEADER_Y, header)
  gpu.set(2, HEADER_Y + 1, "Сортировка: " .. sortCriteriaDisplay[sortCriteria])

  -- Рамка для таблицы
  local tableHeaderWidth = TABLE_WIDTH
  local tableHeaderHeight = (TABLE_BODY_START_Y - TABLE_HEADER_Y) + VISIBLE_TABLE_ROWS + 2
  drawBorder(TABLE_X - 1, TABLE_HEADER_Y - 1, tableHeaderWidth + 2, tableHeaderHeight)

  -- Заголовок таблицы
  local headerStr = string.format("|%-4s|%-40s|%-20s|%-8s|%-8s|%-10s|", "Idx", "Name", "Категория", "Req", "ME", "Craft")
  headerStr = headerStr .. string.rep(" ", TABLE_WIDTH - unicode.len(headerStr))
  gpu.setBackground(BG_MAIN)
  gpu.setForeground(CTEXT)
  gpu.set(TABLE_X, TABLE_HEADER_Y, headerStr)
  gpu.set(TABLE_X, TABLE_HEADER_Y + 1, string.rep("─", TABLE_WIDTH))

  -- Рамка области логов
  local logsWidth = WIDTH - LOGS_X - 1
  local logsHeight = HEIGHT - HEADER_Y - 1
  drawBorder(LOGS_X - 1, HEADER_Y - 1, logsWidth + 2, logsHeight + 2)
end

local function drawTableItems()
  -- Очищаем область таблицы
  for row = TABLE_BODY_START_Y, TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS - 1 do
    gpu.setBackground(BG_MAIN)
    gpu.fill(TABLE_X, row, TABLE_WIDTH, 1, " ")
  end

  -- Отрисовка каждого элемента, видимого в текущей области
  for i = scroll, math.min(#content, scroll + VISIBLE_TABLE_ROWS - 1) do
    local row = TABLE_BODY_START_Y + (i - scroll)
    local item = content[i]
    local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
    local currentQty = 0
    if detail and detail.basic() then 
      currentQty = detail.basic().qty or 0
    end
    local reqCount = tonumber(item.count) or 0
    local diff = reqCount - currentQty
    local colorText = CTEXT
    if currentQty >= reqCount then
      colorText = COLOR_HIGH
    elseif diff >= math.floor(reqCount * 0.5) then
      colorText = COLOR_LOW
    else
      colorText = COLOR_MEDIUM
    end

    if posSelect and i == posSelect then
      gpu.setBackground(COLOR_HIGHLIGHT)
    else
      gpu.setBackground(BG_MAIN)
    end

    local line = string.format("|%-4d|%-40s|%-20s|%-8d|%-8d|%-10d|", i, item.name, item.category or "", reqCount, currentQty, item.craftSize or 0)
    line = line .. string.rep(" ", TABLE_WIDTH - unicode.len(line))
    gpu.setForeground(colorText)
    gpu.set(TABLE_X, row, line)
  end
end

local function drawScrollBar()
  oc.drawscroll(TABLE_X + TABLE_WIDTH + 1, TABLE_BODY_START_Y, 1, VISIBLE_TABLE_ROWS, scroll, #content, COLOR_HIGHLIGHT, COLOR_BUTTON)
end

local function drawButtons()
  if not buttons then return end
  for i = 1, #buttons do
    local button = buttons[i]
    for j = 1, #button.ButtonIn do
      if button.ButtonIn[j] == guiPath[#guiPath] and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, COLOR_BUTTON, COLOR_BUTTON_TEXT, button.text)
      end
    end
  end
end

local function drawEditMode()
  local dialogX, dialogY, dialogW, dialogH = 20, 15, 100, 12
  drawBorder(dialogX - 1, dialogY - 1, dialogW + 2, dialogH + 2, COLOR_BUTTON)
  gpu.setBackground(COLOR_HIGHLIGHT)
  for y = dialogY, dialogY + dialogH - 1 do
    gpu.fill(dialogX, y, dialogW, 1, " ")
  end
  gpu.setForeground(CTEXT)
  local header = "Редактирование предмета"
  gpu.set(dialogX + math.floor((dialogW - unicode.len(header)) / 2), dialogY, header)

  local item = dataItems[posSelect]
  if item then
    gpu.set(dialogX + 2, dialogY + 2, "Имя: " .. item.name)
    gpu.set(dialogX + 2, dialogY + 3, "Категория: " .. (item.category or ""))
    gpu.set(dialogX + 2, dialogY + 4, "Треб: " .. (item.count or ""))
    gpu.set(dialogX + 2, dialogY + 5, "Крафт: " .. (item.craftSize or ""))
  end

  for i = 1, #buttons do
    local button = buttons[i]
    for j = 1, #button.ButtonIn do
      if button.ButtonIn[j] == "change" and button.visible then
        oc.drawbutton(button.x, button.y, button.w, button.h, COLOR_BUTTON, COLOR_BUTTON_TEXT, button.text)
      end
    end
  end
end

local function fullRedraw()
  if guiPath[#guiPath] == "change" then
    drawEditMode()
  else
    drawStatic()
    updateContent()
    drawTableItems()
    drawScrollBar()
    drawButtons()
    drawLogsArea()
  end
end

---------------------- АВТО-КРАФТ ----------------------
local function autoCraftCheck()
  for i, item in ipairs(dataQueue) do
    if not item.craft or item.craft.isDone() or item.craft.isCanceled() then
      item.craft = nil
      local detail = me.getItemDetail({id = item.id, dmg = item.dmg})
      if detail then
        local currentQty = 0
        if detail.basic() then
          currentQty = detail.basic().qty or 0
        end
        local reqCount = tonumber(item.count) or 0
        local delta = reqCount - currentQty
        local status = (currentQty >= reqCount) and "sufficient" or 
                       (delta >= math.floor(reqCount * 0.5)) and "insufficient" or "intermediate"
        addLogEvent("Craft", item.name .. "  Тек.: " .. currentQty .. "  Треб.: " .. reqCount, status)
        if delta > (tonumber(item.craftSize) or 0) then
          delta = tonumber(item.craftSize) or 0
        end
        if delta > 0 then
          local cpus = me.getCpus()
          for _, cpu in ipairs(cpus) do
            if not cpu.busy and cpu.storage == item.cpu then
              local craftables = me.getCraftables({name = item.id, damage = item.dmg})
              if craftables.n and craftables.n >= 1 then
                item.craft = craftables[1].request(delta, false, tostring(item.cpu))
                addLogEvent("Craft", "Запрошен крафт " .. item.name .. " x" .. delta, status)
                break
              else
                addLogEvent("Craft", item.name .. " не имеет рецепта", "insufficient")
              end
            end
          end
        end
      end
    end
  end
  os.sleep(1)
end

---------------------- УПРАВЛЕНИЕ ПРЕДМЕТАМИ ----------------------
local function addItem()
  changeItem = true
  local stack = me.getStackInSlot(1)
  if stack then
    gpu.setBackground(BG_MAIN)
    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.setForeground(CTEXT)
    gpu.set(2, 43, "Введите название:")
    term.setCursor(20, 43)
    local name = tostring(io.read())
    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите категорию:")
    term.setCursor(20, 43)
    local category = tostring(io.read())
    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите требуемое число:")
    term.setCursor(25, 43)
    local count = tonumber(io.read())
    gpu.fill(1, 43, WIDTH, 1, " ")
    gpu.set(2, 43, "Введите объём крафта:")
    term.setCursor(25, 43)
    local craftSize = tonumber(io.read())
    gpu.fill(1, 43, WIDTH, 1, " ")
    table.insert(dataItems, {
      name = name,
      category = category,
      id = stack.id,
      dmg = stack.dmg,
      count = count,
      craftSize = craftSize,
      cpu = 65536
    })
    oc.savef(dataFile, dataItems)
    addLogEvent("Add", "Добавлен: " .. name .. " (" .. category .. ")", "intermediate")
  else
    gpu.set(2, 43, "Предмет не установлен в 1-й слот!")
    os.sleep(2)
    gpu.fill(1, 43, WIDTH, 1, " ")
  end
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  requestRedraw()
  changeItem = false
end

local function removeItem()
  if posSelect then
    -- Запрашиваем подтверждение на удаление
    gpu.set(2, 43, "Удалить выбранный предмет? (Y/N): ")
    local answer = string.lower(tostring(io.read()))
    if answer == "y" then
      for i = 1, #dataItems do
        if dataItems[i].name == content[posSelect].name then
          table.remove(dataItems, i)
          oc.savef(dataFile, dataItems)
          addLogEvent("Edit", "Удалён: " .. content[posSelect].name, "insufficient")
          posSelect = nil
          dataItems = oc.loadf(dataFile) or {}
          updateContent()
          requestRedraw()
          return true
        end
      end
    else
      gpu.fill(1, 43, WIDTH, 1, " ")
      return false
    end
  end
end

local function editItem()
  if posSelect then
    for i = 1, #dataItems do
      if dataItems[i].name == content[posSelect].name then
        posSelect = i
        toGui("change", false)
        return true
      end
    end
  end
end

local function changeItemData(action)
  if posSelect then
    gpu.fill(1, 45, WIDTH, 1, " ")
    local oldVal, newVal, fieldName = nil, nil, ""
    if action == "changeName" then
      fieldName = "Имя"
      oldVal = dataItems[posSelect].name
      gpu.set(2, 45, "Введите новое имя:")
      term.setCursor(25, 45)
      newVal = tostring(io.read())
      dataItems[posSelect].name = newVal
    elseif action == "changeCategory" then
      fieldName = "Категория"
      oldVal = dataItems[posSelect].category
      gpu.set(2, 45, "Введите новую категорию:")
      term.setCursor(25, 45)
      newVal = tostring(io.read())
      dataItems[posSelect].category = newVal
    elseif action == "changeCount" then
      fieldName = "Требуемое число"
      oldVal = dataItems[posSelect].count
      gpu.set(2, 45, "Введите новое требуемое число:")
      term.setCursor(30, 45)
      newVal = tonumber(io.read())
      dataItems[posSelect].count = newVal
    elseif action == "changeCraftSize" then
      fieldName = "Объём крафта"
      oldVal = dataItems[posSelect].craftSize
      gpu.set(2, 45, "Введите новый объём крафта:")
      term.setCursor(30, 45)
      newVal = tonumber(io.read())
      dataItems[posSelect].craftSize = newVal
    end
    oc.savef(dataFile, dataItems)
    dataItems = oc.loadf(dataFile) or {}
    updateContent()
    requestRedraw()
    addLogEvent("Edit", fieldName .. " изменён: '" .. tostring(oldVal) .. "' -> '" .. tostring(newVal) .. "'", "intermediate")
  end
end

---------------------- ОБРАБОТЧИКИ СОБЫТИЙ ----------------------
local function onTouch(_, _, x, y, _, nick)
  if ADM[nick] then
    for i = 1, #buttons do
      local button = buttons[i]
      if x >= button.x and x <= (button.x + button.w - 1) and
         y >= button.y and y <= (button.y + button.h - 1) then
        for j = 1, #button.ButtonIn do
          if button.ButtonIn[j] == guiPath[#guiPath] then
            button.action()
            return true
          end
        end
      end
    end
    if guiPath[#guiPath] == "start" and
       x >= TABLE_X and x <= (TABLE_X + TABLE_WIDTH - 1) and 
       y >= TABLE_BODY_START_Y and y < (TABLE_BODY_START_Y + VISIBLE_TABLE_ROWS) then
      posSelect = scroll + (y - TABLE_BODY_START_Y)
      requestRedraw()
    end
  end
end

local function onScroll(_, _, _, _, dir, nick)
  if ADM[nick] then
    if guiPath[#guiPath] == "start" then
      if dir == 1 and scroll > 1 then
        scroll = scroll - 1
      elseif dir == -1 and scroll < maxScroll then
        scroll = scroll + 1
      end
      requestRedraw()
    end
  end
end

local function onKeyDown(_, _, key, code, nick)
  if ADM[nick] and not changeItem then
    if guiPath[#guiPath] == "start" then
      if key == 8 then
        inputFind = unicode.sub(inputFind, 1, -2)
      elseif key == 0 and code == 211 then
        inputFind = ""
      elseif key ~= 0 then
        if inputFind == "" then
          inputFind = unicode.char(key)
        elseif unicode.len(inputFind) < 49 then
          inputFind = inputFind .. unicode.char(key)
        end
      end
      updateContent()
      requestRedraw()
    end
  end
end

---------------------- ИНИЦИАЛИЗАЦИЯ КНОПОК ----------------------
local function initButtons()
  buttons = {
    {
      ButtonIn = {"start"}, visible = true,
      x = 2, y = HEIGHT - 3, w = 12, h = 3,
      text = "Exit",
      action = function()
        gpu.setResolution(160, 50)
        if touchEvent then event.cancel(touchEvent) end
        if scrollEvent then event.cancel(scrollEvent) end
        if keyDownEvent then event.cancel(keyDownEvent) end
        os.exit()
      end
    },
    {
      ButtonIn = {"start"}, visible = true,
      x = 16, y = HEIGHT - 3, w = 16, h = 3,
      text = "Craft: OFF",
      action = function()
        craftingActive = not craftingActive
        if craftingActive then
          buttons[2].text = "Craft: ON"
        else
          buttons[2].text = "Craft: OFF"
        end
        requestRedraw()
      end
    },
    {
      ButtonIn = {"start"}, visible = true,
      x = 34, y = HEIGHT - 3, w = 10, h = 3,
      text = "Add",
      action = addItem
    },
    {
      ButtonIn = {"start"}, visible = true,
      x = 46, y = HEIGHT - 3, w = 10, h = 3,
      text = "Edit",
      action = editItem
    },
    {
      ButtonIn = {"start"}, visible = true,
      x = 58, y = HEIGHT - 3, w = 12, h = 3,
      text = "Remove",
      action = removeItem
    },
    {
      ButtonIn = {"start"}, visible = true,
      x = 72, y = HEIGHT - 3, w = 10, h = 3,
      text = "Sort",
      action = function()
        if sortCriteria == "name" then
          sortCriteria = "category"
        elseif sortCriteria == "category" then
          sortCriteria = "count"
        else
          sortCriteria = "name"
        end
        addLogEvent("Edit", "Сортировка по " .. sortCriteriaDisplay[sortCriteria], "intermediate")
        updateContent()
        requestRedraw()
      end
    },
    -- Кнопки для режима редактирования ("change")
    {
      ButtonIn = {"change"}, visible = true,
      x = 25, y = 18, w = 18, h = 3,
      text = "Изм. имя",
      action = function() changeItemData("changeName") end
    },
    {
      ButtonIn = {"change"}, visible = true,
      x = 46, y = 18, w = 18, h = 3,
      text = "Изм. кат.",
      action = function() changeItemData("changeCategory") end
    },
    {
      ButtonIn = {"change"}, visible = true,
      x = 67, y = 18, w = 18, h = 3,
      text = "Изм. треб.",
      action = function() changeItemData("changeCount") end
    },
    {
      ButtonIn = {"change"}, visible = true,
      x = 88, y = 18, w = 18, h = 3,
      text = "Изм. крафт",
      action = function() changeItemData("changeCraftSize") end
    },
    {
      ButtonIn = {"change"}, visible = true,
      x = 55, y = 26, w = 18, h = 3,
      text = "Назад",
      action = goBack
    }
  }
end

---------------------- ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ ----------------------
local touchEvent, scrollEvent, keyDownEvent

local function LoadSystem()
  gpu.fill(1, 1, WIDTH, HEIGHT, " ")
  dataItems = oc.loadf(dataFile) or {}
  updateContent()
  initButtons()
  touchEvent = event.listen("touch", onTouch)
  scrollEvent = event.listen("scroll", onScroll)
  keyDownEvent = event.listen("key_down", onKeyDown)
  toGui("start", false)
  dataQueue = dataItems
  fullRedraw()
  return true
end

local function mainLoop()
  if LoadSystem() then
    while running do
      if craftingActive then
        local status, err = pcall(autoCraftCheck)
        if not status then
          gpu.set(2, HEIGHT, "Ошибка: " .. tostring(err))
          os.sleep(2)
          os.exit()
        end
      end
      if redrawNeeded then
        fullRedraw()
        redrawNeeded = false
      end
      os.sleep(0.2)
    end
  end
end

local ok, err = pcall(mainLoop)
if not ok then
  if touchEvent then event.cancel(touchEvent) end
  if scrollEvent then event.cancel(scrollEvent) end
  if keyDownEvent then event.cancel(keyDownEvent) end
  gpu.set(2, HEIGHT, "Фатальная ошибка: " .. tostring(err))
  os.sleep(5)
  os.exit()
end
