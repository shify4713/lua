local component = require("component")
local fs = require("filesystem")
local shell = require("shell")
local event = require("event")
local unicode = require("unicode")
local term = require("term")
local computer = require("computer")
local g = component.gpu
local me = component.me_interface

-- Пути и библиотека
local DATA_FILE = "/home/BD.txt"
local LIB_PATH = "/lib/ultimateOC.lua"
local LIB_URL = "https://raw.githubusercontent.com/shify4713/lua/refs/heads/main/ultimateOC.lua"

if not fs.exists(LIB_PATH) then
    shell.execute("wget -f " .. LIB_URL .. " " .. LIB_PATH)
end
local ok, uoc = pcall(require, "ultimateOC")
if not ok then
    io.stderr:write("Не удалось загрузить ultimateOC.lua: " .. tostring(uoc) .. "\n")
    os.exit(1)
end

if not fs.exists(DATA_FILE) then
    uoc.savef(DATA_FILE, {})
end

--------------------------------------------------------------------------------
-- Новая компоновка интерфейса (размер экрана 110х40)
--------------------------------------------------------------------------------
local WIDTH, HEIGHT = 110, 40

-- Зоны по вертикали:
local HEADER_HEIGHT = 3           -- строки 1–3: заголовок
local CATEGORY_Y = 4              -- строка 4: навигация по категориям

local TABLE_TOP_Y = 5             -- таблица начинается с 5-й строки
local TABLE_HEIGHT = 13           -- таблица занимает строки 5–17; из них 1 строка – верхняя рамка, 1 – заголовок, 1 – разделитель, 1 – нижняя рамка; т.е. 9 строк для данных.
local DATA_ROWS = TABLE_HEIGHT - 4 -- 13-4 = 9 строк данных

local SEARCH_Y = TABLE_TOP_Y + TABLE_HEIGHT  -- строки 18–20
local SEARCH_HEIGHT = 3

local PAGE_NAV_Y = SEARCH_Y + SEARCH_HEIGHT    -- строка 21

local LOGS_Y = PAGE_NAV_Y + 1       -- строки 22–37 (16 строк) для логов

local BUTTONS_Y = LOGS_Y + 16       -- строки 38–40 для кнопок (3 строки)

-- Расчет рабочих зон по горизонтали для таблицы:
-- Всего имеется WIDTH-4 = 106 символов внутри рамок.
-- Зададим жёсткую ширину для столбцов:
local col_name = 40   -- Название
local col_cat  = 20   -- Категория
local col_now  = 10   -- В наличии
local col_hold = 20   -- Держать
local col_once = 16   -- За раз
-- Сумма: 40 + 20 + 10 + 20 + 16 = 106

--------------------------------------------------------------------------------
-- Настройки цветов
--------------------------------------------------------------------------------
local COLORS = {
    button = 0x00BFFF,
    buttonActive = 0x1E90FF,
    border = 0x44475a,
    text = 0xF8F8F2,
    shadow = 0x282A36,
    bg = 0x23242b,
    error = 0xFF5555,
    ok = 0x50FA7B,
    log = 0x8BE9FD,
    progress_bg = 0x44475a,
    progress_fg = 0x50FA7B,
    select = 0x31313A,
    select_active = 0x44B3FF,
    search_bg = 0x282B36,
    search_border = 0x00BFFF,
    search_cross = 0xFF5555,
    search_hint = 0x888888,
    bar_shadow = 0x181920,
}

--------------------------------------------------------------------------------
-- Глобальные переменные
--------------------------------------------------------------------------------
local craftStatus = "Ожидание..."
local nextCraftUpdate = 0
local isCrafting = false

local currentPage = 1
local categoryFilter = "all"
local categoryIndex = 1
local categories = {"all"}

local logs = {}
local dataItems = {}
local search = ""
local selectedItem = nil
local changeitem = false

-- Для автокрафта используем только CPU с 256К хранилищем
local CPU_STORAGE = 65536

--------------------------------------------------------------------------------
-- Функция логирования (без отметок времени)
--------------------------------------------------------------------------------
local function addLog(logs, text, lvl)
    lvl = lvl or "INFO"
    local t = string.format("[%s] %s", lvl, text)
    table.insert(logs, t)
    while #logs > 50 do table.remove(logs, 1) end
end

--------------------------------------------------------------------------------
-- Функции работы с данными
--------------------------------------------------------------------------------
local function updateCategories()
    local catSet = {}
    for _, item in ipairs(dataItems) do
        local cat = item.category or "all"
        catSet[cat] = true
    end
    categories = {"all"}
    for cat, _ in pairs(catSet) do
        if cat ~= "all" then table.insert(categories, cat) end
    end
    table.sort(categories)
    table.insert(categories, 1, "all")
    categoryIndex = 1
    categoryFilter = categories[categoryIndex]
end

local function getFilteredItems()
    local items = {}
    for _, item in ipairs(dataItems) do
        if ((search == "") or unicode.lower(item.name or ""):find(unicode.lower(search), 1, true))
           and (categoryFilter == "all" or (item.category and item.category == categoryFilter))
        then
            table.insert(items, item)
        end
    end
    -- Сортировка: сначала по категории, потом по имени
    table.sort(items, function(a, b)
        if (a.category or "") == (b.category or "") then
            return (a.name or "") < (b.name or "")
        else
            return (a.category or "") < (b.category or "")
        end
    end)
    return items
end

local function reload()
    local ok, res = pcall(uoc.loadf, DATA_FILE)
    dataItems = ok and res or {}
    for _, item in ipairs(dataItems) do
        local qty = 0
        local stackList = {}
        pcall(function() stackList = me.getItemsInNetwork({id = item.id, damage = item.dmg}) end)
        if stackList and stackList.n and stackList.n > 0 then
            for _, stack in ipairs(stackList) do
                if stack.name == item.id and (item.dmg == nil or stack.damage == item.dmg) then
                    qty = stack.size or stack.qty or 0
                    break
                end
            end
        else
            local ok2, d = pcall(me.getItemDetail, {id = item.id, dmg = item.dmg})
            if ok2 and d then
                qty = d.qty or d.size or 0
            end
        end
        item.current = qty
    end
    updateCategories()
end

local function save()
    local ok, err = pcall(uoc.savef, DATA_FILE, dataItems)
    if not ok then addLog(logs, "Ошибка сохранения: " .. tostring(err), "ERROR") end
end

local function resetSelection()
    search = ""
    currentPage = 1
    selectedItem = nil
end

--------------------------------------------------------------------------------
-- Визуальные функции
--------------------------------------------------------------------------------
local function clear()
    g.setBackground(COLORS.bg)
    g.fill(1, 1, WIDTH, HEIGHT, " ")
    g.setForeground(COLORS.text)
end

local function shadowRect(x, y, w, h)
    g.setBackground(COLORS.bar_shadow)
    g.fill(x+1, y+h, w, 1, " ")
    g.fill(x+w, y, 1, h, " ")
    g.setBackground(COLORS.bg)
end

-- Отрисовка навигации по категориям (строка 4)
local function drawCategoryNavigation()
    local prefix = "Категория: "
    local leftArrow = "<"
    local rightArrow = ">"
    local navString = prefix .. leftArrow .. " " .. categoryFilter .. " " .. rightArrow
    local x = math.floor((WIDTH - unicode.len(navString)) / 2) + 1
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.ok)
    g.set(x, CATEGORY_Y, navString)
end

-- Отрисовка заголовка и состояния (строки 1–3)
local function drawHeader()
    uoc.drawText(3, 1, "Ultimate AutoCraft", COLORS.ok, true)
    g.setBackground(COLORS.progress_fg)
    g.fill(2, 2, WIDTH-2, 1, " ")
    shadowRect(2, 2, WIDTH-2, 1)
    g.setBackground(COLORS.bg)
    uoc.drawText(WIDTH-34, 1, "Статус: " .. craftStatus,
        (craftStatus:find("Ошибка") and COLORS.error) or COLORS.ok)
    uoc.progressBar(3, 3, WIDTH-6, isCrafting and 0.9 or 0)
end

-- Отрисовка таблицы предметов (строки 5–17)
local function drawItems()
    local x = 2
    local y = TABLE_TOP_Y
    -- Верхняя рамка
    g.setForeground(COLORS.select_active)
    local topLine = "┌" .. string.rep("─", col_name) .. "┬" ..
                    string.rep("─", col_cat)  .. "┬" ..
                    string.rep("─", col_now)  .. "┬" ..
                    string.rep("─", col_hold) .. "┬" ..
                    string.rep("─", col_once) .. "┐"
    g.set(x, y, topLine)
    
    -- Заголовок столбцов
    local headerY = y + 1
    g.set(x, headerY, "│")
    g.setForeground(COLORS.ok)
    g.set(x+1, headerY, string.format("%-" .. col_name .. "s", " Название"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+1, headerY, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+2, headerY, string.format("%-" .. col_cat .. "s", " Категория"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_cat+1, headerY, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_cat+2, headerY, string.format("%-" .. col_now .. "s", " В наличии"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_cat+col_now+1, headerY, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_cat+col_now+2, headerY, string.format("%-" .. col_hold .. "s", " Держать"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_cat+col_now+col_hold+1, headerY, "│")
    g.setForeground(COLORS.ok)
    g.set(x+col_name+col_cat+col_now+col_hold+2, headerY, string.format("%-" .. col_once .. "s", " За раз"))
    g.setForeground(COLORS.select_active)
    g.set(x+col_name+col_cat+col_now+col_hold+col_once+1, headerY, "│")
    
    -- Разделитель
    local divider = "├" .. string.rep("─", col_name) .. "┼" ..
                    string.rep("─", col_cat)  .. "┼" ..
                    string.rep("─", col_now)  .. "┼" ..
                    string.rep("─", col_hold) .. "┼" ..
                    string.rep("─", col_once) .. "┤"
    g.set(x, y+2, divider)
    
    -- Получаем отфильтрованные предметы и вычисляем страницы
    local filteredItems = getFilteredItems()
    local totalItems = #filteredItems
    local totalPages = math.max(1, math.ceil(totalItems / DATA_ROWS))
    if currentPage > totalPages then currentPage = totalPages end
    local startIndex = (currentPage - 1) * DATA_ROWS + 1
    local endIndex = math.min(startIndex + DATA_ROWS - 1, totalItems)
    
    -- Вывод данных (начинаем с y+3)
    for i = startIndex, endIndex do
        local it = filteredItems[i]
        local row = y + 2 + (i - startIndex) + 1
        local isSel = (selectedItem and dataItems[selectedItem] and it == dataItems[selectedItem])
        g.setBackground(isSel and COLORS.select_active or COLORS.bg)
        g.setForeground(COLORS.text)
        local nameStr = unicode.sub((it.name or "<??>"), 1, col_name)
        local catStr  = unicode.sub((it.category or "all"), 1, col_cat)
        local inStock = string.format("%-" .. col_now .. "s", tostring(tonumber(it.current) or 0))
        local holdStr = string.format("%-" .. col_hold .. "s", tostring(tonumber(it.count) or 0))
        local onceStr = string.format("%-" .. col_once .. "s", tostring(tonumber(it.craftSize) or 0))
        g.set(x, row, "│")
        g.set(x+1, row, string.format("%-" .. col_name .. "s", nameStr))
        g.set(x+col_name+1, row, "│")
        g.set(x+col_name+2, row, string.format("%-" .. col_cat .. "s", catStr))
        g.set(x+col_name+col_cat+1, row, "│")
        g.set(x+col_name+col_cat+2, row, inStock)
        g.set(x+col_name+col_cat+col_now+1, row, "│")
        g.set(x+col_name+col_cat+col_now+2, row, holdStr)
        g.set(x+col_name+col_cat+col_now+col_hold+1, row, "│")
        g.set(x+col_name+col_cat+col_now+col_hold+2, row, onceStr)
        g.set(x+col_name+col_cat+col_now+col_hold+col_once+1, row, "│")
        g.setBackground(COLORS.bg)
    end

    -- Нижняя рамка
    local lastRow = y + TABLE_HEIGHT - 1
    local bottomLine = "└" .. string.rep("─", col_name) .. "┴" ..
                       string.rep("─", col_cat)  .. "┴" ..
                       string.rep("─", col_now)  .. "┴" ..
                       string.rep("─", col_hold) .. "┴" ..
                       string.rep("─", col_once) .. "┘"
    g.set(x, lastRow, bottomLine)
end

-- Отрисовка панели поиска (строки 18–20)
local function drawSearchBar()
    local x, y, w, h = 3, SEARCH_Y, WIDTH - 6, SEARCH_HEIGHT
    uoc.roundRect(x, y, w, h, COLORS.search_border, COLORS.search_bg)
    g.setBackground(COLORS.search_bg)
    g.fill(x + 1, y + 1, w - 2, h - 2, " ")
    g.setForeground(COLORS.search_cross)
    g.set(x + w - 3, y + 1, (search ~= "" and "×" or " "))
    g.setForeground(search ~= "" and COLORS.ok or COLORS.search_hint)
    local display = search
    if display == "" then display = "Поиск: введите часть названия..." end
    if searchActive then display = display .. "_" end
    local maxlen = w - 7
    if unicode.len(display) > maxlen then
        display = unicode.sub(display, unicode.len(display) - maxlen + 2)
    end
    g.set(x + 2, y + 1, display)
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.text)
end

-- Отрисовка навигации по страницам (строка 21)
local function drawPageNavigation()
    local filtered = getFilteredItems()
    local totalItems = #filtered
    local totalPages = math.max(1, math.ceil(totalItems / DATA_ROWS))
    local navText = "Страница: " .. currentPage .. "/" .. totalPages .. "  [<]  [>]"
    local x = math.floor((WIDTH - unicode.len(navText)) / 2) + 1
    g.setBackground(COLORS.bg)
    g.setForeground(COLORS.ok)
    g.set(x, PAGE_NAV_Y, navText)
end

-- Отрисовка логов (строки 22–37)
local function drawLogs()
    uoc.drawLogs(3, LOGS_Y, logs, LOGS_HEIGHT, COLORS.log)
end

-- Отрисовка кнопок (строки 38–40) – кнопки отрисовываются по центру этой зоны
local function drawButtons()
    local btnWidth = 12
    local btnCount = 4
    local totalBtnWidth = btnWidth * btnCount
    local startX = math.floor((WIDTH - totalBtnWidth) / 2) + 1
    local centerY = BUTTONS_Y + math.floor(BUTTONS_HEIGHT / 2)
    local btns = {
        {name = "Удалить", action = "remove"},
        {name = "Изменить", action = "edit"},
        {name = isCrafting and "Остановить" or "Автокрафт", action = "craft"},
        {name = "Добавить", action = "add"}
    }
    for i, v in ipairs(btns) do
        local x = startX + (i - 1) * btnWidth
        uoc.animatedButton(x, BUTTONS_Y, btnWidth, BUTTONS_HEIGHT, v.name, false, COLORS.button, COLORS.buttonActive, COLORS.text)
    end
end

-- Полное обновление экрана
local function draw()
    clear()
    drawHeader()
    drawCategoryNavigation()
    drawItems()
    drawSearchBar()
    drawPageNavigation()
    drawLogs()
    drawButtons()
end

--------------------------------------------------------------------------------
-- Функции изменения списка (модальные окна ввода)
--------------------------------------------------------------------------------
local function addItem()
    changeitem = true
    clear()
    local startY = math.floor(HEIGHT/2) - 2
    uoc.drawText(10, startY, "Вставьте предмет в 1-й слот ME и введите параметры.", COLORS.ok)
    uoc.drawText(10, startY + 1, "Название: ", COLORS.text)
    term.setCursor(22, startY + 1)
    local name = tostring(io.read())
    uoc.drawText(10, startY + 2, "Держать (число): ", COLORS.text)
    term.setCursor(29, startY + 2)
    local count = tonumber(io.read()) or 0
    uoc.drawText(10, startY + 3, "Крафт за раз (число): ", COLORS.text)
    term.setCursor(32, startY + 3)
    local craftSize = tonumber(io.read()) or 1
    uoc.drawText(10, startY + 4, "Категория: ", COLORS.text)
    term.setCursor(22, startY + 4)
    local category = tostring(io.read())
    if category == "" then category = "all" end
    local stack = nil
    local ok, res = pcall(me.getStackInSlot, 1)
    if ok then stack = res end
    if stack then
        table.insert(dataItems, {
            name = name,
            id = stack.id,
            dmg = stack.dmg,
            count = count,
            craftSize = craftSize,
            category = category
        })
        save()
        addLog(logs, "Добавлен предмет: " .. name, "INFO")
    else
        addLog(logs, "Ошибка: нет предмета в слоте 1!", "ERROR")
    end
    changeitem = false
    resetSelection()
    draw()
end

local function editItem()
    if not selectedItem then
        return addLog(logs, "Не выбран предмет!", "ERROR")
    end
    local item = dataItems[selectedItem]
    changeitem = true
    clear()
    local startY = math.floor(HEIGHT/2) - 2
    uoc.drawText(10, startY, "Изменение: " .. (item.name or "<??>"), COLORS.ok)
    uoc.drawText(10, startY + 1, "Новое имя (Enter пропустить): ", COLORS.text)
    term.setCursor(42, startY + 1)
    local name = tostring(io.read())
    if name and name ~= "" then
        item.name = name
    end
    uoc.drawText(10, startY + 2, "Новое держать (число, Enter пропустить): ", COLORS.text)
    term.setCursor(54, startY + 2)
    local countstr = tostring(io.read())
    local count = tonumber(countstr)
    if countstr ~= "" and count then
        item.count = count
    end
    uoc.drawText(10, startY + 3, "Новый крафт за раз (число, Enter пропустить): ", COLORS.text)
    term.setCursor(56, startY + 3)
    local csstr = tostring(io.read())
    local cs = tonumber(csstr)
    if csstr ~= "" and cs then
        item.craftSize = cs
    end
    uoc.drawText(10, startY + 4, "Новая категория (Enter пропустить): ", COLORS.text)
    term.setCursor(42, startY + 4)
    local category = tostring(io.read())
    if category ~= "" then
        item.category = category
    end
    save()
    addLog(logs, "Изменено: " .. item.name, "INFO")
    changeitem = false
    resetSelection()
    draw()
end

local function removeItem()
    if not selectedItem then
        return addLog(logs, "Не выбран предмет!", "ERROR")
    end
    addLog(logs, "Удалён: " .. (dataItems[selectedItem].name or "<??>"), "WARN")
    table.remove(dataItems, selectedItem)
    selectedItem = nil
    save()
    draw()
end

local function doCraft()
    isCrafting = true
    craftStatus = "Автокрафт..."
    save()
    addLog(logs, "Запущен автокрафт", "INFO")
    draw()
end

local function stopCraft()
    isCrafting = false
    craftStatus = "Остановлено"
    addLog(logs, "Остановлен автокрафт", "WARN")
    draw()
end

--------------------------------------------------------------------------------
-- Основной цикл автокрафта
--------------------------------------------------------------------------------
local function autoCraftLoop()
    while true do
        if isCrafting then
            local now = computer.uptime()
            if now >= nextCraftUpdate then
                reload()
                local ok2, cpus = pcall(me.getCpus)
                cpus = ok2 and cpus or {}
                for i, item in ipairs(dataItems) do
                    local count = tonumber(item.count) or 0
                    local craftSize = tonumber(item.craftSize) or 1
                    local currentQty = tonumber(item.current) or 0
                    if currentQty < count then
                        local freeCPU = nil
                        for _, cpu in ipairs(cpus) do
                            if cpu.storage and cpu.storage == CPU_STORAGE and (not cpu.busy) then
                                freeCPU = cpu
                                break
                            end
                        end
                        if freeCPU then
                            local ok3, craftables = pcall(me.getCraftables, {name = item.id, damage = item.dmg})
                            craftables = ok3 and craftables or {n = 0}
                            if craftables.n and craftables.n >= 1 then
                                local delta = math.min(craftSize, count - currentQty)
                                if delta > 0 then
                                    local succ, req = pcall(function() return craftables[1].request(delta, false, freeCPU.name) end)
                                    if succ and req then
                                        craftStatus = "Крафт: " .. (item.name or "<??>")
                                        addLog(logs, "Крафт " .. delta .. "x " .. (item.name or "<??>") .. " на CPU " .. tostring(freeCPU.name), "INFO")
                                    else
                                        craftStatus = "Ошибка: запрос крафта"
                                        addLog(logs, "Ошибка: не удалось отправить крафт " .. (item.name or "<??>"), "ERROR")
                                    end
                                end
                            else
                                craftStatus = "Ошибка: нет рецепта " .. (item.name or "<??>")
                                addLog(logs, "Ошибка: нет рецепта " .. (item.name or "<??>"), "ERROR")
                            end
                        else
                            craftStatus = "Ошибка: нет свободных CPU с 256К"
                            addLog(logs, "Ошибка: нет свободных CPU с требуемой емкостью", "ERROR")
                        end
                    end
                end
                save()
                nextCraftUpdate = now + 5
            end
        end
        draw()
        os.sleep(0.2)
    end
end

--------------------------------------------------------------------------------
-- Обработка событий (без показа подсказок)
--------------------------------------------------------------------------------
event.listen("touch", function(_, _, x, y, _, _)
    if changeitem then return end

    -- Навигация по категориям (строка 4)
    if y == CATEGORY_Y then
        local prefix = "Категория: "
        local leftArrow = "<"
        local rightArrow = ">"
        local navString = prefix .. leftArrow .. " " .. categoryFilter .. " " .. rightArrow
        local startX = math.floor((WIDTH - unicode.len(navString)) / 2) + 1
        local leftArrowX = startX + unicode.len(prefix)
        local rightArrowX = startX + unicode.len(prefix) + 1 + unicode.len(categoryFilter) + 1
        if x >= leftArrowX and x < leftArrowX + 1 then
            if categoryIndex > 1 then
                categoryIndex = categoryIndex - 1
                categoryFilter = categories[categoryIndex]
                currentPage = 1
                draw()
                return
            end
        elseif x >= rightArrowX and x < rightArrowX + 1 then
            if categoryIndex < #categories then
                categoryIndex = categoryIndex + 1
                categoryFilter = categories[categoryIndex]
                currentPage = 1
                draw()
                return
            end
        end
    end

    -- Навигация по страницам (строка 21)
    if y == PAGE_NAV_Y then
        local filtered = getFilteredItems()
        local totalItems = #filtered
        local totalPages = math.max(1, math.ceil(totalItems / DATA_ROWS))
        local navText = "Страница: " .. currentPage .. "/" .. totalPages .. "  [<]  [>]"
        local startX = math.floor((WIDTH - unicode.len(navText)) / 2) + 1
        local leftArrowStart, leftArrowEnd = string.find(navText, "%[%<%]")
        local rightArrowStart, rightArrowEnd = string.find(navText, "%[%>%]")
        if leftArrowStart then
            local absLeftStart = startX + leftArrowStart - 1
            local absLeftEnd = startX + leftArrowEnd - 1
            if x >= absLeftStart and x <= absLeftEnd then
                if currentPage > 1 then
                    currentPage = currentPage - 1
                    draw()
                    return
                end
            end
        end
        if rightArrowStart then
            local absRightStart = startX + rightArrowStart - 1
            local absRightEnd = startX + rightArrowEnd - 1
            if x >= absRightStart and x <= absRightEnd then
                if currentPage < totalPages then
                    currentPage = currentPage + 1
                    draw()
                    return
                end
            end
        end
    end

    -- Обработка нажатия по кнопкам (зона строк 38–40)
    if y >= BUTTONS_Y and y < BUTTONS_Y + BUTTONS_HEIGHT then
        local btnWidth = 12
        local btnCount = 4
        local totalBtnWidth = btnWidth * btnCount
        local startX = math.floor((WIDTH - totalBtnWidth) / 2) + 1
        for i = 1, btnCount do
            local bx = startX + (i - 1) * btnWidth
            if x >= bx and x < bx + btnWidth then
                if i == 1 then
                    removeItem()
                elseif i == 2 then
                    editItem()
                elseif i == 3 then
                    if isCrafting then stopCraft() else doCraft() end
                elseif i == 4 then
                    addItem()
                end
                draw()
                return
            end
        end
    end

    -- Клик по области поиска (строки 18–20)
    if y >= SEARCH_Y and y < SEARCH_Y + SEARCH_HEIGHT then
        if x >= 3 + (WIDTH - 6) - 3 and x <= 3 + (WIDTH - 6) - 1 and search ~= "" then
            search = ""
            draw()
            return
        end
        if x >= 3 and x < 3 + (WIDTH - 6) - 4 then
            searchActive = true
            draw()
            return
        end
    end

    -- Выбор предмета в таблице (строки данных: TABLE_TOP_Y+3 до TABLE_TOP_Y+2+DATA_ROWS)
    local tableStartY = TABLE_TOP_Y + 3
    local tableEndY = tableStartY + DATA_ROWS - 1
    if y >= tableStartY and y <= tableEndY then
        local idx = (currentPage - 1) * DATA_ROWS + (y - tableStartY + 1)
        local filteredItems = getFilteredItems()
        if filteredItems[idx] then
            for k, v in ipairs(dataItems) do
                if v == filteredItems[idx] then
                    selectedItem = k
                    break
                end
            end
            draw()
            return
        end
    end

    draw()
end)

-- Обработка ввода с клавиатуры (поддержка кириллицы)
event.listen("key_down", function(_, _, key, _, _)
    if changeitem then return end
    if searchActive then
        if key == 14 then -- backspace
            search = unicode.sub(search, 1, unicode.len(search) - 1)
        elseif key == 211 then -- delete
            search = ""
        elseif key == 28 then -- enter
            searchActive = false
        elseif key >= 32 then
            if unicode.len(search) < (WIDTH - 15) then
                search = search .. unicode.char(key)
            end
        end
    else
        local filtered = getFilteredItems()
        local totalPages = math.max(1, math.ceil(#filtered / DATA_ROWS))
        if key == 200 then -- up
            currentPage = math.max(1, currentPage - 1)
        elseif key == 208 then -- down
            currentPage = math.min(totalPages, currentPage + 1)
        end
    end
    draw()
end)

--------------------------------------------------------------------------------
-- Старт программы
--------------------------------------------------------------------------------
g.setResolution(WIDTH, HEIGHT)
reload()
draw()
local ok, err = pcall(autoCraftLoop)
if not ok then
    addLog(logs, "Фатальная ошибка: " .. tostring(err), "ERROR")
    draw()
    os.sleep(3)
    computer.shutdown(true)
end
